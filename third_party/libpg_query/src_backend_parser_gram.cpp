/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ACYCLIC = 26,                   /* ACYCLIC  */
  YYSYMBOL_ADD_P = 27,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 28,                     /* ADMIN  */
  YYSYMBOL_AFTER = 29,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 30,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 31,                       /* ALL  */
  YYSYMBOL_ALSO = 32,                      /* ALSO  */
  YYSYMBOL_ALTER = 33,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 34,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 35,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 36,                   /* ANALYZE  */
  YYSYMBOL_AND = 37,                       /* AND  */
  YYSYMBOL_ANTI = 38,                      /* ANTI  */
  YYSYMBOL_ANY = 39,                       /* ANY  */
  YYSYMBOL_ARE = 40,                       /* ARE  */
  YYSYMBOL_ARRAY = 41,                     /* ARRAY  */
  YYSYMBOL_AS = 42,                        /* AS  */
  YYSYMBOL_ASC_P = 43,                     /* ASC_P  */
  YYSYMBOL_ASOF = 44,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 45,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 46,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 47,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 48,                        /* AT  */
  YYSYMBOL_ATTACH = 49,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 50,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 51,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 52,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 53,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 54,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 55,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 56,                    /* BIGINT  */
  YYSYMBOL_BINARY = 57,                    /* BINARY  */
  YYSYMBOL_BIT = 58,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 59,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 60,                      /* BOTH  */
  YYSYMBOL_BY = 61,                        /* BY  */
  YYSYMBOL_CACHE = 62,                     /* CACHE  */
  YYSYMBOL_CALL_P = 63,                    /* CALL_P  */
  YYSYMBOL_CALLED = 64,                    /* CALLED  */
  YYSYMBOL_CASCADE = 65,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 66,                  /* CASCADED  */
  YYSYMBOL_CASE = 67,                      /* CASE  */
  YYSYMBOL_CAST = 68,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 69,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 113,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 114,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 115,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 116,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 117,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 118,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 119,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 120,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 121,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 122,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 123,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 124,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 125,                 /* DESCRIBE  */
  YYSYMBOL_DESTINATION = 126,              /* DESTINATION  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_EDGE = 138,                     /* EDGE  */
  YYSYMBOL_ELEMENT_ID = 139,               /* ELEMENT_ID  */
  YYSYMBOL_ELSE = 140,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 141,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 142,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 143,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 144,                    /* END_P  */
  YYSYMBOL_ENUM_P = 145,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 146,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 147,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 148,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 149,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 150,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 151,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 152,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 153,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 154,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 155,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 156,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 157,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GRAPH = 181,                    /* GRAPH  */
  YYSYMBOL_GRAPH_TABLE = 182,              /* GRAPH_TABLE  */
  YYSYMBOL_GROUP_P = 183,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 184,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 185,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 186,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 187,                  /* HANDLER  */
  YYSYMBOL_HAVING = 188,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 189,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 190,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 191,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 192,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 193,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 194,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 195,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 196,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 197,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 198,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 199,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 200,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 201,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 202,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 203,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 204,                /* INCREMENT  */
  YYSYMBOL_INDEX = 205,                    /* INDEX  */
  YYSYMBOL_INDEXES = 206,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 207,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 208,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 209,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 210,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 211,                  /* INNER_P  */
  YYSYMBOL_INOUT = 212,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 213,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 214,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 215,                   /* INSERT  */
  YYSYMBOL_INSTALL = 216,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 217,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 218,                    /* INT_P  */
  YYSYMBOL_INTEGER = 219,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 220,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 221,                 /* INTERVAL  */
  YYSYMBOL_INTO = 222,                     /* INTO  */
  YYSYMBOL_INVOKER = 223,                  /* INVOKER  */
  YYSYMBOL_IS = 224,                       /* IS  */
  YYSYMBOL_ISNULL = 225,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 226,                /* ISOLATION  */
  YYSYMBOL_JOIN = 227,                     /* JOIN  */
  YYSYMBOL_JSON = 228,                     /* JSON  */
  YYSYMBOL_KEEP = 229,                     /* KEEP  */
  YYSYMBOL_KEY = 230,                      /* KEY  */
  YYSYMBOL_LABEL = 231,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 232,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 233,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 234,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 235,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 236,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 237,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 238,                     /* LEFT  */
  YYSYMBOL_LEVEL = 239,                    /* LEVEL  */
  YYSYMBOL_LIKE = 240,                     /* LIKE  */
  YYSYMBOL_LIMIT = 241,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 242,                   /* LISTEN  */
  YYSYMBOL_LOAD = 243,                     /* LOAD  */
  YYSYMBOL_LOCAL = 244,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 245,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 246,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 247,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 248,                   /* LOGGED  */
  YYSYMBOL_MACRO = 249,                    /* MACRO  */
  YYSYMBOL_MAP = 250,                      /* MAP  */
  YYSYMBOL_MAPPING = 251,                  /* MAPPING  */
  YYSYMBOL_MATCH = 252,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 253,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 254,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 255,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 256,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 257,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 258,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 259,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 260,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 261,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 262,                 /* MINVALUE  */
  YYSYMBOL_MODE = 263,                     /* MODE  */
  YYSYMBOL_MONTH_P = 264,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 265,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 266,                     /* MOVE  */
  YYSYMBOL_NAME_P = 267,                   /* NAME_P  */
  YYSYMBOL_NAMES = 268,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 269,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 270,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 271,                    /* NCHAR  */
  YYSYMBOL_NEW = 272,                      /* NEW  */
  YYSYMBOL_NEXT = 273,                     /* NEXT  */
  YYSYMBOL_NO = 274,                       /* NO  */
  YYSYMBOL_NODE = 275,                     /* NODE  */
  YYSYMBOL_NONE = 276,                     /* NONE  */
  YYSYMBOL_NOT = 277,                      /* NOT  */
  YYSYMBOL_NOTHING = 278,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 279,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 280,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 281,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 282,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 283,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 284,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 285,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 286,                 /* OBJECT_P  */
  YYSYMBOL_OF = 287,                       /* OF  */
  YYSYMBOL_OFF = 288,                      /* OFF  */
  YYSYMBOL_OFFSET = 289,                   /* OFFSET  */
  YYSYMBOL_OIDS = 290,                     /* OIDS  */
  YYSYMBOL_OLD = 291,                      /* OLD  */
  YYSYMBOL_ON = 292,                       /* ON  */
  YYSYMBOL_ONLY = 293,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 294,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 295,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 296,                  /* OPTIONS  */
  YYSYMBOL_OR = 297,                       /* OR  */
  YYSYMBOL_ORDER = 298,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 299,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 300,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 301,                  /* OUTER_P  */
  YYSYMBOL_OVER = 302,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 303,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 304,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 305,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 306,                    /* OWNED  */
  YYSYMBOL_OWNER = 307,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 308,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 309,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 310,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 311,                /* PARTITION  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PATH = 314,                     /* PATH  */
  YYSYMBOL_PATHS = 315,                    /* PATHS  */
  YYSYMBOL_PERCENT = 316,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 317,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 318,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 319,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 320,                  /* PLACING  */
  YYSYMBOL_PLANS = 321,                    /* PLANS  */
  YYSYMBOL_POLICY = 322,                   /* POLICY  */
  YYSYMBOL_POSITION = 323,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 324,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 325,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 326,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 327,                /* PRECISION  */
  YYSYMBOL_PREPARE = 328,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 329,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 330,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 331,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 332,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 333,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 334,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 335,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 336,                  /* PROGRAM  */
  YYSYMBOL_PROPERTIES = 337,               /* PROPERTIES  */
  YYSYMBOL_PROPERTY = 338,                 /* PROPERTY  */
  YYSYMBOL_PUBLICATION = 339,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 340,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 341,                    /* QUOTE  */
  YYSYMBOL_RANGE = 342,                    /* RANGE  */
  YYSYMBOL_READ_P = 343,                   /* READ_P  */
  YYSYMBOL_REAL = 344,                     /* REAL  */
  YYSYMBOL_REASSIGN = 345,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 346,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 347,                /* RECURSIVE  */
  YYSYMBOL_REF = 348,                      /* REF  */
  YYSYMBOL_REFERENCES = 349,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 350,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 351,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 352,                  /* REINDEX  */
  YYSYMBOL_RELATIONSHIP = 353,             /* RELATIONSHIP  */
  YYSYMBOL_RELATIVE_P = 354,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 355,                  /* RELEASE  */
  YYSYMBOL_RENAME = 356,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 357,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 358,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 359,                  /* REPLICA  */
  YYSYMBOL_RESET = 360,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 361,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 362,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 363,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 364,                /* RETURNING  */
  YYSYMBOL_RETURNS = 365,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 366,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 367,                    /* RIGHT  */
  YYSYMBOL_ROLE = 368,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 369,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 370,                   /* ROLLUP  */
  YYSYMBOL_ROW = 371,                      /* ROW  */
  YYSYMBOL_ROWS = 372,                     /* ROWS  */
  YYSYMBOL_RULE = 373,                     /* RULE  */
  YYSYMBOL_SAMPLE = 374,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 375,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 376,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 377,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 378,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 379,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 380,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 381,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHORTEST = 394,                 /* SHORTEST  */
  YYSYMBOL_SHOW = 395,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 396,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 397,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 398,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 399,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 400,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 401,                     /* SOME  */
  YYSYMBOL_SOURCE = 402,                   /* SOURCE  */
  YYSYMBOL_SQL_P = 403,                    /* SQL_P  */
  YYSYMBOL_STABLE = 404,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 405,             /* STANDALONE_P  */
  YYSYMBOL_START = 406,                    /* START  */
  YYSYMBOL_STATEMENT = 407,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 408,               /* STATISTICS  */
  YYSYMBOL_STDIN = 409,                    /* STDIN  */
  YYSYMBOL_STDOUT = 410,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 411,                  /* STORAGE  */
  YYSYMBOL_STORED = 412,                   /* STORED  */
  YYSYMBOL_STRICT_P = 413,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 414,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 415,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 416,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 417,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 418,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 419,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 420,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 421,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 422,                    /* TABLE  */
  YYSYMBOL_TABLES = 423,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 424,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 425,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 426,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 427,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 428,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 429,                   /* TEXT_P  */
  YYSYMBOL_THEN = 430,                     /* THEN  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAIL = 434,                    /* TRAIL  */
  YYSYMBOL_TRAILING = 435,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 436,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 437,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 438,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 439,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 440,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 441,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 442,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 443,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 444,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 445,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 446,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 447,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 448,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 449,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 450,                    /* UNION  */
  YYSYMBOL_UNIQUE = 451,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 452,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 453,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 454,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 468,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 469,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 470,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 471,                /* VERSION_P  */
  YYSYMBOL_VERTEX = 472,                   /* VERTEX  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WALK = 477,                     /* WALK  */
  YYSYMBOL_WHEN = 478,                     /* WHEN  */
  YYSYMBOL_WHERE = 479,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 480,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 481,                   /* WINDOW  */
  YYSYMBOL_WITH = 482,                     /* WITH  */
  YYSYMBOL_WITHIN = 483,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 484,                  /* WITHOUT  */
  YYSYMBOL_WORK = 485,                     /* WORK  */
  YYSYMBOL_WRAPPER = 486,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 487,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 488,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 489,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 490,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 491,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 492,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 493,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 494,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 495,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 496,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 497,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 498,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 499,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 500,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 501,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 502,                    /* YES_P  */
  YYSYMBOL_ZONE = 503,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 504,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 505,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 506,                  /* WITH_LA  */
  YYSYMBOL_507_ = 507,                     /* '<'  */
  YYSYMBOL_508_ = 508,                     /* '>'  */
  YYSYMBOL_509_ = 509,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 510,                /* POSTFIXOP  */
  YYSYMBOL_511_ = 511,                     /* '+'  */
  YYSYMBOL_512_ = 512,                     /* '-'  */
  YYSYMBOL_513_ = 513,                     /* '*'  */
  YYSYMBOL_514_ = 514,                     /* '/'  */
  YYSYMBOL_515_ = 515,                     /* '%'  */
  YYSYMBOL_516_ = 516,                     /* '^'  */
  YYSYMBOL_UMINUS = 517,                   /* UMINUS  */
  YYSYMBOL_518_ = 518,                     /* '['  */
  YYSYMBOL_519_ = 519,                     /* ']'  */
  YYSYMBOL_520_ = 520,                     /* '('  */
  YYSYMBOL_521_ = 521,                     /* ')'  */
  YYSYMBOL_522_ = 522,                     /* '.'  */
  YYSYMBOL_523_ = 523,                     /* ';'  */
  YYSYMBOL_524_ = 524,                     /* ','  */
  YYSYMBOL_525_ = 525,                     /* '|'  */
  YYSYMBOL_526_ = 526,                     /* '?'  */
  YYSYMBOL_527_ = 527,                     /* '{'  */
  YYSYMBOL_528_ = 528,                     /* '}'  */
  YYSYMBOL_529_ = 529,                     /* '&'  */
  YYSYMBOL_530_ = 530,                     /* '!'  */
  YYSYMBOL_531_ = 531,                     /* ':'  */
  YYSYMBOL_532_ = 532,                     /* '#'  */
  YYSYMBOL_533_ = 533,                     /* '$'  */
  YYSYMBOL_YYACCEPT = 534,                 /* $accept  */
  YYSYMBOL_stmtblock = 535,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 536,                /* stmtmulti  */
  YYSYMBOL_stmt = 537,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 538,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 539,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 540,               /* SeqOptList  */
  YYSYMBOL_opt_with = 541,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 542,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 543,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 544,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 545,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 546,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 547, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 548,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 549, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 550, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 551,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 552,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 553, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 554,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 555,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 556,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 557,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 558,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 559,               /* DetachStmt  */
  YYSYMBOL_opt_database = 560,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 561,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 562,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 563,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 564,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 565,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 566,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 567,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 568, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 569,                /* opt_using  */
  YYSYMBOL_opt_as = 570,                   /* opt_as  */
  YYSYMBOL_opt_program = 571,              /* opt_program  */
  YYSYMBOL_copy_options = 572,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 573,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 574,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 575,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 576,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 577,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 578,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 579, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 580,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 581,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 582,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 583,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 584,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 585, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 586,       /* generic_option_arg  */
  YYSYMBOL_key_action = 587,               /* key_action  */
  YYSYMBOL_ColConstraint = 588,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 589,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 590,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 591,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 592,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 593,      /* generic_option_elem  */
  YYSYMBOL_key_update = 594,               /* key_update  */
  YYSYMBOL_key_actions = 595,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 596,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 597,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 598,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 599,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 600,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 601,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 602,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 603,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 604,                  /* OptWith  */
  YYSYMBOL_definition = 605,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 606,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 607,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 608,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 609,                /* columnDef  */
  YYSYMBOL_def_list = 610,                 /* def_list  */
  YYSYMBOL_index_name = 611,               /* index_name  */
  YYSYMBOL_TableElement = 612,             /* TableElement  */
  YYSYMBOL_def_elem = 613,                 /* def_elem  */
  YYSYMBOL_opt_definition = 614,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 615,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 616,               /* columnElem  */
  YYSYMBOL_opt_column_list = 617,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 618,              /* ColQualList  */
  YYSYMBOL_key_delete = 619,               /* key_delete  */
  YYSYMBOL_reloption_elem = 620,           /* reloption_elem  */
  YYSYMBOL_columnList = 621,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 622,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 623,                /* func_type  */
  YYSYMBOL_ConstraintElem = 624,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 625,         /* TableElementList  */
  YYSYMBOL_key_match = 626,                /* key_match  */
  YYSYMBOL_TableLikeClause = 627,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 628,                  /* OptTemp  */
  YYSYMBOL_generated_when = 629,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 630,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 631,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 632,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 633,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 634,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 635,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 636,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 637,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 638,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 639,         /* reserved_keyword  */
  YYSYMBOL_pgq_unreserved_keyword = 640,   /* pgq_unreserved_keyword  */
  YYSYMBOL_pgq_col_name_keyword = 641,     /* pgq_col_name_keyword  */
  YYSYMBOL_CreateDatabaseStmt = 642,       /* CreateDatabaseStmt  */
  YYSYMBOL_opt_extension_name = 643,       /* opt_extension_name  */
  YYSYMBOL_CreateFunctionStmt = 644,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 645,              /* macro_alias  */
  YYSYMBOL_param_list = 646,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 647,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 648,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 649,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 650,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 651,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 652,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 653,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 654,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 655,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 656,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 657,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 658,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 659,             /* using_clause  */
  YYSYMBOL_DropStmt = 660,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 661,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 662,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 663,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 664,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 665, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 666,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 667,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 668,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 669,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 670,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 671,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 672,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 673,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 674, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 675,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 676,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 677,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 678,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 679,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 680,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 681,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 682,                /* IndexStmt  */
  YYSYMBOL_access_method = 683,            /* access_method  */
  YYSYMBOL_access_method_clause = 684,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 685,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 686,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 687,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 688,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 689,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 690,              /* insert_rest  */
  YYSYMBOL_insert_target = 691,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 692,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 693,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 694,       /* insert_column_item  */
  YYSYMBOL_set_clause = 695,               /* set_clause  */
  YYSYMBOL_opt_or_action = 696,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 697,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 698,               /* index_elem  */
  YYSYMBOL_returning_clause = 699,         /* returning_clause  */
  YYSYMBOL_override_kind = 700,            /* override_kind  */
  YYSYMBOL_set_target_list = 701,          /* set_target_list  */
  YYSYMBOL_opt_collate = 702,              /* opt_collate  */
  YYSYMBOL_opt_class = 703,                /* opt_class  */
  YYSYMBOL_insert_column_list = 704,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 705,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 706, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 707,             /* index_params  */
  YYSYMBOL_set_target = 708,               /* set_target  */
  YYSYMBOL_LoadStmt = 709,                 /* LoadStmt  */
  YYSYMBOL_file_name = 710,                /* file_name  */
  YYSYMBOL_PGQ_IDENT = 711,                /* PGQ_IDENT  */
  YYSYMBOL_DropPropertyGraphStmt = 712,    /* DropPropertyGraphStmt  */
  YYSYMBOL_VertexOrNode = 713,             /* VertexOrNode  */
  YYSYMBOL_EdgeOrRelationship = 714,       /* EdgeOrRelationship  */
  YYSYMBOL_CreatePropertyGraphStmt = 715,  /* CreatePropertyGraphStmt  */
  YYSYMBOL_VertexTableDefinitionList = 716, /* VertexTableDefinitionList  */
  YYSYMBOL_KeySpecification = 717,         /* KeySpecification  */
  YYSYMBOL_KeyDefinition = 718,            /* KeyDefinition  */
  YYSYMBOL_KeyReference = 719,             /* KeyReference  */
  YYSYMBOL_LabelList = 720,                /* LabelList  */
  YYSYMBOL_Discriminator = 721,            /* Discriminator  */
  YYSYMBOL_VertexTableDefinition = 722,    /* VertexTableDefinition  */
  YYSYMBOL_EdgeTableDefinitionList = 723,  /* EdgeTableDefinitionList  */
  YYSYMBOL_EdgeTableDefinition = 724,      /* EdgeTableDefinition  */
  YYSYMBOL_AreOptional = 725,              /* AreOptional  */
  YYSYMBOL_IdentOptionalAs = 726,          /* IdentOptionalAs  */
  YYSYMBOL_QualifiednameOptionalAs = 727,  /* QualifiednameOptionalAs  */
  YYSYMBOL_PropertiesList = 728,           /* PropertiesList  */
  YYSYMBOL_ExceptOptional = 729,           /* ExceptOptional  */
  YYSYMBOL_PropertiesSpec = 730,           /* PropertiesSpec  */
  YYSYMBOL_PropertiesClause = 731,         /* PropertiesClause  */
  YYSYMBOL_GraphTableWhereOptional = 732,  /* GraphTableWhereOptional  */
  YYSYMBOL_GraphTableStmt = 733,           /* GraphTableStmt  */
  YYSYMBOL_ColumnSpec = 734,               /* ColumnSpec  */
  YYSYMBOL_ColumnList = 735,               /* ColumnList  */
  YYSYMBOL_KeepOptional = 736,             /* KeepOptional  */
  YYSYMBOL_PathOrPathsOptional = 737,      /* PathOrPathsOptional  */
  YYSYMBOL_GroupOrGroupsOptional = 738,    /* GroupOrGroupsOptional  */
  YYSYMBOL_PathVariableOptional = 739,     /* PathVariableOptional  */
  YYSYMBOL_PathModeOptional = 740,         /* PathModeOptional  */
  YYSYMBOL_TopKOptional = 741,             /* TopKOptional  */
  YYSYMBOL_PathPrefix = 742,               /* PathPrefix  */
  YYSYMBOL_PathPatternList = 743,          /* PathPatternList  */
  YYSYMBOL_PathPattern = 744,              /* PathPattern  */
  YYSYMBOL_PatternUnion = 745,             /* PatternUnion  */
  YYSYMBOL_KleeneQuantifierOptional = 746, /* KleeneQuantifierOptional  */
  YYSYMBOL_KleeneOptional = 747,           /* KleeneOptional  */
  YYSYMBOL_CostNum = 748,                  /* CostNum  */
  YYSYMBOL_CostDefault = 749,              /* CostDefault  */
  YYSYMBOL_CostOptional = 750,             /* CostOptional  */
  YYSYMBOL_SubPath = 751,                  /* SubPath  */
  YYSYMBOL_EnclosedSubPath = 752,          /* EnclosedSubPath  */
  YYSYMBOL_PathElement = 753,              /* PathElement  */
  YYSYMBOL_PathSequence = 754,             /* PathSequence  */
  YYSYMBOL_PathConcatenation = 755,        /* PathConcatenation  */
  YYSYMBOL_OrLabelExpression = 756,        /* OrLabelExpression  */
  YYSYMBOL_AndLabelExpression = 757,       /* AndLabelExpression  */
  YYSYMBOL_ComposedLabelExpression = 758,  /* ComposedLabelExpression  */
  YYSYMBOL_LabelExpression = 759,          /* LabelExpression  */
  YYSYMBOL_LabelExpressionOptional = 760,  /* LabelExpressionOptional  */
  YYSYMBOL_IsOrColon = 761,                /* IsOrColon  */
  YYSYMBOL_ArrowRight = 762,               /* ArrowRight  */
  YYSYMBOL_ArrowLeftBracket = 763,         /* ArrowLeftBracket  */
  YYSYMBOL_AbbreviatedEdge = 764,          /* AbbreviatedEdge  */
  YYSYMBOL_VariableOptional = 765,         /* VariableOptional  */
  YYSYMBOL_FullElementSpec = 766,          /* FullElementSpec  */
  YYSYMBOL_EdgePattern = 767,              /* EdgePattern  */
  YYSYMBOL_VertexPattern = 768,            /* VertexPattern  */
  YYSYMBOL_pgq_expr = 769,                 /* pgq_expr  */
  YYSYMBOL_PragmaStmt = 770,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 771,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 772,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 773,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 774,               /* RenameStmt  */
  YYSYMBOL_opt_column = 775,               /* opt_column  */
  YYSYMBOL_SelectStmt = 776,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 777,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 778,         /* select_no_parens  */
  YYSYMBOL_select_clause = 779,            /* select_clause  */
  YYSYMBOL_opt_select = 780,               /* opt_select  */
  YYSYMBOL_simple_select = 781,            /* simple_select  */
  YYSYMBOL_value_or_values = 782,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 783,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 784,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 785,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 786, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 787,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 788,              /* with_clause  */
  YYSYMBOL_cte_list = 789,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 790,        /* common_table_expr  */
  YYSYMBOL_into_clause = 791,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 792,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 793,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 794,          /* all_or_distinct  */
  YYSYMBOL_by_name = 795,                  /* by_name  */
  YYSYMBOL_distinct_clause = 796,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 797,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 798,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 799,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 800,              /* sort_clause  */
  YYSYMBOL_sortby_list = 801,              /* sortby_list  */
  YYSYMBOL_sortby = 802,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 803,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 804,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 805,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 806,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 807,             /* limit_clause  */
  YYSYMBOL_offset_clause = 808,            /* offset_clause  */
  YYSYMBOL_sample_count = 809,             /* sample_count  */
  YYSYMBOL_sample_clause = 810,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 811,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 812,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 813,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 814,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 815,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 816,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 817,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 818, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 819,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 820,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 821,            /* first_or_next  */
  YYSYMBOL_group_clause = 822,             /* group_clause  */
  YYSYMBOL_group_by_list = 823,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 824,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 825,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 826,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 827,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 828,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 829,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 830,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 831,            /* having_clause  */
  YYSYMBOL_qualify_clause = 832,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 833,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 834,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 835,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 836,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 837,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 838,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 839,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 840,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 841,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 842,              /* from_clause  */
  YYSYMBOL_from_list = 843,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 844,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 845,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 846,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 847,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 848,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 849,             /* pivot_header  */
  YYSYMBOL_pivot_value = 850,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 851,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 852,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 853,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 854,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 855,             /* joined_table  */
  YYSYMBOL_alias_clause = 856,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 857,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 858,        /* func_alias_clause  */
  YYSYMBOL_join_type = 859,                /* join_type  */
  YYSYMBOL_join_outer = 860,               /* join_outer  */
  YYSYMBOL_join_qual = 861,                /* join_qual  */
  YYSYMBOL_relation_expr = 862,            /* relation_expr  */
  YYSYMBOL_func_table = 863,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 864,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 865,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 866,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 867,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 868,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 869,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 870,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 871,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 872,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 873,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 874,             /* opt_Typename  */
  YYSYMBOL_Typename = 875,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 876,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 877,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 878,            /* ConstTypename  */
  YYSYMBOL_GenericType = 879,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 880,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 881,                  /* Numeric  */
  YYSYMBOL_opt_float = 882,                /* opt_float  */
  YYSYMBOL_Bit = 883,                      /* Bit  */
  YYSYMBOL_ConstBit = 884,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 885,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 886,         /* BitWithoutLength  */
  YYSYMBOL_Character = 887,                /* Character  */
  YYSYMBOL_ConstCharacter = 888,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 889,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 890,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 891,                /* character  */
  YYSYMBOL_opt_varying = 892,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 893,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 894,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 895,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 896,             /* year_keyword  */
  YYSYMBOL_month_keyword = 897,            /* month_keyword  */
  YYSYMBOL_day_keyword = 898,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 899,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 900,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 901,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 902,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 903,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 904,             /* opt_interval  */
  YYSYMBOL_a_expr = 905,                   /* a_expr  */
  YYSYMBOL_b_expr = 906,                   /* b_expr  */
  YYSYMBOL_c_expr = 907,                   /* c_expr  */
  YYSYMBOL_d_expr = 908,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 909,         /* indirection_expr  */
  YYSYMBOL_func_application = 910,         /* func_application  */
  YYSYMBOL_func_expr = 911,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 912,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 913, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 914,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 915,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 916,            /* filter_clause  */
  YYSYMBOL_export_clause = 917,            /* export_clause  */
  YYSYMBOL_window_clause = 918,            /* window_clause  */
  YYSYMBOL_window_definition_list = 919,   /* window_definition_list  */
  YYSYMBOL_window_definition = 920,        /* window_definition  */
  YYSYMBOL_over_clause = 921,              /* over_clause  */
  YYSYMBOL_window_specification = 922,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 923, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 924,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 925,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 926,             /* frame_extent  */
  YYSYMBOL_frame_bound = 927,              /* frame_bound  */
  YYSYMBOL_qualified_row = 928,            /* qualified_row  */
  YYSYMBOL_row = 929,                      /* row  */
  YYSYMBOL_dict_arg = 930,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 931,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 932, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 933,                 /* sub_type  */
  YYSYMBOL_all_Op = 934,                   /* all_Op  */
  YYSYMBOL_MathOp = 935,                   /* MathOp  */
  YYSYMBOL_qual_Op = 936,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 937,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 938,              /* subquery_Op  */
  YYSYMBOL_any_operator = 939,             /* any_operator  */
  YYSYMBOL_c_expr_list = 940,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 941,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 942,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 943,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 944,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 945,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 946,            /* func_arg_expr  */
  YYSYMBOL_type_list = 947,                /* type_list  */
  YYSYMBOL_extract_list = 948,             /* extract_list  */
  YYSYMBOL_extract_arg = 949,              /* extract_arg  */
  YYSYMBOL_overlay_list = 950,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 951,          /* overlay_placing  */
  YYSYMBOL_position_list = 952,            /* position_list  */
  YYSYMBOL_substr_list = 953,              /* substr_list  */
  YYSYMBOL_substr_from = 954,              /* substr_from  */
  YYSYMBOL_substr_for = 955,               /* substr_for  */
  YYSYMBOL_trim_list = 956,                /* trim_list  */
  YYSYMBOL_in_expr = 957,                  /* in_expr  */
  YYSYMBOL_case_expr = 958,                /* case_expr  */
  YYSYMBOL_when_clause_list = 959,         /* when_clause_list  */
  YYSYMBOL_when_clause = 960,              /* when_clause  */
  YYSYMBOL_case_default = 961,             /* case_default  */
  YYSYMBOL_case_arg = 962,                 /* case_arg  */
  YYSYMBOL_columnref = 963,                /* columnref  */
  YYSYMBOL_indirection_el = 964,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 965,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 966,              /* indirection  */
  YYSYMBOL_opt_indirection = 967,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 968,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 969,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 970, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 971,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 972, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 973,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 974,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 975,                /* target_el  */
  YYSYMBOL_except_list = 976,              /* except_list  */
  YYSYMBOL_opt_except_list = 977,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 978,          /* replace_list_el  */
  YYSYMBOL_replace_list = 979,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 980,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 981,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 982,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 983,           /* qualified_name  */
  YYSYMBOL_name_list = 984,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 985,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 986, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 987,                     /* name  */
  YYSYMBOL_attr_name = 988,                /* attr_name  */
  YYSYMBOL_func_name = 989,                /* func_name  */
  YYSYMBOL_AexprConst = 990,               /* AexprConst  */
  YYSYMBOL_Iconst = 991,                   /* Iconst  */
  YYSYMBOL_Sconst = 992,                   /* Sconst  */
  YYSYMBOL_ColId = 993,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 994,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 995,       /* type_function_name  */
  YYSYMBOL_function_name_token = 996,      /* function_name_token  */
  YYSYMBOL_type_name_token = 997,          /* type_name_token  */
  YYSYMBOL_any_name = 998,                 /* any_name  */
  YYSYMBOL_attrs = 999,                    /* attrs  */
  YYSYMBOL_opt_name_list = 1000,           /* opt_name_list  */
  YYSYMBOL_param_name = 1001,              /* param_name  */
  YYSYMBOL_ColLabel = 1002,                /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 1003,        /* ColLabelOrString  */
  YYSYMBOL_named_param = 1004,             /* named_param  */
  YYSYMBOL_TransactionStmt = 1005,         /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 1006,         /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 1007,              /* UpdateStmt  */
  YYSYMBOL_UseStmt = 1008,                 /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1009,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1010,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1011,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1012,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1013,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1014,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1015,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1016,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1017,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1018,                /* set_rest  */
  YYSYMBOL_generic_set = 1019,             /* generic_set  */
  YYSYMBOL_var_value = 1020,               /* var_value  */
  YYSYMBOL_zone_value = 1021,              /* zone_value  */
  YYSYMBOL_var_list = 1022,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1023,        /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 1024,        /* show_or_describe  */
  YYSYMBOL_var_name = 1025,                /* var_name  */
  YYSYMBOL_table_id = 1026,                /* table_id  */
  YYSYMBOL_ViewStmt = 1027,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1028         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  768
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   73006

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  534
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  495
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2274
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3801

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   763


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   532,   533,   515,   529,     2,
     520,   521,   513,   511,   524,   512,   522,   514,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   531,   523,
     507,   509,   508,   526,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   518,     2,   519,   516,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   527,   525,   528,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   510,   517
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   544,   544,   560,   572,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   623,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     184,   192,   200,   209,   218,   227,   236,   253,   262,   271,
     280,   290,   303,   318,   327,   335,   350,   358,   368,   378,
     385,   392,   400,   407,   418,   419,   424,   428,   433,   438,
     446,   447,   452,   456,   457,   458,     7,    13,    19,    25,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    72,    81,    90,    97,    98,   103,   115,
     120,   145,   150,   155,   161,   171,   181,   187,   198,   209,
     224,   225,   231,   232,   237,   238,   244,   245,   249,   250,
     255,   257,   263,   264,   268,   269,   272,   273,   278,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      15,    22,    28,    34,    41,    48,    59,     9,    19,    29,
      42,    43,     7,    14,    31,    51,    52,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,    40,    41,    42,
      50,    64,    66,    70,    72,    76,    89,    92,    96,   100,
     104,   108,   109,   113,   122,   132,   146,   149,   153,   176,
     177,   182,   184,   188,   190,   194,   196,   201,   204,   208,
     214,   218,   220,   223,   232,   234,   238,   264,   268,   270,
     274,   276,   280,   280,   280,   284,   286,   288,   292,   294,
     298,   300,   302,   304,   306,   310,   312,   316,   328,   340,
     352,   364,   377,   391,   393,   398,   423,   425,   429,   431,
     436,   445,   454,   463,   473,   483,   485,   489,   491,   495,
     506,   515,   527,   536,   538,   542,   565,   567,   571,   573,
     584,   586,   597,   599,   610,   612,   621,   632,   640,   649,
     653,   655,   659,   661,   667,   669,   671,   675,   677,   681,
     687,   695,   697,   701,   712,   728,   755,   788,   789,   791,
     799,   814,   816,   818,   820,   822,   824,   826,   828,   830,
     832,   834,   836,   838,   840,   842,   845,   847,   849,   851,
     853,   855,   860,   865,   872,   877,   884,   889,   896,   901,
     909,   917,   925,   933,   951,   959,   967,   975,   983,   991,
     999,  1003,  1019,  1027,  1035,  1043,  1051,  1059,  1067,  1071,
    1075,  1079,  1083,  1091,  1099,  1107,  1115,  1135,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    69,    79,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   115,   116,   117,   118,   119,   120,   125,
     126,   131,   132,   133,   138,   139,   140,   143,   144,     8,
      20,    33,    46,    58,    70,    86,    87,    91,    95,     7,
       1,    30,    53,    54,    59,    63,    68,    72,    80,    81,
      85,    86,    91,    92,    96,    97,   102,   103,   104,   105,
     106,   111,   119,   123,   128,   129,   134,   138,   143,   147,
     151,   155,   159,   163,   167,   171,   175,   179,   183,   187,
     191,   195,   199,   203,   211,   217,   218,   219,   224,   228,
      47,    48,    52,    53,    68,    69,    76,    84,    92,   100,
     108,   116,   127,   128,   155,   160,   168,   184,   201,   218,
     235,   236,   255,   259,   263,   267,   271,   280,   290,   299,
     308,   318,   328,   339,   353,   370,   370,   374,   374,   378,
     378,   382,   388,   392,   393,   397,   398,   412,   419,   426,
     436,   437,   440,   452,   463,   471,   476,   481,   486,   491,
     499,   507,   512,   517,   524,   525,   529,   530,   531,   535,
     542,   543,   547,   548,   552,   553,   554,   558,   559,   563,
     564,   580,   581,   584,   593,   604,   605,   606,   609,   610,
     611,   615,   616,   617,   618,   622,   623,   627,   629,   645,
     647,   652,   655,   663,   667,   671,   675,   679,   683,   690,
     695,   702,   703,   707,   712,   716,   720,   728,   735,   736,
     741,   742,   746,   747,   752,   754,   756,   761,   781,   782,
     784,   789,   790,   794,   795,   798,   799,   824,   825,   830,
     834,   835,   839,   840,   844,   845,   846,   847,   848,   852,
     865,   872,   879,   886,   887,   891,   892,   896,   897,   901,
     902,   906,   907,   911,   912,   916,   927,   928,   929,   930,
     934,   935,   940,   941,   942,   951,   957,   966,   967,   980,
     981,   985,   986,   990,   991,   997,  1003,  1011,  1020,  1028,
    1037,  1046,  1050,  1055,  1059,  1069,  1082,  1083,  1086,  1087,
    1088,  1091,  1099,  1109,  1110,  1113,  1121,  1130,  1134,  1141,
    1142,  1146,  1155,  1159,  1184,  1188,  1201,  1215,  1230,  1242,
    1255,  1269,  1283,  1296,  1311,  1330,  1336,  1341,  1347,  1354,
    1355,  1363,  1367,  1371,  1377,  1384,  1389,  1390,  1391,  1392,
    1393,  1394,  1398,  1399,  1411,  1412,  1417,  1424,  1431,  1438,
    1470,  1481,  1494,  1499,  1500,  1503,  1504,  1507,  1508,  1513,
    1514,  1519,  1523,  1529,  1550,  1558,  1571,  1574,  1578,  1578,
    1581,  1582,  1584,  1589,  1596,  1601,  1607,  1612,  1618,  1624,
    1630,  1639,  1641,  1644,  1648,  1649,  1650,  1651,  1652,  1653,
    1658,  1678,  1679,  1680,  1681,  1692,  1706,  1707,  1713,  1718,
    1723,  1728,  1733,  1738,  1743,  1748,  1754,  1760,  1766,  1773,
    1795,  1804,  1808,  1816,  1820,  1828,  1840,  1861,  1865,  1871,
    1875,  1888,  1896,  1906,  1908,  1910,  1912,  1914,  1916,  1921,
    1922,  1929,  1938,  1946,  1955,  1966,  1974,  1975,  1976,  1980,
    1980,  1983,  1983,  1986,  1986,  1989,  1989,  1992,  1992,  1995,
    1995,  1998,  1998,  2001,  2001,  2004,  2006,  2008,  2010,  2012,
    2014,  2016,  2018,  2020,  2025,  2030,  2036,  2043,  2048,  2054,
    2060,  2091,  2093,  2095,  2103,  2118,  2120,  2122,  2124,  2126,
    2128,  2130,  2132,  2134,  2136,  2138,  2140,  2142,  2144,  2146,
    2148,  2151,  2153,  2155,  2158,  2160,  2162,  2164,  2166,  2171,
    2176,  2183,  2188,  2195,  2200,  2207,  2212,  2220,  2228,  2236,
    2244,  2262,  2270,  2278,  2286,  2294,  2302,  2310,  2314,  2330,
    2338,  2346,  2354,  2362,  2370,  2378,  2382,  2386,  2390,  2394,
    2402,  2410,  2418,  2426,  2446,  2468,  2479,  2486,  2500,  2508,
    2516,  2536,  2538,  2540,  2542,  2544,  2546,  2548,  2550,  2552,
    2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,  2570,  2572,
    2574,  2576,  2578,  2582,  2586,  2590,  2604,  2605,  2609,  2623,
    2624,  2625,  2632,  2636,  2640,  2643,  2654,  2659,  2661,  2672,
    2696,  2707,  2718,  2722,  2729,  2733,  2738,  2744,  2748,  2755,
    2763,  2771,  2782,  2802,  2838,  2849,  2850,  2857,  2863,  2865,
    2867,  2871,  2880,  2885,  2892,  2907,  2914,  2918,  2922,  2926,
    2930,  2940,  2949,  2971,  2972,  2976,  2977,  2978,  2982,  2983,
    2990,  2991,  2995,  2996,  3001,  3009,  3011,  3025,  3028,  3055,
    3056,  3059,  3060,  3071,  3077,  3084,  3093,  3110,  3155,  3163,
    3171,  3179,  3187,  3208,  3209,  3212,  3213,  3217,  3227,  3228,
    3232,  3233,  3237,  3238,  3239,  3242,  3243,  3246,  3247,  3248,
    3249,  3250,  3251,  3252,  3253,  3254,  3255,  3256,  3257,  3258,
    3259,  3262,  3264,  3269,  3271,  3276,  3278,  3280,  3282,  3284,
    3286,  3288,  3290,  3304,  3306,  3311,  3315,  3322,  3327,  3333,
    3337,  3344,  3349,  3356,  3361,  3369,  3373,  3379,  3383,  3392,
    3403,  3404,  3408,  3412,  3419,  3420,  3421,  3422,  3423,  3424,
    3425,  3426,  3427,  3428,  3438,  3442,  3449,  3456,  3457,  3473,
    3477,  3482,  3486,  3501,  3506,  3510,  3513,  3516,  3517,  3518,
    3521,  3528,  3538,  3552,  3553,  3557,  3568,  3569,  3572,  3573,
    3576,  3580,  3587,  3591,  3599,  3610,  3611,  3615,  3616,  3620,
    3621,  3625,  3626,  3627,  3631,  3640,  3648,  3664,  3665,  3670,
    3671,  3681,  3682,  3686,  3687,  3691,  3692,  3695,  3711,  3719,
    3729,  3730,  3733,  3734,  3737,  3741,  3742,  3746,  3747,  3750,
    3751,  3752,  3762,  3763,  3774,  3778,  3806,  3808,  3814,  3815,
    3819,  3820,  3823,  3825,  3835,  3838,  3849,  3853,  3857,  3869,
    3873,  3882,  3889,  3927,  3931,  3935,  3939,  3943,  3947,  3951,
    3957,  3958,  3974,  3975,  3976,  3977,  3980,  3981,  3987,  3988,
    3989,  3992,  3993,  3994,  3997,  3998,  3999,  4002,  4003,  4006,
    4008,  4013,  4014,  4017,  4025,  4026,  4027,  4028,  4031,  4032,
    4035,     7,    18,    19,    23,    24,    25,    26,     7,    26,
      50,    73,    80,    85,    86,    87,    88,     8,    33,    62,
      66,    67,    72,    73,    78,    79,    83,    84,    89,    90,
       7,    16,    25,    34,    43,    52,     5,    12,    22,    23,
       7,    19,    33,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    90,    91,    92,    97,    98,   103,   107,   115,
     116,   121,   122,   123,   129,   134,   142,   143,    10,    16,
      22,    28,    38,    39,    47,    58,    70,    78,    86,    93,
     103,   105,   111,   115,   119,   134,   141,   142,   143,   147,
     148,     7,    14,    20,    28,    29,     8,    22,    36,    48,
      56,    70,    71,    72,    73,    74,    87,    88,    93,    94,
      98,    99,     7,    18,    31,    35,    42,    53,    54,    60,
      61,     9,    19,     7,    18,    25,    34,    35,    39,    40,
       2,     7,    15,    26,    27,    34,     3,    10,    17,    24,
      31,    38,    45,    52,    61,    61,    63,    64,    68,    69,
       6,     8,    21,    34,    47,    65,    87,    88,    89,    90,
      11,    24,    37,    54,    55,    56,    61,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
      81,    81,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ACYCLIC", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY",
  "ARE", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DESTINATION", "DETACH",
  "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P",
  "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "EDGE", "ELEMENT_ID", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GRAPH", "GRAPH_TABLE", "GROUP_P", "GROUPING", "GROUPING_ID",
  "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE",
  "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT",
  "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
  "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
  "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
  "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEEP", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NODE",
  "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
  "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
  "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
  "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PATH", "PATHS", "PERCENT", "PIVOT",
  "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION",
  "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
  "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
  "PROCEDURE", "PROGRAM", "PROPERTIES", "PROPERTY", "PUBLICATION",
  "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK",
  "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIONSHIP", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE",
  "REPLACE", "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT",
  "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
  "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
  "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
  "SET", "SETOF", "SETS", "SHARE", "SHORTEST", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIME", "TIMESTAMP", "TO", "TRAIL", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VERTEX",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WALK", "WHEN", "WHERE",
  "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
  "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
  "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
  "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
  "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'|'", "'?'", "'{'", "'}'",
  "'&'", "'!'", "':'", "'#'", "'$'", "$accept", "stmtblock", "stmtmulti",
  "stmt", "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "AlterTableStmt", "alter_identity_column_option_list",
  "alter_column_default", "alter_identity_column_option",
  "alter_generic_option_list", "alter_table_cmd", "alter_using",
  "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
  "opt_set_data", "AnalyzeStmt", "AttachStmt", "DetachStmt",
  "opt_database", "opt_database_alias", "CallStmt", "CheckPointStmt",
  "opt_col_id", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "pgq_unreserved_keyword", "pgq_col_name_keyword", "CreateDatabaseStmt",
  "opt_extension_name", "CreateFunctionStmt", "macro_alias", "param_list",
  "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "CreateSeqStmt",
  "OptSeqOptList", "CreateTypeStmt", "opt_enum_val_list", "enum_val_list",
  "DeallocateStmt", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "ExecuteStmt", "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_or_action", "opt_on_conflict",
  "index_elem", "returning_clause", "override_kind", "set_target_list",
  "opt_collate", "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PGQ_IDENT", "DropPropertyGraphStmt", "VertexOrNode",
  "EdgeOrRelationship", "CreatePropertyGraphStmt",
  "VertexTableDefinitionList", "KeySpecification", "KeyDefinition",
  "KeyReference", "LabelList", "Discriminator", "VertexTableDefinition",
  "EdgeTableDefinitionList", "EdgeTableDefinition", "AreOptional",
  "IdentOptionalAs", "QualifiednameOptionalAs", "PropertiesList",
  "ExceptOptional", "PropertiesSpec", "PropertiesClause",
  "GraphTableWhereOptional", "GraphTableStmt", "ColumnSpec", "ColumnList",
  "KeepOptional", "PathOrPathsOptional", "GroupOrGroupsOptional",
  "PathVariableOptional", "PathModeOptional", "TopKOptional", "PathPrefix",
  "PathPatternList", "PathPattern", "PatternUnion",
  "KleeneQuantifierOptional", "KleeneOptional", "CostNum", "CostDefault",
  "CostOptional", "SubPath", "EnclosedSubPath", "PathElement",
  "PathSequence", "PathConcatenation", "OrLabelExpression",
  "AndLabelExpression", "ComposedLabelExpression", "LabelExpression",
  "LabelExpressionOptional", "IsOrColon", "ArrowRight", "ArrowLeftBracket",
  "AbbreviatedEdge", "VariableOptional", "FullElementSpec", "EdgePattern",
  "VertexPattern", "pgq_expr", "PragmaStmt", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "RenameStmt", "opt_column",
  "SelectStmt", "select_with_parens", "select_no_parens", "select_clause",
  "opt_select", "simple_select", "value_or_values", "pivot_keyword",
  "unpivot_keyword", "pivot_column_entry", "pivot_column_list_internal",
  "pivot_column_list", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "indirection_el",
  "opt_slice_bound", "indirection", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "table_id",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3172)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2128)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7031,   345,  1324, -3172, -3172,   293,   345, 49042, 64573,   345,
     175,  1701, 52048, -3172,   354,  8425,   345, 55054, 72469,   387,
     284, 30653,   413, 55555, 55555, -3172, -3172, -3172, 64573, 55054,
   56056,   345,   347, 65074, -3172,   345, 33662, 52549,   -51, -3172,
   55054,    75,   177, 56557, 55054, 38673,   798,   291, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
     384, -3172, -3172, -3172, -3172,   274, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,   180, -3172,   320,   188, 30653, 30653,
      69,   358, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   33161, -3172, -3172, -3172, -3172, 57058, 55054, 57559, 53050, 58060,
   -3172,  1020, -3172,   155, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172,   164, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
     184, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172,   208, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172,   215, -3172, -3172, -3172, -3172,   569,   833, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,  3015, 55054,
   -3172, 58561,   524,   823,   740,   945, 59062, -3172, -3172, 55054,
   -3172, -3172,   788,  1044,   964, -3172, -3172, -3172, 53551, -3172,
   -3172, -3172,   987,  1186,   940, -3172, -3172, -3172,   764, -3172,
     170, -3172, -3172,   794,   766, -3172,  1087, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,   905, -3172, 69568, -3172, 65575, 59563,
   60064, -3172,   777,  1499,  2922, 72486, 32156, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,   384, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, 55555,
   64573, 55555,   786,   793,  1153,   816,   846, 31154,   853, 34164,
     860,   877,  1171,   892,   897,   918,   995,   177, 30151, 60565,
   60565,   -13,  2898, -3172, 60565, 61066, -3172,   951, -3172,   916,
     833, -3172,  1020, -3172, -3172, -3172, -3172,   -88,  1000, -3172,
     981,  1264, -3172, -3172, -3172,  1072, -3172, -3172,  1247, 20176,
   20176, 66076, 66076,  1020, 66076,  1113, -3172, -3172,    68, -3172,
    3015, -3172,    69, -3172,  1122, -3172,   833, -3172, 52549, -3172,
   -3172,   264,  1481, 20176, 55054,  1110, -3172,  1154,  1110, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
     177, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172,  1438,  1177,  1194, -3172,  7031,
   -3172, 55054,  1523,  1433, 52549,   359,   359,  1702,   359,   862,
    1109,  3960,  5482, -3172,   890, -3172,  1275, -3172,  1302,  1594,
   -3172,  1122,  1672,  1217,  1475,  1687,  7811,  1691,  1532,  1696,
    1545,  1813, 11149, 20176, 47539, -3172,   833,  1336,  1340,  1595,
    1705, -3172, -3172, -3172, -3172,  1174, 55054,  1597, -3172,  1842,
   -3172, -3172,  1413, 61567, 62068, 62569, 63070, 55054,  1802, -3172,
   -3172,  1740, -3172, -3172, -3172,  1411, -3172, -3172, -3172, 55054,
     379, -3172, -3172, -3172, -3172, -3172, -3172,  1435, -3172,  1435,
    1435, -3172, -3172, -3172, -3172,  1416,  1416,  1606,  1419, -3172,
   -3172, -3172,  1788, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172,  1432,   525, -3172,  1435, -3172,  1416, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, 72013, -3172, -3172, -3172,
   -3172,   627,   640, -3172,  1444, -3172, -3172, -3172, -3172,   244,
    1451, -3172,  1933, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172,  1458, -3172,  4404,  1416,  1829,   250,  1462, -3172,  1836,
     252, -3172,  1838,  1704, 20176, -3172,  1635, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172,   177, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172,   768, -3172, -3172, 44400, 72486,  1487,  1576,
   -3172, -3172, 20176, 20176,  1491,  1111, 70054, -3172, 60565, 61066,
   20176, 55054, -3172, 20176, 24424,  1492, 20176, 20176, 11680, 20176,
   29149, 60565,  2898,  1494, 55054, -3172,  1593,  1498,  1593,   347,
   30653,  1797, -3172,   755,  1795,  1722, -3172, 30653,  1722,   870,
    1504,  1798,  1722, -3172,   249,  1801,  1593, 34665, -3172,  1593,
    1507,  1730, -3172, -3172,   458, -3172, 44400, 14335, 70555,  1990,
   -3172,  1796, 64573,  1517, -3172, -3172, -3172, -3172, -3172, -3172,
     597,  2035,   174,  2036, 20176,   174,   174,  1524,   219,   219,
   -3172,  1525, -3172,   220,  1526,  1528,  2038,  2045,   209,   525,
     174, 20176, -3172,   219,  1531,  2048,  1535,  2051,   160,   199,
   -3172,   221, 20176, 20176, 20176,  1908, 20176, 10618, -3172, 55054,
    2049,  2056,   833,  1542,  1020, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172,   210,  8509, -3172, -3172, -3172,  1580, -3172,
   -3172, -3172, -3172,  1761, 20176, -3172, -3172,  1541,  1797, -3172,
     222, -3172, -3172, -3172,   871,  1797, -3172, -3172, -3172, -3172,
   -3172,   240,  1963, 43398, 43899, 64573,   833, -3172, 66577, -3172,
   -3172, -3172, -3172, -3172, -3172,   817, -3172,   384, 46013,  1544,
    1548,  1110, 55054, 55054,  2029, 70054, -3172, -3172, -3172,  1154,
   52549,   272,  1850,  1690, -3172, -3172,    69,    69, 15397,  1447,
     727,   805, 15928, 20707,  1916,  1799,   256,   705,  1919, -3172,
    1804,  2023, 24424, 20176, 20176,   862,  1109, 20176, -3172,  1848,
   55054, 50545,   340,   957,  1572,  1660,  1574,   331,  2006, -3172,
    1573, -3172,  1667, 55054, 72013,   247, -3172,  2040,   247,   247,
     225,  2043,  1673,   166,  1840,   684,   466,  2617, -3172,  1573,
   52549,   202,   737,  1573, 55054,  1675,   923,  1573, 64573,  1487,
     179, 14335, -3172,  1454,  1482,  1493,   828,   241,  1534,  1569,
   14335,  1575,  1607,   182,  1651,  1723,  1757,  1768,  1800,  1805,
    1834,  1849,   196,  1852,  1857,  1868,  1876,  1895,  1898, -3172,
    1903,   198,  1910,   245, 14335,  1917, -3172,   203, -3172, 46013,
       6, -3172, -3172,  1935, 41273,  1578, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172,  1677, 64573,  1623,
    1958,  1020, 55054, 55054,  1055,    46,  1962,  2017, 71041, 55054,
    1841,  2617,  1843,  2077,  1601,  1845,  1340,  1847,  1611, -3172,
   -3172, 67078,  2122, -3172,   231, -3172, -3172, -3172, -3172, -3172,
    1612, -3172, -3172, 20176, -3172, -3172, -3172,  2125, -3172, 70555,
   70555,  1435,  1435, -3172, -3172,  2094,  1708,  1712,  2125, -3172,
    2125, -3172, 64573, -3172, -3172, 70555, -3172, 64573,  1618,  1626,
    2125, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172,  2125,  1714, -3172,
    1716,  1717,  1718, -3172, -3172, -3172, -3172, -3172, 64573, 64573,
   -3172, 47539,  1631, 55054, 55054, -3172, 55054, 64573,  1633,   909,
   72486, 50044, -3172, -3172, -3172, -3172,  1097,  1222, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, 47539, -3172,  3411,
    1020, 45021,  1636, 20176, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172,  1637,  1989, -3172, -3172, -3172, -3172,  7989,
    1641, 45071,  1644, 24424, 24424,   818, -3172, -3172, 24424,  1646,
     833, 48541, 44939,  1645,  1647, 45420, 16459, 20176, 16459, 16459,
   45461, -3172,  1649, 45551, 60565,  1654, 54052, -3172, -3172, 55054,
   -3172, 20176, 20176,  2898, 54553,  1692, -3172, 30653, -3172,  1948,
   30653, -3172, -3172,  4849, -3172, 30653,  1949, 20176, 30653, -3172,
    1893,  1897,  1659, 30653, -3172, 55054,  1662, -3172, 55054, -3172,
   -3172, -3172, -3172,  1661,   858, -3172,   867,  2516, -3172, -3172,
   20176, 20176, -3172, 46013,  1706, 20176, -3172,  4066, 39681, 16990,
    4066,  2172,  2172, 37170, -3172,  1830, 45593, -3172,  1668,   843,
    9057,  1665, -3172,  1666,  1663,  1669, -3172, -3172, -3172,   833,
   20176, -3172, 20176,  2004,  2004, -3172,   235, 70555, 20176, 20176,
   20176, 20176, 20176, 20176, 20176, 20176, 47038,  1766,   186, 64573,
   20176, 20176,  1678,  1018, -3172, 20176,  1920, -3172,  1679, 20176,
    1770,   206, 20176, 20176, 20176, 20176, 20176, 20176, 20176, 20176,
   20176, -3172, -3172, 27597,   258,   889,  2018,  2047,   -27,   423,
   20176,  2039, 11149, -3172,   833, 41895,   195,  2039, -3172, -3172,
   -3172, -3172,   224, -3172, -3172, -3172, -3172,  1661, -3172,  1661,
   -3172, 64573, -3172, 55054,   264, 51547, 20176, -3172, -3172,  1684,
    1693,  1695,  1703,   207,    74, -3172, -3172,  1753, -3172, -3172,
   55054, 37671,  1996, -3172,   318,  1699, -3172, 44898,  1952,  1996,
      69, -3172, -3172, 25486,  1827,  1995,  1934, -3172, -3172,  1915,
    1921, -3172,  1709, 46105, 21238, 21238, -3172,  1585, 46013,  1588,
   -3172, -3172, -3172, -3172, -3172, -3172,   105, -3172, 55054,    94,
   35166, -3172,  1711,   124, -3172,  2772,  2055,  2019,  1916,   705,
    1721, -3172,  1547,  1719, 67579, 55054,  2013,  1967,  2016,   -57,
   -3172, -3172, -3172, 70555, -3172, 55054, 64573, 63571, 68080, 48040,
   55054, 47539, -3172, -3172, -3172, -3172, 55054,  1141, 55054,  9640,
   -3172, -3172, -3172,   247, -3172, -3172, -3172, -3172, -3172, 64573,
   55054, -3172, -3172,   247, 64573, 55054,   247, -3172,  1591, 55054,
   55054, 55054, 55054,  1598, 55054, 55054, -3172, -3172,    32,    32,
    1951, 12211,   178, -3172, 20176, 20176, -3172, 20176,  1911, -3172,
     921, -3172,  1966,   136, 55054, -3172,  2076, -3172,  1780, 55054,
   55054, 55054, 55054, -3172, -3172,  1844, 55054,  1228, -3172, -3172,
   -3172, -3172, -3172,  1737, -3172,  1746,  2118,  2617, -3172,  2119,
    2162, 51046,   875,  2120,  1792,  2123, 12742,  2233,  2001, -3172,
    1987, -3172, -3172, -3172, 20176,  1760,  1762,   244,   937, -3172,
   -3172,  1764,  1626,  1781,  1782,  1767,  1769,   941, 70555, -3172,
     979,  2125,   150,  1772,  1773,  1697,   884,   584,  1592,   250,
   -3172, -3172, 47539,   252, -3172,  2003,   231, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172,   998, 32660, -3172, -3172,  2245,
    1020,  2245,   822, -3172, -3172,  2245, -3172,  2235,  2245, -3172,
    1487, 70555, -3172,  9459, -3172, 20176, 20176, -3172, 20176,  2126,
   -3172,  2288,  2288, 70555, 24424, 24424, 24424, 24424, 24424, 24424,
     227,  1531, 24424, 24424, 24424, 24424, 24424, 24424, 24424, 24424,
   24424, 26017,   361, -3172, -3172,  1003,  2258, 20176, 20176,  2134,
    2126, 20176, -3172, 70555,  1783, -3172,  1784,  1785, 20176, -3172,
   70555, -3172, 55054,    12,   512,  1789,  1790, -3172, -3172,  1787,
    1797, -3172,   977,  1024, 55054,  2254,  2928,  3507, -3172, -3172,
   20176,  2129,  4849, 30653, -3172, 20176,  1793, -3172, -3172, 30653,
    2135, -3172, -3172, -3172, 35667,  4849,  1011, -3172, 70555, 55054,
    1012, 70555, 44400, -3172, 14335, -3172, 70555, -3172, -3172, -3172,
   -3172, -3172,  1794,  1803, 20176,   172, -3172,  9500, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,  1806,  1807, -3172,  1812, 55054, -3172,
   21769, -3172, 64573, -3172, -3172, 20176, 55054, -3172, 20176,  1816,
   40190, -3172, -3172, -3172,   253,   395,  7545,   423,  2808,  2808,
    2808,  4066, -3172, -3172, -3172,  1817, -3172, 24424, 24424, -3172,
    6817,  3522, 10618, -3172, -3172,  2144, -3172,   791, -3172,  1818,
   -3172, -3172,  4819, -3172, 39681,  9207, 20176,   187, -3172, 20176,
    1678, 20176,  1886,  2808,  2808,  2808,   276,   276,   253,   253,
     253,   395,   423, -3172, -3172, -3172,  1823, 20176, 47539, -3172,
    1824,  1825,  2190,  1535, 20176, -3172, -3172, 30653,  1692,     6,
   -3172,  1908,  1692,  2125,  2004, -3172,  1154, -3172, -3172,  1154,
   46013, 55054, -3172,  2516, -3172,   778,   243,  2339,   255,   207,
   70054,  1870, 30653,  1871,  1875,  2309, 64573, -3172,  1828,  2039,
    1846, -3172, -3172, -3172,  1851, 20176,  2548,  1851, -3172,  1996,
      23,  2060,  1249,  1249,  1585,  2065, -3172, -3172,  1904, -3172,
   -3172, -3172, 20176, 13273,  1605, -3172,  1608, -3172, -3172, -3172,
   -3172,  1839, -3172, -3172,  2113, -3172, 55054, -3172, -3172, 24424,
    2301, 20176, 36168,  2303,  2098, -3172, -3172, -3172,  1937,  1573,
   20176,  2089, -3172,   165,  1853,  2214,   470,  2163, 64573, -3172,
     394,   407, -3172,   984,  2219,   231,  2221,   231, 47539, 47539,
   47539,  1017, -3172, -3172,  1020, -3172, -3172,  1031, -3172,   655,
   -3172, -3172, -3172,  1942,  1050,  2617,  1573, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,   287,  1205,  1573,  1943, -3172,  1945,
   -3172,  1946,  1295,  1573, -3172, -3172,   178,   178,   178, 14335,
   -3172,  2099,  2102,  1869, 46013, 46013, 46013,  1874, -3172,   201,
   -3172, 64573, -3172, -3172, -3172,  1911,  2217,  1020,  2017, 55054,
    2617,  2354,  1877,  1340,  1611,  1878, -3172,  2042,   100,  1274,
   -3172, 64573, 55054, 55054, 55054,  1922, 55054, -3172, -3172, -3172,
    1880,  1881, -3172, 69082,    29,  2121,  2114, 55054,  1574,  2366,
   55054, -3172,  1033, 17521,  2256, 55054,  1889, -3172, -3172, -3172,
   -3172,  2125, -3172, -3172,   508,   508, -3172, 64573, -3172, -3172,
    1894, -3172,  1896, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172, 64573, -3172, -3172, 47539, -3172,
   49543, -3172, -3172, -3172, -3172,  1020, -3172,  1020,  2130, 64573,
   42396,  1020, 42897,  1020, -3172,  1899, -3172, 46013, 40231, 46013,
    2134, -3172,   191,  2288,  7224,  7224,  7224,  6768,  2246,   368,
    1905,  7224,  7224,  7224,   443,   443,   191,   191,   191,  2288,
     361,   951, 48541,  1909, -3172, 46013, 46013, -3172, -3172,  1907,
   -3172, -3172, -3172, -3172,  1923,  1924, -3172, -3172, -3172, -3172,
   -3172, 64573,  1266, -3172,  1692,   -51,   -51,   -51,   -51, -3172,
   55054, 55054, 55054, 46013,  2356,  2231, -3172,  4849, 46013, 55054,
   -3172, 28128, 55054,  2257, -3172, -3172, -3172, 55054,  2351,  1074,
   -3172, -3172, -3172, -3172, -3172, 45716, 20176, -3172,  2294, -3172,
   -3172, 39681, -3172,  1926, 10618, 45942, -3172,  2239, 40272, -3172,
   46013, -3172,  2004, 20176,  3817,  4184, 20176,  1927, 20176,  2260,
   -3172, -3172,  1929, -3172, -3172, 70555, 20176,  1936,  5651, 24424,
   24424,  6038, -3172,  6300, 20176, 10618, -3172, 41315,  1925,  1930,
    1951, 18052, -3172,  2153,  1938, -3172,  2129,   178,  1830,  2129,
    1939, -3172, -3172, -3172,  1954,  1688, -3172, -3172,   814,  1688,
    1688,  1688, -3172, -3172, -3172,   814,   814,   814, -3172,   159,
     632, 70054, 70054,   255,   255,  1941, -3172, -3172, 70054,   714,
   -3172, -3172, -3172, -3172, 23893,  2375, -3172, 20176,  2095,  2005,
     350, 33662,  2175, -3172, 64573,  1075, -3172, 37671,  1871, 20176,
     833,   616, -3172, -3172,  1953, -3172,  1851, -3172, -3172, -3172,
    2177, -3172, -3172, -3172, 55054, -3172,  1955, -3172, 35166,  2302,
   20176, -3172, 35166, 55054, 55054, 40313,  2333, -3172, 64573, 64573,
   64573, -3172, 64573,  1964,  1968,   885,  1971,   970, -3172,  1652,
     885,  2311,   248,  1574,   166,  3477,   445, -3172, -3172, -3172,
    2052, 55054, -3172, 64573, -3172, -3172, -3172, -3172, -3172, 48040,
   -3172, -3172, -3172, 47539, 39179, 47539, 55054, 55054, 55054, 55054,
   55054, 55054, 55054, 55054, 55054, 55054,  1972,  1973,  1975,  1951,
   -3172, -3172, -3172, -3172, -3172, -3172,   466, -3172, -3172,   201,
    1020, -3172,  1978, -3172,  3015, 51046,  1792,  2450, 55054,  2017,
    1095, 64072,  1980,  1982, -3172,  1085,  2617,  2457,  1988,   777,
     234, -3172, -3172,   875, 51046, -3172, -3172, -3172,  2416, -3172,
    1340, -3172,  3015,  1611, -3172,  3015, 46013, 64573,  2050, -3172,
    1626,  1992, -3172, -3172,  1626, 70555,  1626, -3172, -3172,   231,
   -3172,  1093, -3172, -3172, -3172, -3172, 64573,  1985, -3172,  1985,
   -3172, -3172,  1985, -3172, -3172, -3172, -3172, 24424,  2340,  1993,
   70555, -3172, -3172, 55054, -3172, -3172, -3172,  1102,  1994,  2129,
   55054, 55054, 55054, 55054, -3172, -3172, -3172, 18583, 20176,  2037,
   -3172,  1998, 14866,  2315, -3172, 27079, -3172,   230,  1999, 35667,
   -3172, 64573, -3172, -3172, 20176, 46013, -3172, -3172, -3172,  8757,
   -3172,  2002,  2007, 64573, 20176, -3172, -3172,   812, 20176, 20176,
    6817, -3172,  5907, 20176, 70555,  1112,  6817,   259, 20176,  4723,
    4963, 20176, 20176,  6452, 40355, -3172, 20176, 13804, -3172,  2008,
   20176, 40711, 38172, -3172, 30653,  2231,  2010, -3172,  2231,  1020,
   -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,  1463,   689,
   -3172, -3172, -3172,   814,  2014, -3172,    26,  2011, -3172, -3172,
    2024,   255,  2015, -3172, -3172, -3172,  2508, -3172, 23893, 23893,
   23893, 23893, 46239, -3172,  2222,  2021, 46013, 20176, -3172, -3172,
   -3172, -3172,  2057, -3172,  1151, -3172,  2436,  2095, -3172,  2027,
   64573, -3172,  2095, 46013, -3172, -3172, 39681, -3172, -3172, -3172,
   -3172, -3172,  2476,  2026, -3172,  1539, -3172, -3172, 64573,  2030,
   -3172,  2034,   885, -3172, 64573,  2062, -3172,   263,  2335,   125,
   -3172, 20176, -3172,  2433,  2515,  1652,  2041, 64573, 55054, 24424,
   -3172,   277,   237, -3172,  2320, 55054,  2062,  2470, -3172, -3172,
   -3172,   970, -3172,  2368,  2283, -3172,   247, -3172, 20176,   970,
    2284,   267, 64573, -3172, -3172,  1393, -3172, 70555,   231,   231,
   -3172, -3172,  2053,  2058,  2063,  2066,  2067,  2069,  2070,  2073,
    2075,  2080,  2081, -3172,  2085,  2086,  2087,  2091,  2093,  2097,
    2100,  2103,  1432,  2104, -3172,  2105,  1953,  2109,  2110,  2112,
    2138,  2140, 71527,  2141,  2142,  2145,  2147,  1444,  2148,  1097,
    1222, -3172, -3172, -3172,  2149, -3172, -3172, -3172, -3172,  1462,
    2061, -3172, -3172,  2154, -3172,  2165, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172,   178,  1487,   192, -3172, 64573,  1922,
    2115,  2529, 19114,  2054,   490,  2532,  1089,  2300,  2096, -3172,
    1020,  1792, -3172,  2429, 51046,  1922, -3172,  2513,   262,  2114,
   -3172,   217,  1792,  2139,  2596, -3172,  2347, 64573,  2146, -3172,
   -3172, -3172, -3172, 49543,  1985,  7014, 24424, 70555,  1152,  1165,
   -3172,  2634,  2316,  2231, -3172, -3172, -3172, -3172, -3172,  2152,
     -18,  2155, 10087,  2157, -3172, -3172, -3172, -3172, -3172, -3172,
   46013, 46013, 64573,  2338, -3172, -3172,  2161,  2168, 36669,  2625,
    2170, -3172, 14335, -3172,  2492, -3172, 29650, -3172, 46013, 20176,
   -3172, -3172, 41356,  2500,  6817,  6817,  5907,  1187, -3172,  6817,
   20176, 20176,  6817,  6817, 20176, -3172,  2176, -3172,  1189, -3172,
   40752, -3172, 68581, -3172, -3172,  2037,  1020,  2037, -3172, -3172,
   -3172, -3172, -3172,   255,   714, -3172, -3172,  1870, 28640, -3172,
    2173, -3172,   213, -3172,  2184, 46492, 46492,  2686,  2686, 70555,
   23893, 23893, 23893, 23893, 23893, 23893, 23893,  2268,   189, 64573,
   23893, 23893,  1678,  1415, -3172, 23893,  2419, -3172, 23893,  2277,
     336, 23893, 23893, 23893, 23893, 23893, 23893, 23893, 23893, 23893,
   23893,   -27, 20176,  2187,  3015,  2117, 64573,   833,    31, -3172,
   20176, -3172, -3172,  2191, 35166, -3172, -3172, -3172, 35166,   885,
   -3172,  2364,  2062,  2199, -3172, -3172, -3172, -3172, -3172, -3172,
   40793, -3172,    80, 20176, -3172,  1638,  6768, -3172, -3172, -3172,
   -3172,  2062,  1340, -3172, 55054,  2678,  2568, -3172, -3172, 46013,
   -3172, -3172,  2125,  2125, -3172, -3172,  2351, -3172, -3172, -3172,
   -3172,  1462,   539, 39179, 55054, 55054,  2201, -3172, -3172,   466,
    2602,  1193, -3172,   875,  3015,  3015, 46013, 55054,  2205,  2390,
     141,  2498, 70054, 55054,  2577, 51046, -3172,  2689, 55054,  1922,
    2211, -3172, -3172,  1040,  1040, -3172,  2362, -3172,  2367,  2696,
     319, -3172, 19645, 55054, -3172, -3172, 31655, -3172,  7014,  1200,
   -3172, -3172,  2223,  2220, -3172,  2037, 20176,  2229, 20176, -3172,
   22300,  2234, -3172,  2701, 20176,  2297, 26548, -3172, 20176, -3172,
   55054, 60565,    32,  2240, 60565, -3172, -3172, -3172, 20176, -3172,
    6817,  6817,  6817, -3172, -3172, -3172,  2448, -3172,  2338, -3172,
    2338,  1870, -3172,  2662, 28640, 28640, -3172, -3172, -3172,  2255,
     714,  2508, -3172,   402, 46197,   429,  3923,  3923,  3923, 46492,
    2259, 24424, 24424, -3172,  5856,  3984, -3172,  2592, -3172,  1099,
   -3172,  2248, -3172, -3172,  4011, -3172, 46306, 23893,   238, 23893,
    1678, 23893,  2332,  3923,  3923,  3923,   349,   349,   270,   270,
     270,   402,   429, -3172, -3172,  1207, -3172, 20176, -3172,   350,
   -3172, -3172,  2673, 31655,  2637, 46013, -3172, -3172, -3172, 55054,
   -3172, 47539, -3172,   885,    11,  2261, 20176, 40835,  2496, -3172,
   -3172,  2522, -3172,  2591, -3172,  2326,   540,  2344, -3172, -3172,
   -3172, -3172,  1487,  1020,  1792,  2114,  2139, -3172,  2054,   279,
   -3172, -3172, 70054,  2759, -3172, 70054, -3172,  2274, 55054,  3015,
     777, -3172,   875, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
   -3172, -3172, -3172, -3172, -3172,  3015,  2721,  2502,  2725,  3015,
   46013,  2050, 20176, -3172,  1214,  2720,   190, -3172, -3172,  2793,
    2338,  2282, 22300,  2285, -3172, 64573,  2291, 46013,  2430, -3172,
   -3172,  2287, -3172, -3172,   178, 20176, -3172, 41397,  2744,  1951,
    2297,  2297,  2662, 24424, -3172,  2292,   894, -3172, -3172,  2289,
   23893,  5024,  5757, 23893, 23893,  2646, -3172, -3172,  2306, -3172,
   -3172, 70555, 23893,  7824, 24424, 24424, 45660, -3172, 46364, 23893,
    2318, 20176,  2357, 55054,  1223,    60,  1340,   885,  1227, -3172,
    2321, -3172, -3172, -3172, -3172,  2617, -3172, 40876,  2563,   163,
    2551,  2261, 20176, -3172,  2395, -3172, -3172, -3172,  2802, -3172,
   -3172, -3172, -3172, -3172,  2423,  2807, -3172,  1251,  2767,  2654,
   51046,  2342,  2139,  1922,  2114,  2139,  2564, -3172,  2570, -3172,
    2346, 41232,  1792, 31655, 64573, 64573, 64573,  2337,  2297, -3172,
    2348, -3172, -3172, -3172, 54052, -3172,  2349,  2352, -3172, 20176,
      47, -3172, -3172, -3172,  6055, -3172, 28640, 28640, -3172,   899,
   23893, 23893,  5856,  8647, 23893, 70555,  1262,  5856, 23893,  6895,
    6991, 23893, 23893, 46543, 55054, -3172,  3015, -3172,  1692, -3172,
    2485,  2522, -3172, 47539, 39179,   939,    11,  2670, -3172, -3172,
   -3172, -3172,   229,  2588, -3172,  2589, -3172, 46013, -3172,  3015,
    2363, 70054, -3172, 70054,  2734, 55054, -3172, 51046, -3172, -3172,
   -3172, -3172, -3172, -3172, 31655,  2720,  1692, -3172, -3172,   318,
   -3172,   318, -3172, -3172, -3172, -3172,  1020, -3172,  1645, 22831,
   22831,  2365,  1277, -3172, -3172,  2360, -3172,  2358,  5856,  5856,
    8647,  1282, -3172,  5856, 23893, 23893,  5856,  5856, 23893, -3172,
   -3172, -3172, 37671,  2551, -3172, -3172, -3172, -3172, -3172,   695,
     695,  2769, -3172,  2435, -3172,  2139, 55054, -3172, -3172,  2373,
   -3172,  2374,  1283, 64573, -3172,  1851,  1851, 24955,  2527,   242,
   44980, -3172, -3172, -3172, -3172, -3172, -3172, -3172, 28640, 28640,
   -3172,  5856,  5856,  5856,  1692, -3172, -3172,  2875, -3172,   233,
   -3172, -3172, -3172,  2377,  2501, 70054, 70054,  1792,   318, -3172,
   -3172,  2865, -3172, -3172, -3172, -3172, -3172, -3172, -3172, -3172,
     885, -3172, -3172, -3172, 55054,  2383,  2675,  1308, -3172,  1314,
    1692,  1851, 23362,  2377, -3172,  2386,  2558, 55054, -3172, -3172,
   70054, -3172, -3172, -3172, -3172, 55054, -3172, -3172,  2386, -3172,
    1315,  2782, -3172,  2675, 55054,  2386,   490,  2683, 70054,  2654,
   -3172
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     137,   235,     0,  1490,  1489,  1557,   235,     0,  1439,   235,
     637,   554,     0,  1575,  1557,     0,   235,     0,   137,     0,
       0,     0,     0,     0,     0,   697,   700,   698,     0,     0,
       0,   235,   733,     0,  1574,   235,     0,     0,   725,   699,
       0,  1537,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    23,    10,    11,    12,    19,    13,
      14,    15,    17,    18,    20,    21,    22,    25,    26,    27,
    1448,    28,    30,    31,    32,     0,    33,    24,    16,    29,
      34,    35,    36,    37,   673,   660,   738,   672,     0,     0,
     136,   837,   680,    38,    39,    40,    41,    42,    43,    44,
    1573,    45,   234,   233,   227,     0,     0,     0,     0,     0,
    1556,     0,   228,  1372,  1597,  1598,  1599,  1600,  2201,  1601,
    1602,  1603,  1604,  1605,  1606,  1607,  2202,  1958,  1608,  1609,
    1610,  1611,  1612,  1959,  1613,  1614,  1615,  1904,  1905,  1960,
    1906,  1907,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
    1908,  1909,  1624,  1625,  1626,  1627,  1628,  1910,  1961,  1911,
    1629,  1630,  1631,  1632,  1633,  1962,  1634,  1635,  1636,  1637,
    1638,  1639,  1640,  1641,  2203,  1963,  1642,  1643,  1644,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,  1912,  1913,  1652,  1653,
    1654,  1655,  1656,  1657,  1658,  1659,  1660,  2204,  1661,  1662,
    1663,  1664,  1665,  1666,  1667,  1668,  1669,  2205,  2206,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1914,
    1680,  1681,  1682,  1683,  1684,  1915,  1685,  1686,  1687,  1916,
    1688,  1689,  1690,  1964,  1965,  1691,  1692,  1917,  1967,  1693,
    1694,  2207,  1918,  1919,  2208,  1695,  1696,  1697,  1698,  1699,
    1700,  1701,  1702,  1968,  1703,  1704,  1705,  1706,  1707,  1708,
    1709,  1710,  1711,  1712,  1713,  1714,  1969,  1920,  1715,  1716,
    1717,  1718,  1719,  1921,  1922,  1923,  1720,  1970,  1971,  1721,
    1972,  1722,  2209,  1723,  1724,  1725,  1726,  1727,  1728,  1973,
    1729,  1974,  1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737,
    1924,  1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1746,
    1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1925,
    1976,  1926,  1756,  1757,  1758,  2210,  1927,  1759,  1760,  1977,
    1761,  1928,  1762,  1929,  1763,  1764,  1765,  1766,  1767,  1768,
    1769,  1770,  1771,  1930,  1978,  1772,  1979,  1931,  1773,  1774,
    1775,  1776,  1777,  1778,  1779,  1780,  1781,  2211,  2212,  1782,
    1783,  1784,  1932,  1980,  1785,  1786,  1933,  1787,  1788,  1789,
    1790,  1791,  1792,  1793,  1794,  2213,  2214,  1795,  1796,  1797,
    1798,  1934,  1799,  1800,  1801,  1802,  1803,  1804,  1805,  2215,
    1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,
    1816,  1817,  1981,  1818,  1819,  1820,  1935,  1821,  1822,  1823,
    1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,
    1834,  1835,  1836,  1837,  1936,  1838,  1839,  2216,  1840,  1982,
    2217,  1841,  1937,  1842,  2218,  1843,  1844,  1845,  1846,  1847,
    1848,  1849,  1850,  1851,  1852,  1853,  1854,  1938,  1855,  1939,
    1856,  1857,  1858,  1859,  1984,  1860,  1861,  1862,  1863,  1864,
    1940,  1941,  2219,  1865,  1866,  1942,  1867,  1943,  1868,  1869,
    1944,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,  1878,
    1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,  1945,  1946,
    1887,  1985,  1888,  2220,  1889,  1890,  1891,  1892,  2221,  1893,
    1894,  1895,  1896,  1897,  1898,  1899,  1947,  1948,  1949,  1950,
    1951,  1952,  1953,  1954,  1955,  1956,  1957,  1900,  1901,  1902,
    1903,  1374,  1375,  1383,  1373,  1580,     0,     0,  1354,  1372,
    1917,  1924,  1938,  1437,  1374,  1438,   230,   636,     0,     0,
    1371,     0,     0,     0,     0,     0,     0,   548,   547,     0,
    1428,   553,     0,     0,     0,   186,  1377,   108,  1787,   106,
    1376,  1352,  1556,     0,     0,   575,   576,   566,     0,   585,
       0,   568,   573,   569,     0,   594,     0,   587,   595,   577,
     567,   588,   578,   565,     0,   596,     0,   571,     0,     0,
       0,   231,   196,   554,     0,   137,     0,  1452,  1453,  1454,
    1455,  1456,  1457,  1462,  1458,  1459,  1460,  1461,  1463,  1464,
    1465,  1466,  1467,  1443,  1448,  1468,  1469,  1470,  1471,  1472,
    1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,     0,
    1439,     0,     0,  1910,  1961,  1915,     0,     0,  1928,     0,
    1931,  1932,  1821,  1939,  1942,  1943,  1944,  1945,     0,   890,
       0,   675,   841,   851,   890,   895,  1155,   918,  1156,   906,
    1376,  1344,     0,  1522,  1524,  1525,  1521,   176,  1403,  1562,
    1940,  1865,  1576,  1563,  1560,  1561,   232,   732,   730,     0,
    1322,  1693,  1732,  1825,  1836,  1940,  1498,  1502,     0,   229,
       0,  1567,     0,  1578,  1568,   681,  1376,   724,     0,   236,
    1536,     0,  1541,     0,  1801,   707,   710,  1392,   708,   237,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,
    2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,
    2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,
    2252,  2253,  2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,
    2262,  2263,  2264,  2265,  2266,  2267,  2268,  2269,  2270,  2271,
    2272,  2273,  2274,   238,   239,     0,   673,     0,     1,   137,
    1447,  1551,     0,   143,     0,   728,   728,     0,   728,     0,
     665,     0,     0,   673,   668,   672,   838,  1572,  1940,  1865,
    1566,  1569,  1701,     0,     0,  1701,     0,  1701,     0,  1701,
       0,  1559,     0,  1306,     0,  1307,  1355,     0,   519,  1701,
     179,   552,   551,   550,   549,   554,     0,  1701,  1412,     0,
     605,   606,     0,     0,     0,     0,     0,     0,  1423,   109,
     107,     0,  1554,   583,   584,     0,   574,   570,   572,     0,
       0,  1384,  1986,  1987,  1988,   961,  1989,   990,   968,   990,
     990,  1990,  1991,  1992,  1993,   957,   957,  1667,   970,  1994,
    1995,  1996,  1701,  1997,  1998,   958,   959,   995,  1999,  2000,
    2001,  2002,  2003,     0,     0,  2004,   990,  2005,   957,  2006,
    2007,  2008,   962,  2009,   928,  2010,     0,  2011,   960,   929,
    2012,   998,   998,  2013,     0,   985,  2014,  1385,  1386,   593,
       0,   597,   943,   944,   945,   946,   971,   972,   947,   977,
     978,   982,   948,  1030,   957,  1701,   593,  1387,   589,  1701,
     593,  1346,  1701,     0,     0,   192,     0,  1445,  1482,  2015,
    2016,  2017,  2018,  2019,  2020,  2021,  2022,  2024,  2023,  2025,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2046,  2044,
    2045,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  2057,  2058,  2059,  2061,  2060,  2062,  2063,  2064,  2065,
    2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,
    2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
    1483,  1484,  1496,     0,  1497,  1487,  1451,   137,   635,     0,
    1436,  1523,     0,     0,     0,  1263,     0,   853,   890,   895,
       0,     0,   908,     0,  1278,     0,  1284,     0,     0,     0,
     890,   680,     0,   851,     0,   889,   779,   888,   779,   733,
       0,   714,   900,     0,     0,   903,   901,     0,   903,     0,
       0,     0,   903,   899,   860,     0,   779,     0,   891,   779,
     888,     0,   910,   907,  1345,  1442,     0,     0,     0,     0,
    1564,     0,     0,     0,  1357,  1359,  1360,  1231,  1370,  1143,
       0,  1905,  1906,  1907,  1299,  1908,  1909,  1911,  1912,  1913,
    1097,  1914,  1368,  1916,  1918,  1919,  1921,  1922,  1923,  1925,
    1926,     0,  1369,  1929,  1768,  1934,  1935,  1937,  1940,  1941,
    1367,  1946,     0,     0,     0,  1333,  1254,     0,  1142,     0,
       0,     0,  1138,     0,     0,   951,   952,   973,   974,   953,
     979,   980,   954,     0,  1329,  1031,  1126,  1317,  1174,  1146,
    1154,  1134,  1205,  1127,     0,  1137,  1129,  1325,   714,  1323,
       0,  1130,  1356,  1309,  1300,   714,  1321,  1501,  1499,  1505,
    1500,     0,     0,     0,     0,     0,  1345,  1543,  1544,  1535,
    1533,  1534,  1532,  1531,  1538,     0,  1540,  1448,  1249,  1251,
       0,   709,     0,     0,     0,   289,   663,   662,     3,  1392,
       0,     0,     0,     0,   726,   727,     0,     0,     0,     0,
       0,     0,     0,     0,   822,   753,   754,   756,   819,   823,
     831,     0,     0,     0,     0,     0,   669,     0,  1570,     0,
       0,     0,   124,   124,     0,     0,     0,     0,     0,   100,
      49,    93,     0,     0,     0,     0,   210,   223,     0,     0,
       0,     0,     0,   220,     0,     0,   203,   197,   199,    51,
       0,   124,     0,    47,     0,     0,     0,    53,     0,   635,
    1372,     0,  2096,  1958,  1959,  1960,  1961,  1911,  1962,  1963,
       0,  1964,  1965,  1917,  1967,  1968,  1969,  1970,  1971,  1972,
    1973,  1974,  1924,  1976,  1977,  1978,  1979,  1980,  1981,  2122,
    1982,  1938,  1984,  1944,     0,  1985,  1147,  1374,  1380,  1257,
     738,  1255,  1393,     0,  1305,     0,  1394,  2128,  2129,  2130,
    2131,  2132,  2133,  2134,  2135,  2136,  2137,  2138,  2139,  2140,
    2141,  2142,  2143,  2144,  2145,  2146,  2147,  2148,  2149,  2150,
    2151,  2152,  2153,  2154,  2155,  2156,  2157,  2158,  2159,  2160,
    2161,  2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,
    2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,
    2181,  2182,  2183,  2184,  2185,  2186,  2187,  2188,  2189,  2190,
    2191,  2192,  2193,  2194,  2195,  2082,  2196,  2197,  2198,  2199,
    2200,  1396,  1395,  1397,  1302,  1353,  1308,     0,     0,   633,
       0,     0,     0,     0,     0,     0,     0,  1408,     0,     0,
    1701,   191,  1701,     0,   519,  1701,   519,  1701,     0,   180,
    1422,  1425,     0,   586,   593,   582,   580,   579,   581,   989,
     976,   984,   983,  1254,   966,   965,   964,     0,   963,     0,
       0,   990,   990,   988,   967,   943,     0,     0,     0,   994,
       0,   992,     0,   591,   592,     0,   563,     0,   936,   932,
       0,  1003,  1004,  1005,  1006,  1013,  1014,  1011,  1012,  1007,
    1008,  1001,  1002,  1009,  1010,   999,  1000,     0,  1015,  1016,
    1017,  1018,  1019,  1020,  1021,  1022,   949,   955,     0,     0,
     558,     0,  1388,     0,     0,   560,     0,     0,     0,   554,
     137,     0,   204,  1492,  1493,  1491,     0,     0,  1450,   207,
    1495,  1485,  1494,  1449,   224,  1486,  1444,     0,  1440,   624,
       0,     0,     0,     0,  1264,  1265,  1266,  1267,  1268,  1269,
    1270,  1271,  1272,     0,     0,  1273,  2262,   850,   848,     0,
       0,     0,     0,     0,     0,     0,  1101,  1127,     0,     0,
    1300,     0,  1249,  1283,     0,     0,     0,     0,     0,     0,
    1249,  1289,     0,     0,   874,   886,   772,   778,   849,     0,
     847,     0,  1322,   842,     0,   920,   900,     0,   899,     0,
       0,   902,   896,     0,   897,     0,     0,     0,     0,   898,
       0,     0,     0,     0,   845,     0,   886,   846,     0,   917,
    1511,  1510,  1519,   177,     0,  1260,     0,   137,  1565,  1577,
       0,  1254,  1135,  1298,     0,     0,  1140,  1056,     0,     0,
    1057,  1035,  1036,     0,  1332,  1341,  1249,  1253,     0,  1138,
    1249,     0,  1208,  1210,     0,     0,  1131,  1400,  1132,  1139,
       0,  1363,     0,  1030,  1030,  1328,  1231,     0,  1221,  1224,
       0,     0,  1228,  1229,  1230,     0,     0,     0,  1320,     0,
    1239,  1241,     0,     0,  1072,  1237,     0,  1075,     0,     0,
       0,     0,  1225,  1226,  1227,  1217,  1218,  1219,  1220,  1222,
    1223,  1235,  1216,  1053,     0,  1128,     0,  1177,     0,  1052,
    1326,   840,     0,  1361,  1358,     0,  1301,   840,  1513,  1517,
    1518,  1516,     0,  1512,  1504,  1503,  1508,  1506,  1509,  1507,
    1579,     0,  1545,  1529,     0,  1526,  1252,   835,   711,  1348,
       0,     0,     0,   302,   281,   303,  1552,  1550,   142,   141,
       0,     0,   685,   684,   747,   739,   741,   747,     0,   683,
       0,   795,   796,     0,     0,     0,     0,   828,   826,  1357,
    1370,   783,   757,   782,     0,     0,   761,     0,   787,  1031,
     821,   667,   751,   752,   755,   666,     0,   824,     0,   834,
       0,   703,   705,   689,   702,   701,   686,   694,   822,   756,
       0,  1571,     0,     0,     0,     0,     0,  1701,     0,     0,
      84,    65,   471,   931,   123,     0,     0,     0,     0,     0,
       0,     0,    92,    89,    90,    91,     0,     0,     0,     0,
     208,   209,   222,     0,   213,   214,   211,   215,   216,     0,
       0,   201,   202,     0,     0,     0,     0,   200,     0,     0,
       0,     0,     0,     0,     0,     0,  1558,  1553,   738,   738,
     738,     0,   736,   737,     0,     0,  1303,  1306,   623,   527,
       0,   517,     0,     0,     0,   183,   182,  1412,     0,     0,
       0,     0,     0,   242,   241,     0,     0,   554,  1413,  1411,
    1415,  1414,  1416,  1673,   171,     0,     0,   190,   187,     0,
       0,   516,   490,     0,  1427,     0,     0,     0,  1701,  1424,
       0,   506,  1555,   240,     0,     0,     0,   593,     0,   987,
     986,   937,   933,     0,     0,     0,     0,     0,     0,   598,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   593,
     590,  1389,     0,   593,  1347,     0,   593,   195,  1446,  1488,
     205,   225,   206,   226,   658,     0,   630,   638,   643,   621,
       0,   621,     0,   640,   644,   621,   639,     0,   621,   634,
     635,     0,  1170,     0,  1160,     0,     0,   909,     0,     0,
    1161,  1103,  1104,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1121,  1120,  1162,   913,     0,   916,     0,     0,  1281,
    1282,     0,  1163,     0,     0,  1288,     0,     0,     0,  1168,
       0,   852,     0,     0,   767,   774,     0,   777,   771,     0,
     714,   674,  1693,  1732,     0,   725,   725,   725,   713,   723,
       0,   799,     0,     0,   875,     0,     0,   877,   879,     0,
       0,   882,   859,   858,     0,     0,     0,   921,     0,     0,
       0,  1352,     0,   178,     0,  1402,     0,  1407,  1405,  1401,
    1404,  1406,     0,     0,     0,  1297,  1293,     0,  1215,  1221,
    1224,  1228,  1229,  1230,  1225,  1226,  1227,  1217,  1218,  1219,
    1220,  1222,  1223,  1243,     0,     0,  1204,     0,     0,  1331,
       0,  1099,     0,  1133,  1144,     0,  1211,  1145,     0,     0,
       0,  1365,  1366,  1032,  1041,  1044,  1076,  1077,  1048,  1049,
    1050,  1054,  1399,  1398,  1327,     0,  1319,     0,     0,  1033,
    1058,  1063,     0,  1290,  1093,     0,  1081,     0,  1071,     0,
    1079,  1083,  1059,  1074,     0,  1055,     0,  1320,  1240,  1242,
       0,  1238,     0,  1045,  1046,  1047,  1037,  1038,  1039,  1040,
    1042,  1043,  1051,  1214,  1212,  1213,     0,  1306,     0,  1318,
       0,     0,  1179,     0,     0,  1078,  1324,     0,   920,   738,
    1310,  1333,   920,     0,  1030,  1546,  1392,  1539,  1528,  1392,
    1250,  1349,  1391,   137,   288,   284,   296,     0,   327,   302,
     289,   275,     0,  1548,     0,   131,     0,   162,   164,   840,
       0,  1309,   745,   746,   750,     0,     0,   750,   729,   682,
    1935,  1821,     0,     0,     0,     0,   788,   829,     0,   820,
     785,   786,     0,   784,  1357,   789,  1356,   790,   793,   794,
     762,   830,  1342,   832,     0,   825,     0,  1350,   688,   706,
       0,     0,     0,     0,     0,   671,   670,   836,     0,    50,
       0,  1701,    67,     0,     0,     0,     0,     0,     0,   421,
       0,   521,   421,   105,  1701,   593,  1701,   593,  1601,  1668,
    1837,     0,    63,    96,     0,   495,   117,     0,   480,   524,
      86,   101,   110,     0,     0,   198,    52,   212,   217,   113,
     221,   218,  1432,   219,   124,     0,    48,     0,   111,     0,
    1430,     0,     0,    54,   115,  1434,   736,   736,   736,     0,
    1256,     0,     0,     0,  1258,  1259,  1305,     0,   622,     0,
     518,     0,   632,   612,   613,   623,   181,     0,  1410,     0,
     191,     0,   519,   519,     0,     0,  1412,     0,     0,   173,
     169,     0,     0,     0,     0,  1595,     0,   509,   507,   540,
       0,   514,   508,   517,     0,     0,   466,     0,     0,     0,
       0,   607,     0,     0,     0,     0,     0,   956,   969,   564,
     943,     0,   997,   996,   998,   998,   943,     0,   926,   943,
       0,   941,     0,   981,   950,  1023,  1024,  1025,  1026,  1027,
    1028,  1029,   557,  1390,   559,     0,   561,   625,     0,   628,
       0,   627,   631,   626,   620,     0,   653,     0,     0,     0,
       0,     0,     0,     0,  1441,     0,  1157,  1262,     0,  1276,
    1275,  1102,  1109,  1112,  1116,  1117,  1118,  1277,     0,     0,
       0,  1113,  1114,  1115,  1105,  1106,  1107,  1108,  1110,  1111,
    1119,   918,     0,     0,   912,  1286,  1285,  1279,  1280,     0,
    1165,  1166,  1167,  1287,     0,     0,   765,   763,   766,   768,
     764,     0,     0,   887,   920,   725,   725,   725,   725,   722,
       0,     0,     0,   919,     0,   816,   881,     0,   905,     0,
     878,     0,     0,     0,   869,   876,   892,     0,   925,     0,
     894,  1520,  1261,   731,  1136,     0,     0,  1294,     0,  1098,
    1232,     0,  1203,     0,     0,     0,  1340,     0,  1250,  1209,
    1207,  1141,  1030,     0,     0,     0,     0,     0,     0,     0,
    1082,  1073,     0,  1080,  1084,     0,     0,     0,  1067,     0,
       0,  1065,  1094,  1061,     0,     0,  1095,  1305,     0,  1311,
       0,     0,  1178,  1187,   843,   839,   799,   736,  1341,   799,
       0,  1514,  1530,  1527,     0,   284,   282,   283,   284,   284,
     284,   284,   294,   300,   295,   284,   284,   284,   346,     0,
     344,   289,   352,   327,   327,   328,   305,   350,   352,   314,
     324,   323,   280,   304,     0,     0,  1549,     0,   151,     0,
       0,     0,   146,   126,     0,     0,   154,   165,  1548,     0,
     168,     0,   740,   742,     0,  1233,   750,   744,   792,   791,
       0,   760,   827,   758,     0,   833,     0,   704,     0,   691,
       0,   862,     0,     0,     0,     0,     0,   470,     0,     0,
       0,   421,     0,   529,     0,   536,     0,     0,   521,   502,
      85,     0,     0,     0,    59,   104,    77,    69,    55,    83,
       0,     0,    88,     0,    81,    98,    99,    97,   102,     0,
     456,   431,   467,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   738,
     734,   735,  1148,  1304,   656,   657,   203,   655,   528,     0,
       0,   185,     0,   189,     0,   516,  1427,     0,     0,  1409,
     554,     0,     0,   172,   174,     0,   191,     0,   519,   196,
       0,  1590,   494,   490,   515,   488,   487,   489,     0,  1596,
     519,  1426,     0,     0,   608,     0,   602,     0,  1421,   975,
     939,     0,   993,   991,   940,     0,   938,   934,   942,   593,
     659,     0,   616,   654,   641,   646,     0,   652,   648,   647,
     642,   650,   649,   645,  1158,  1169,  1274,     0,     0,     0,
       0,   911,   914,     0,  1164,  1159,   885,     0,     0,   799,
       0,     0,     0,     0,   716,   715,   721,     0,     0,  1181,
     880,     0,     0,     0,   867,   857,   863,     0,     0,     0,
     922,     0,   923,   893,     0,  1296,  1292,  1244,  1330,  1249,
    1335,  1337,     0,     0,     0,  1206,  1364,  1034,     0,     0,
    1064,  1291,  1085,     0,     0,     0,  1060,  1232,     0,     0,
       0,     0,     0,  1069,     0,  1315,  1306,     0,  1314,     0,
       0,     0,     0,  1153,   844,   816,     0,  1100,   816,     0,
     712,   293,   299,   292,   291,   290,   297,   301,   287,   344,
     349,   345,   347,   284,     0,   351,   341,     0,   325,   326,
     306,   327,     0,   311,   310,   312,   309,   354,     0,     0,
       0,     0,   274,   357,  1127,     0,  1547,     0,  1542,   130,
     153,   152,     0,   160,     0,  1309,     0,   151,   132,     0,
       0,   163,   151,   139,   748,   749,     0,   743,   759,  1343,
    1351,   690,     0,     0,   687,     0,   118,   421,     0,     0,
      66,     0,   538,   482,   530,   513,   497,     0,     0,     0,
     422,     0,   555,     0,     0,   503,     0,     0,     0,     0,
     483,     0,     0,   442,     0,     0,   513,     0,   520,   438,
     439,     0,    58,    78,     0,    74,     0,   103,     0,     0,
       0,     0,     0,    61,    73,     0,    56,     0,   593,   593,
      64,   481,  1384,  1986,  1987,  1988,  1989,  1990,  1991,  1992,
    1993,  1994,  1995,  2106,  1996,  1997,  1998,  1999,  2000,  2001,
    2002,  2003,  2115,  2004,   428,  2005,  1768,  2006,  2007,  2008,
    2009,  2010,     0,  2011,   929,  2012,  2013,  2192,  2014,  1217,
    1218,   426,   523,   423,  1385,   424,   531,   425,   427,     0,
     526,   114,  1433,     0,   112,     0,  1431,   121,   119,   116,
    1435,  1151,  1152,  1149,   736,   635,   615,   184,     0,  1595,
       0,     0,     0,   247,   273,   263,     0,  1701,     0,   170,
       0,  1427,   188,     0,   516,  1595,  1593,     0,   546,   466,
     541,     0,  1427,  1589,     0,   599,     0,     0,     0,   935,
     927,   562,   629,     0,   651,  1122,     0,     0,     0,     0,
     775,     0,   781,   816,   720,   719,   718,   717,   798,  1643,
    1918,  1820,     0,   802,   797,   800,   805,   807,   806,   808,
     804,   815,     0,   818,   904,  1245,  1247,     0,     0,     0,
       0,   868,     0,   870,     0,   872,     0,   924,  1295,  1338,
    1339,  1334,     0,  1031,  1091,  1089,  1086,     0,  1087,  1068,
       0,     0,  1066,  1062,     0,  1096,     0,  1312,     0,  1173,
       0,  1176,  1190,  1185,  1186,  1181,  1148,  1181,  1515,   285,
     286,   298,   348,   327,   314,   342,   343,   275,     0,   356,
       0,   329,     0,   308,     0,   379,   380,   361,   362,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1320,     0,
       0,     0,     0,     0,   395,     0,     0,   398,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   150,     0,     0,     0,   138,   135,   125,
       0,   155,   609,     0,     0,   861,   695,   696,     0,   534,
      68,     0,   513,     0,   421,   499,   498,   501,   496,   500,
       0,   556,     0,     0,   440,     0,   447,   485,   486,   484,
     441,   513,   519,   443,     0,     0,     0,    70,    60,    57,
      62,    71,     0,     0,    72,    75,   925,    87,    80,  2115,
    2124,     0,     0,     0,     0,     0,     0,   611,   618,   203,
       0,     0,  1592,   490,     0,     0,   604,     0,     0,     0,
     260,     0,     0,     0,     0,   516,   175,     0,     0,  1595,
       0,   193,  1594,     0,     0,   418,     0,   463,     0,     0,
       0,  1581,     0,     0,  1420,  1419,     0,   617,  1123,     0,
    1124,   915,     0,     0,   773,  1181,     0,     0,     0,   809,
     803,  1180,  1182,     0,     0,   770,  1248,   864,     0,   866,
       0,   890,   738,     0,   890,   873,  1336,  1171,     0,  1088,
    1092,  1090,  1070,  1316,  1313,  1175,  1192,  1189,   818,  1362,
     818,   275,   322,   320,     0,     0,   337,   340,   307,   344,
     314,   309,   358,   369,   399,   400,   373,   374,   375,   377,
       0,     0,     0,   359,   381,   386,   416,     0,   404,     0,
     394,     0,   402,   406,   382,   397,   378,     0,  1320,     0,
       0,     0,     0,   370,   371,   372,   363,   364,   365,   366,
     367,   368,   376,   401,   278,     0,   277,     0,   127,     0,
     128,   161,     0,     0,     0,   140,  1234,   692,   693,     0,
     421,     0,   512,   535,   452,   430,     0,     0,     0,   437,
     444,   545,   446,     0,    79,    95,     0,     0,   525,   122,
     120,  1150,   635,     0,  1427,   466,  1589,   601,   247,     0,
     271,   259,     0,     0,   272,     0,   264,     0,     0,     0,
     196,  1591,   490,   479,   472,   473,   474,   475,   476,   477,
     478,   493,   492,   464,   465,     0,     0,     0,     0,     0,
     603,  1421,     0,   166,     0,   157,   157,  1125,   776,     0,
     818,     0,     0,     0,   801,     0,     0,   817,     0,   678,
    1246,     0,   856,   854,   736,     0,   855,     0,     0,   738,
     770,   770,   320,     0,   353,     0,   334,   338,   355,     0,
       0,     0,     0,     0,     0,     0,   405,   396,     0,   403,
     407,     0,     0,   390,     0,     0,   388,   417,   384,     0,
       0,     0,     0,     0,     0,     0,   519,   537,     0,   504,
     511,   450,   449,   451,   455,     0,   453,     0,   469,     0,
     462,   430,     0,    82,     0,   532,   610,   614,     0,   420,
    1583,   246,   243,   244,     0,   261,   265,     0,     0,   254,
     516,     0,  1589,  1595,   466,  1589,     0,  1586,     0,   600,
       0,     0,  1427,     0,     0,   159,   159,     0,   770,   811,
       0,   810,  1183,  1184,   772,   865,     0,     0,  1172,     0,
    1195,   677,   676,   321,   318,   339,     0,     0,   313,   360,
       0,     0,   387,   408,     0,     0,     0,   383,     0,     0,
       0,     0,     0,   392,     0,   279,     0,   134,   920,   145,
       0,   545,   491,     0,     0,     0,   452,     0,   445,   542,
     543,   544,     0,   458,   448,   459,    76,    94,   533,     0,
       0,     0,   270,     0,   268,     0,   255,   516,  1584,   194,
     419,  1582,  1587,  1588,     0,   157,   920,   167,   156,   747,
     158,   747,   780,   679,   812,   769,     0,   871,  1191,     0,
       0,     0,     0,   319,   335,   330,   336,   332,   414,   412,
     409,     0,   410,   391,     0,     0,   389,   385,     0,   276,
     129,   133,     0,   462,   505,   510,   429,   454,   468,     0,
       0,     0,   460,     0,   461,  1589,     0,   262,   266,     0,
     269,     0,     0,   159,  1417,   750,   750,  1904,  1644,  1872,
       0,  1193,  1196,  1194,  1188,   316,   315,   317,     0,     0,
     411,   415,   413,   393,   920,   421,   434,     0,   433,     0,
     522,   457,  1585,   257,     0,     0,     0,  1427,   747,   148,
     147,     0,  1200,  1199,  1198,  1202,  1201,   331,   333,   144,
     539,   432,   436,   435,     0,     0,     0,     0,   251,     0,
     920,   750,     0,   257,   245,     0,     0,     0,   267,   253,
       0,  1418,   149,  1197,   256,     0,   249,   250,     0,   252,
       0,     0,   248,     0,     0,     0,   273,     0,     0,   254,
     258
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3172, -3172, -3172,  2150,   110,   114,  -779, -1207,  -966, -1226,
   -3172,   -26,   117, -3172, -3172,   280, -3172,  1114, -3172,   269,
    -691,   667, -3172,  1210, -3172, -3172,  2912, -3172,   118,   119,
    2307,   120, -3172, -3172, -3172, -3172,  -629,   612, -1236, -3172,
     552, -3172, -3172, -3172, -3172,  -110,   265, -3172,     3, -2191,
   -3021,  -596, -3172,  -753, -3172,  -267, -3172,  -676, -3172,  -782,
    -684,  -741, -2871, -1162, -3172,  1724,  -321, -3172,   708, -3172,
   -2571, -3172, -3172,   697, -3172, -1180, -3172, -2223,   260,  -664,
   -2673, -2607, -2167,  -789,   332,  -672,   309, -2137,  -866, -3172,
     720, -3172,  -655, -3172,  -772, -2134,   121, -2853, -1677,    -8,
   -3172, -3172, -3172,  -588, -3172, -2578, -3172, -3172, -3172, -3172,
     126,  1561, -2101,   128, -1672, -3172,    13, -2121,   129, -3172,
   -3172,   130,    53,  -583,   380, -3172,   133, -3172, -3172,  1479,
    -743, -3172,  1536,   134, -2574, -3172,  -463, -3172,  -511,  -505,
   -3172, -3172,    44,  -968,  1469, -3172, -3172, -3172,    14, -3172,
    -485, -3172, -3172, -2611, -3172,    55, -3172, -3172, -3172, -3172,
    -209,   391, -3172, -3172,  -593, -1599,  -408, -3172, -3127, -3171,
   -3172, -3172,  -709, -3082, -2070,   135,   123,   -38, -3172, -3172,
   -3172, -3172,  -444, -2705, -3172,  -807, -3172,  -812,  -269,  -783,
    -773, -3172,  -650, -2918,  -751, -3172, -3172,  -801, -2815,  2369,
    -521, -3172, -3172, -1228, -3172,   440, -2100, -3172,   827, -3172,
     831, -3172,  -334, -2814, -3172, -3172,  -484, -3172, -3172, -3172,
   -2258,  -121,  -715,  -714, -3172, -2983, -3172, -3172, -2409, -3172,
   -3172, -3172,   446, -3172, -3172,  1950,   146,   148, -3172,   844,
     149, -1165,    86,   257,   -22,    -7, -3172,    -1, -3172, -3172,
   -3172,   787, -3172, -3172,    63,    99,  1833, -1050, -3172, -1147,
     983, -3172,  1984,  1986, -2194,  -774,   -62, -3172,   825, -1696,
   -2130,  -605,  1242,  1811,  1822,   579, -3065, -3172,  -544, -3172,
     330, -3172, -3172,   829,  1300, -1524, -1579, -3172, -2125, -3172,
    -434,  -256, -3172, -3172, -3172, -3172, -3172, -2499, -2472,  -558,
    1268, -3172,  1835, -3172, -3172, -3172, -3172,    73, -1525,  3026,
     869,   -83, -3172, -3172, -3172, -3172,   283, -3172,  1034,   -44,
   -3172,  2422,  -565,  -624,  2044,   102,   366, -1775,    28,  2438,
     635, -3172, -3172,   641, -2092, -1529,   600,  -154,  1628, -3172,
   -3172,  -559, -1357,  -844, -3172, -3172,  -546,   -25, -3172, -3172,
   -3172,  2132,  2566, -3172, -3172,  2915,  3374, -3172,  -686,  4151,
    -433,  -848,  2064,  -932,  2068,  -919,  -930,  -901,  2072,  2074,
   -1531,  5083,  3846,  4476, -2146, -3172,    52, -3172, -1513,    -9,
   -3172, -3172, -3172, -3172, -2761, -3172,  -392, -3172,  -390, -3172,
   -3172, -3172,  -578, -2744, -3172,  6441,  1001, -3172, -3172, -3172,
   -1558, -3172,  5826,   898, -3172, -1979, -3172, -3172,  -996,  -656,
   -1106, -1043, -1232, -1388, -3172, -3172, -3172, -3172, -3172, -3172,
   -1059, -1791,  -341, -2076, -3172, -3172,  1043, -3172, -3172, -3172,
    -780, -1765,  -573, -2054, -3172, -3172, -3172, -2081,  1529,   236,
    -678, -1645, -3172,   943, -2352, -3172, -3172,   567, -3172,  3278,
    -587, -1154, -2441,  2434, -1364,    50, -3172,  3740,   725,  2824,
    2116, -2590, -3172, -3172,  -577, -2686, -1122, -3172, -1459, -3172,
   -3172,   152,  1685,    56, -3172,   154,  1392, -3172, -3172, -3172,
     156, -3172, -3172,   157,   585, -3172,  1065, -3172,   826,   158,
   -3172,  3078,  3010,    18, -3042
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   597,   598,  1877,  1823,  1600,  1258,
    1813,  1509,   599,  2636,  2637,  2638,  2261,  1239,  3543,  2262,
    1240,  1241,  2640,    52,    53,    54,   111,  1269,   600,   601,
     533,   602,  2315,  3249,  2731,  3250,  2395,  2309,  1518,  2392,
    1934,  1853,  1519,   539,  1949,  2732,  2676,  1935,   603,  2625,
    2992,  3536,  2650,  3740,  2928,  2929,  3533,  3534,  2628,  2263,
    3633,  3634,  2709,  1805,  3628,  2337,  3451,  2267,  2249,  2930,
    2346,  3402,  3038,  2264,  2910,  2338,  3528,  1889,  2339,  3529,
    3204,  2340,  1849,  1882,  2629,  3635,  2268,  1850,  2624,  2993,
    1792,  2341,  3540,  2342,   552,  2914,   604,  2701,  1413,   521,
     522,   523,   898,  1392,  1308,  1393,   524,   764,    60,   553,
     605,   826,  1887,   606,  1407,  1869,   607,  1878,   608,  2692,
    2693,   609,   610,  1177,  2578,  2183,   611,   588,   589,   916,
    1456,   590,   899,   612,   925,    69,   771,  1510,   613,  1511,
    1512,  1013,    70,  1601,  1015,  1016,    71,    72,   615,  3284,
    3048,  1421,  1890,  2349,   554,   616,  2582,  2184,  3394,    75,
    2873,  2187,  1202,  2877,  3463,  2868,  2872,  2585,  3575,  3659,
    2874,  2188,  2189,  3464,  2190,   617,   663,  3336,    77,  1865,
    3554,    78,  3258,  3786,  3776,  3777,  3769,  3646,  3023,  3765,
    3743,  3433,  3556,  3024,  3557,  3710,  3434,  3261,  2575,    79,
    3384,  3385,  2181,  2552,  3131,  1723,  2553,  2556,  2178,  1724,
    1725,  2851,  3144,  2857,  3727,  3673,  3494,  2844,  2563,  2564,
    2565,  2566,  3674,  3676,  3495,  3675,  3137,  3138,  2567,  2568,
    2569,  2846,  2847,  2570,  2571,  2862,   618,   619,  1079,  2049,
     620,  1796,   621,  1132,    85,    86,  1051,    87,  3198,    88,
      89,  1771,  1772,  1773,   692,   705,   706,  1575,  2018,   698,
    1206,  1740,   679,   680,  2303,   779,  1843,  1735,  1736,  2194,
    2592,  1764,  1765,  1215,  1216,  2005,  3479,  2006,  2007,  1567,
    1568,  3294,  1752,  1756,  1757,  2215,  2205,  1743,  2465,  3073,
    3074,  3075,  3076,  3077,  3078,  3079,  1133,  2769,  3305,  1760,
    1761,  1218,  1219,  1220,  1769,  2225,    91,    92,  2158,  2534,
    2535,   652,  3090,  1592,  1774,  2773,  2774,  2775,  3094,  3095,
    3096,   653,  1045,  1046,  1069,  1065,  1582,  2027,   654,   655,
    1984,  1985,  2434,  1072,  2021,  2036,  2037,  2782,  1907,   900,
    2250,  1605,  1459,   902,  1134,   903,  1434,  1135,  1438,   905,
    1136,  1137,  1138,   908,  1139,  1140,  1141,   911,  1430,  1142,
    1143,  1449,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,
    1486,  1188,  1775,  1145,  1146,  1147,  1148,  1149,   657,  1150,
    1151,  1687,  2152,  2533,  3083,  3301,  3302,  2823,  3123,  3326,
    3489,  3671,  3721,  3722,  1152,  1153,  1632,  1633,  1634,  2146,
    1681,  1682,  1154,  2997,  1684,  2074,  3086,  3087,  1189,  1561,
    1628,  1310,  1311,  1606,  1533,  1534,  1542,  1959,  1549,  1554,
    1989,  1990,  1562,  2114,  1155,  2055,  2056,  2488,  1614,  1156,
     805,  1315,   806,  1694,  2818,  2149,  1685,  2108,  1165,  1157,
    1166,  1159,  1624,  1625,  2496,  2791,  2792,  2081,  2221,   659,
    1719,  2227,  2228,   921,  1394,  1160,  1161,  1162,  1163,  1164,
     661,  1312,   528,   914,  3660,  1492,  1194,  1313,  1395,  2104,
    1638,   622,   104,   623,    95,   624,  1184,   702,  1185,  1187,
     625,   673,   674,   626,   686,   687,  1602,  1704,  1603,   627,
     100,   688,   694,   628,  3281
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     534,  1158,   920,    58,   534,   781,   782,   765,  1011,   534,
    1225,   918,   658,    63,    73,   534,   534,  1257,   101,  1399,
     534,   534,   534,   767,   780,   534,  1396,   901,   534,   534,
    1066,  1827,   534,  1837,  1604,   534,   534,   763,  1986,  1720,
    1553,  2197,  1445,  1404,  1451,  2156,  2520,  1190,  1513,  1826,
    1508,  1791,  1898,    66,  2522,    74,    94,   526,  1936,   525,
    2073,  2630,   614,    90,  2999,   695,  2536,  2597,  1798,  2040,
    2539,   526,  1840,   656,  1802,  3021,  2995,  1726,  3020,   658,
     658,    90,  2307,   784,   927,  1048,    83,  1074,  1902,   785,
    1068,  1012,   534,  1526,   650,  1529,  1831,   534,   534,   534,
     534,   534,  2666,  2667,  2668,  1259,  1528,  1263,  1691,  1267,
      49,  2623,  2091,  2092,    50,  1697,  2586,    51,    55,    56,
      57,    59,   691,  1176,  1530,  3035,    61,  1921,    62,    64,
      65,  1631,  3039,    67,    68,    76,   798,  2590,   526,   526,
     656,   656,  2790,   708,  2678,  2517,    80,   666,    81,    82,
    2840,  1017,    93,   913,    96,  3337,    97,    98,    99,  1088,
   -1381,   650,   650,  1431,  1432,  -998,  3252,  2891,  3275, -1966,
    -203,  2894,  2162,  1490,  1214,  -203,  2558,  1495,  2220,  -990,
    -661,  3431,  3271,  2321, -1381,  2318,   790, -1966,  -664, -1975,
    1443,  1203, -1378, -1378,  2695, -2106, -2106,  2103,  2437,  2683,
   -1355, -1975,  1963, -1983,  -998,  1701,   540,  1965, -1382, -2115,
   -2115, -2124, -2124, -1983,  -995,   540, -1379, -1379,  -995,  1088,
   -1382,  1217,  3418,  2687,  -957,  -970,  -985,   540,  1838,   540,
    2558,  2217,   537,  2106,  2106,   540,  2106,  1839,  2175,  1783,
    1172,    21,  3208,  1698,  1502,   540,  2176,  2466,   700,  1088,
    3135,  1502,  2554,  3223, -2101, -2101,  1088,    84, -2126, -2126,
    2475,  2127,  2737,  2739,  1647,  2742, -1215,  1179,  1498,  1649,
    3574,  1451,  2558,  3405, -1215,    84,  1088,   835,   649,  1811,
    -661,  3149,  1814,  1815,  1794,  2106,  3150,  1647,  -664,  2143,
   -1236,  1648,  1649,    84,  1396,  1829,  1453,  2144, -1236,     3,
       4,  1657,   766,  2179,   777,  2848,  2849,  2230,  2313,  1453,
    1435,  3524,  2486,  3242,  -619,  1453,  -793,  1453,  3157,  2705,
    3332,  1863,  3333,  3392,  1657,  2776,  3125,  1895,  2446,  3127,
     777,  1816,  1444,  1659,  1786,  1744,  3629,  3276,  3619,  3576,
    2265,  3036,  2269,  2826,  2153,   649,   649,   783,  3762,  3699,
    3159,  3496,  3497,  3277,  3219,  1699,  1659,    84,  2418,   630,
    3149,  2192,  2759,  2932,  3328,  3150,  3330,  1522,  1487,  1794,
    1049,   697,  1963,  2301,  3297,  2223,  1964,  1965,   677,  1745,
    2658,  3205,  2528,  2128,  3550,  3456,    25,    26,    27,  3669,
    1204,  3368,  3241,  3457,   772,  3217,  1396,  3157,  1590,  2903,
    1810,   110,  2129,  2247,  1537,  3661,  1647,  2130,  3753,  1431,
    1432,  2825,  3273,  3149,  2828,  2009,  3441,  3552,  1210,  3670,
    3267,  1076,  1794,  3531,  1443,  3591,  3592,  3270,  1011,  3159,
    2902,  3279,  1077,  1795,  1647,  1180,  2626,  1181,  1648,  1649,
    3149,  2933,  2193,  1657,  2009,  3150,  2131,   822,  2832,  -930,
    3157,  1591,    32,   913,  1963,  2836,  2837,  2838,  1964,  1965,
    3206,   867,   562,  2248,  1068,  3274,  2887,  1728,   775,  1425,
    1627,  1657,  -661,  3630,  3218,  1659,  1048,  3157,   678,  1817,
    -664,  2623,  3159,  2623,  1700,   823,  3532,  1818,  1011,   773,
    1205,    37,  2224,  2154,  3046,   629,  1788,  1212,  1747,  2748,
     631,  1173,  -813,  1659,  2419,  2053,  1516,  1426,  3037,  3159,
    2479,  1050,  2787,  3663,  2420,  3763,  3492,  3620,  1864,  3220,
    3648,   662,  2691,  3651,    39,  2934,  3498,  2447,  3713,  3400,
    1841,   534,  3369,   534,  3470,    42,  1842,  3370,   534,  2302,
     776,   534,  3748,  1619,  -661,  1776,  1777,  3278,  3410,  1801,
     534,  3393,  -664,  1435,  3549,  3416,  2044,  3136,  2383,  1639,
    3631,   904,  1748,  3458,  3295,  1042,  2073,  1444,  3754,  2314,
    2627,  1780,  3712,   825,   767,  3032,  3371,  1174,   897,  1803,
     534,   534,   534,  -930,  2231,  1011,  1011,  3209,  1010,   690,
    1082,  1696,   836,  3141,  1454,   701,  1441,  1442,  2180,  3054,
    3406,  2177,  2132,  3695,  2242,  2107,  2519,  1454,  3351,  2300,
    2674,  2675,  3044,  1454,  3677,  1454,  1789,  1727,   777,  2746,
    1778,   534,   534,   534,   807,  2600,   767,  1884,   658,  2776,
    1729,   534,  3553,  2541,  3063,  1830, -1215,  2555,  2595,   658,
    1014,   534,   534,  1429,  1446,   913,   534,   534,  1821,  2159,
    2054,  1827,  3248,  2999,  2689,  2749,  2697,  3514,    90,  2145,
   -1236,  3432,  -661,  3742,  2588,  2995,  1447,  1779,   767,  2371,
    -664,  2839,  1822,   534,   534, -1381,   534,  -203,  -203,  2217,
    1448,  1893,  3425,  1446, -1966,   784,  3700,   526,  1427,   656,
     534,   785,  2770,  3650,  -990,   538,   534,   703,   526, -1381,
     656,  -661, -1966,  -661, -1975,  1447,  3199,  1980,   803,  -664,
    3649,  -664,   804,   803,  2404, -1355, -1975,   804, -1983,  1450,
    2659,  1041,  1226, -1382,  1715,  3339,  1178,  1404, -1983,  -995,
    1642,   774,  3372,  3340,  1182, -1382,   555,  2678,  1702,  1433,
    1437,  -985,  1692,  3133,  2163,  1183,  3677,  3316,   664,   664,
    3092,  1506,  1507,  3397,  1021,  1899,  1900,  3398,  1506,  1507,
    3736,  1615,  2559,   534,  3259,  1039,   534,  2560,  1455,  1680,
     778,  2870,    58,  2561,  1489,  2562,  1494,  1627,  3232,  3233,
    2884,   102,    63,    73,  2529,  1804,  3179,   101,  3744,  1677,
    1678,  1679,  1680,  1576,  1307,    84,  1391,  3225,   768,  2265,
    2265,  2265,  1178,  1191,  2545,  3230,  1428,  2634,   534,  2871,
    3191,   913,  2300,  3548,   769,   534,   534,   534,   534,   534,
    3246,  3187,    66,  1647,    74,    94,  1087,  3260,  2448,  1963,
     103,   534,    90,  1964,  1965,  2945,   801,  1966,  1967,  1968,
    2545, -2100, -2100,  2352,  1469,  1470,  3744,  2277,  2445,  1874,
    2885,  1801,    84,   766,   770,    83,  3490,  2280,  3491,  1396,
    2283,   904,  3176,  3177,  3178,  3179,  3563,  1210,  2460,  2461,
    2462,  3564,  1975,  1976,  1977,  1978,  1979,  1980,   897,    49,
     901,  3251,   786,    50,  2449,  2445,    51,    55,    56,    57,
      59,  1741,  1659,  2010,  1028,    61,  1909,    62,    64,    65,
    2410,  1995,    67,    68,    76,  1040,  1923,  3193,  1576,  2030,
    3149,   918,  1920,  1011,  2160,    80,  1396,    81,    82,  1986,
    1926,    93,  2509,    96,  2493,    97,    98,    99,  1055,  1936,
    2247,  2438,  1803,  2073,  1675,  1676,  1677,  1678,  1679,  1680,
    3174,  3175,  3176,  3177,  3178,  3179,  1212,   766,  1821,   783,
     811,  2510,   812,  3020,  2052,  1627,  1977,  1978,  1979,  1980,
    2454,  3656,   820,  2077,  1473,  1474,  1056,  1573,  2393,  3737,
    2391,  2796,  1822,  3751,  1583,   913,   803,  1696, -1355,  3159,
     804,  1244,  1577,  2375,  2089,  1803,  2377,  2379,   765,  1928,
    2620,  -673,  1446,  1058,  1213,  1024,  1012,  2376,  3578,  2001,
    1742,  1245,  2906,  2720,  2912,  -673,   913,   913,  1010,  2724,
    -673,  2631,  2726,  3403,  1447,  2378,  2380,  2381,   763,  1969,
     534,   534,   913,   534,  1210,   540,    84,  2450,  3783,  1211,
    2275,  2913,   534,   534,  2999,  1744,   534,   821,   775,  1794,
    3270,   658,  1970,  1055,  2542,  1246,  2995,  2543,   658,  1827,
    1797,  3116,  -738,   904,  3417,  3544,  1639,  -738,  3738,   534,
    1825,  1922,  1922,  -673,  2296,  2297,  2298,  2669,  1010,  1307,
     897,  3443,  2606,  2511,   534,  1463,  1464,  3352,  2512,  1745,
      90,  1056,  2109,  3791,  -673,  3739,  3356,   542,  2093,   802,
    3796,  2239,  2546,  2547,  2907,  2328,  2595,  1585,   815,  2398,
     526,  1930,   656,  1212,  2399,   767,  1088,   526,  1058,   656,
     776,  1446,  1971,  1832,  1524,  1611,   540,   690,  2276,  2660,
    2632,   534,  1062,   650,  1446,  3444,   816,  2805,  2546,  2547,
     650,  -738,  -673,  1447,  3445,   822,  3770,  2286,  1804,  1578,
    2841,  -673,  2293,  1247,  1469,  1470,  1447,  1448,  1746,  2115,
    2842,  1213,   827,   543,  2359,  1579,  3446,  1722,  1631,  2908,
    1450,  1586,  2909,  2400,  2654,  1010,  1010,   534,  1231,   828,
     534,  1803,  2548,   823,  1232,  2549,  2382,  2655,  2116,  -738,
    2384,   831,  2706,  2386,   534,   534,  2711,   763,   777,   832,
    2265,  1804,   534,  1248,  2269,   833,  3000,  2841,  1747,  1732,
    1733,  1249,  1739,   834,  1801,   785,   785,  3132,   785,  3527,
     824,  2549,  2550,  1250,   913,  1994,   837,  1996,  1997,   904,
    1461,  1462,   534,   534,  3059,  2853,  1932,  2854,  1178,   820,
    3505,  1088,  2513,  3447,  2251,   534,   897,  1062,  2356,   838,
    2855,  2856,  2278,  2514,  1231,  1251,  3448,  2281,  2550,   813,
    1232,   814,   534,  2598,  1578,  2551,   534,  1801,  1088,  3506,
     534,   825,  1748,  1307,  1473,  1474,  1167,  1168,   839,  1170,
    2003,  -737,  1307,   542,    84,  2004,  -737,  1233,  3189,   540,
    1234,  3725,  1402,  3192,   840,  1403,  3726,  3515,  1828,  1500,
    3586,  2551,  1501,  -673,  3517,  2117,  1307,   924,  1803,  1835,
    2118,  1253,  1463,  1464,   821,  2119,  1022,   649,  2760,  2761,
    2762,  2763,  2397,  1023,   649,  2771,  2401,  2831,  2778,  2403,
    1024,  2833,  2834,  2835,  1254,  1972,  1973,  1974,  2073,  1975,
    1976,  1977,  1978,  1979,  1980,   547,  1025,   548,  1713,   543,
     778,  1714,  2443,  1035,  2633,  1256,  2634,  1612,  1011,  2368,
    -737,   803,   542,  1233,  1018,   804,   664,  2344,  1616,  2345,
     913,   803,  3058,   551,  1196,   804,  1026,  1465,  1466,  1467,
    1468,  1469,  1470,  1030,  2635,  1471,  1472,  1804,  1570,  2043,
    1033,  3507,  2044,   904,  1629,  2537,  3508,  1075,  2045,   803,
     534,  2046,  2405,  1695,   534,   534,  1594,  1034,  -737,  1597,
     897,   534,  1858,  2455,  2411,  2456,   542,  2147,  1169,  2943,
    1868,  2148,  1036,   534,   904,   904,  3107,  1037,   543,  3596,
    1870,  1871,  2733,  3597,  1584,  1872,  2657,  2936,  1589,  1073,
     904,   897,   897, -1429,  2439,  1244,  1858,  1234,  1038,  2900,
    1859,  2444,  2310,  1801,   534,  2311,    21,   897,  3449,   534,
    2457,  3450,  2458,  1803,  1011,  1245,  2507,  1071,  2360,  2120,
    3696,  2046,  2366,   783,   783,  2367,   783, -2097, -2097,  3015,
    2121,  2935,   543,  2944,  1859,   913,  2645,  1860,  2647,  2478,
     534,   534,  2478,  1391,  1080,   534,   534,  2482,   534,   534,
    1081,  1473,  1474,  1010,  2022, -2098, -2098,  2024,  1631,  1246,
    2369,  1236,  2028,  2367,  1804,  2031, -2099, -2099,  1738,  1391,
    2035,  3263,  2642,  1234,  2644,  1039,  2722,  2723,   913,  2387,
    1078,   547,  2388,   548,  2431,  2327,  3691,  2432,  1861,   105,
     913,  1237,  2476,  2480,  2686,  2477,  2477,  3386,  2648,  1083,
    3509,  2649,   658,  1803,  3760,  1014,  3357, -2102, -2102,   551,
    1403,  3510,  2652,  2609,  2714,  2653,   534,  2044,   534,  1231,
     913,   534,  1861,    90,  3714,  1232,   534,   913,   658,  2939,
    1801,   658,  1231,  1235,  1231,  3358,   658,  1236,  1232,   658,
    1232,  2661, -2103, -2103,   658,  3749,  3750,   534, -2104, -2104,
     534,    25,    26,    27,  1082,  2783,  2879,  1247,  2477,  2880,
     547,   526,   548,   656,  1238,   913,  3031,  1237,   913,  2311,
     534,  1475,  1476,   913,  3052,   534,  1171,  3053,  1231,    21,
   -2105, -2105,   904,  3060,  1232,  1231,  3061,   526,   551,   656,
     526,  1232,   656,  3108,  1192,   526,  2046,   656,   526,   897,
     656,  3782,  3759,   526,  1175,   656,  3129,  1248,  1391,  3130,
     650,   534,  1186,   650,   547,  1249,   548,    32,   650,  1804,
    2047,   650,  2048,  2051, -2107, -2107,   650,  1250,  1233,  3289,
      90,  2665,  3185,  3290,  1193,  3186,  2046,   542,  3781,   550,
    1238,  1233,   551,  1233,  1307,  2595,  3291,  1391,  2991,  2477,
    1195,   112,  3359,  2050,   536,  1200,    37,  3360,  1196,  1251,
     106,   591,  3361,   534, -1429,   534,   540,   534,  3319,   107,
    3324,  2046,  2916,  2044,  3424,  1197,   676,  2311,  3200,  2943,
     689,  3467,   534,   534,  2046,  1801,  2916,  1233,  3520,    39,
    1201,  3521,  2917,  2199,  1233,  3572, -2108, -2108,  3573,   785,
      42,  1515,  2156,   543,  3618,  2918,   108,  3573,  3622,  1804,
    1535,  3623,  2899,  2919,  2901,  1253,    43,    84,  1183,  1207,
     534,  1209,   534,  1208,    25,    26,    27,  2919,   904,  2920,
   -2109, -2109,  3642,  3465,  3118,  3643,   534,   534,  1254,  3247,
      44, -2110, -2110,  3682,  2251,   897,  2046,   534,   534,   534,
     534,  1391,   534,  1391,   690,  1227,   926,   109,   534,  1256,
     534,  1515,  1011,  3730,  3747,  1228,  2046,  3573,  2729,   541,
    2160,   534,   534, -2111, -2111,  1801,   534,   534, -2112, -2112,
    1229,   534,   534,   534,   534,  1230,   534,   534,  1234,  3778,
      32,  1242,  3643,  1307,   649,  3779,  3792,   649,  3780,  1494,
    1243,  1234,   649,  1234,  1260,   649,   534, -2113, -2113,  1264,
     649,   534,   534,   534,   534,  1268,  3362,  1397,   534,  1641,
    1398,  2921, -2114, -2114,    84, -2116, -2116,  3363,  1644,    37,
   -2117, -2117,  1400,   534,  1406,   546,  3386,  1401,  1307,   542,
    3465, -2118, -2118,   904,  1408,  1693,  1409,  1234,  1261, -2119,
   -2119,  1420,  1236,  1422,  1234,  3014,  1703,  1423,  1515,  1515,
     897,  1265,    39,  2238,  1429,  1236, -1429,  1236, -2120, -2120,
     913, -2121, -2121,    42,  1391,  3408, -2123, -2123,  3026,  2113,
    2923,  3042,  1262, -2125, -2125,   547,   904,   548,  1010,  2922,
   -2127, -2127,  2893,  1436,  2923,  1266,  1433,  1237,   904,  1437,
    2467,  1439,  3530,   897,   549,   543,  2470,  2284,  1844,  1845,
     550,  1236,  1440,   551,  2291,   897,  2218,  2219,  1236,  -788,
    -788,  1471,  1472,  3715,  1452,  3716,  2335,   690,   904,  2924,
    3228,  1457,  1473,  1474,  1458,   904,  -792,  -792,  1460,  -791,
    -791,  2285,  1488,  2924,  1491,   897,  3051,  2925,  2292,  1493,
    2579,  1496,   897,  1499,   534,  1238,  1497,   783,   544,  1707,
    1709,  2925,  2546,  2547,  3196,  3197,   534,  1517,  1238,  1520,
    1238,  1523,  1551,   904,   658,  1564,   904,  1566,  1569,  1574,
     658,   904,  1580,  1581,  1587,  1588,   534,  1598,  1593,  1599,
     897,   534,  1607,   897,  1010,  1608,  1307,  1610,   897,   545,
    -961,  -968,  3422,  -958,  1615,   690,  -813,    21,  -814,  3312,
    -959,  1618,  3771,  -962,  1238,  1619,  -960,  1623,  1636,  1637,
    3465,  1238,  1640,  1686,  1688,  1690,  2595,  1705,  1716,  1717,
     534,  1721,  1730,   526,   534,   656,  1631,   546,   534,   526,
    1731,   656,   913,  1211,  1770,  2733,  1766,  1781,  1213,  2926,
     767,  1768,  1799,  1800,  1801,  2996,   650,  1807,  2927,  1806,
    1808,  1812,   650,  2926,  1819,  1852,  1820,  1824,  1834,  1847,
    1848,  1854,  2927,  1461,  1462,  1866,   534,  1867,  1876,  1880,
    1879,  1881,  1883,  3606,  1885,  1892,  1855,   547,   561,   548,
    2330,  1886,  1894,   561,  1088,  1901,  1911,    84,  1445,  1903,
    1391,  3465,  1722,  1904,  1912,   561,   549,  1915,   658,  1916,
    1917,  1918,   550,  1922,  1927,   551,  3482,  1952,  1954,   561,
     561,  1955,  1957,   534,  3530,  1960,  3050,  1983,  1992,  1991,
    1999,  2020,   763,   658,  2002,  2023,  2029,  2032,   534,  2034,
    2580,  2033,  2039,  1647,  2054,  2042,  3546,  2083,  2080,  2085,
    2086,  2087,    25,    26,    27,  1463,  1464,  2105,  2112,  2124,
    2088,  2150,  2123,  2126,  3097,  3237,  3238,   526,  2171,   656,
    2151,  2157,  2174,  2182,  2172,  2173,   776,  3681,   534,  2198,
    2207,   913,   561,  2195,   534,  2208,  2047,  2209,  2048,  2051,
     650,  2210,   526,  2212,   656,  2229,    90,  2211,  2233,  2240,
     534,  2234,  2237,  2244,  2245,  1950,  2246,  2308,  2317,   777,
    1391,  1391,  1391,  2319, -1861,   650,  2312,  2329,    32,  2050,
    1465,  1466,  1467,  1468,  1469,  1470,  2331,  2325,  1471,  1472,
    2583,  2332,  2333,  2347,  2348,  2353,  2350,  2991,  2354,  2355,
     649,  2357,  2361,  2358,  2362,  2363,   649,  2394,  2364,    21,
    2365,  1307,   913,  2373,  2374,  2385,  2402,    37,  1988,  1963,
    2433,  1987,  2471,   534,  2440,  2441,  2442,   767,  2453,  2451,
    2452,   534,  2464,  2469,  2334,  2483,  2508,   913,   904,  2524,
    2503,  1868,  2484,   534,   534,   534,   534,  2490,   534,  2491,
      39,  1870,  1871,  2492,    21,   897,  1872,  2501,  2515,   534,
    3214,    42,   534,  2525,  2530,  2531,  2532,   534,  2557,  2574,
    2577,  2584,  2587,  -794, -1861,  2589,  2591,    43,  2601,   534,
    2605,  2602,  2608,  2604,  2612,  2613,  2616,  2619,  2622,  1629,
    2614,   913,  2641,  2618,  2643,  2656,  2662,   534,  2663,  2664,
    1391,    44,  1010,  2670,  1473,  1474,  2671,  2113,  3236,  2680,
    2672,   534,   534,  2673,   534,  2581,  2684,  2685,  2688,  1827,
    2690,  2703, -1861,  2526,  2700,  2704,  2708,  2160,  2712,  2717,
    2719,  2707,  2736,  2727,   649,  2728, -1861,  2767,  2747,  2768,
    2744, -1861,  3389,   658,  2779,  2750, -1861,  2164,  2754,  2753,
      84,  2781,  2803,  3411,    25,    26,    27, -1861,  2786,   649,
    2794,    84, -1861,   534,  2755,  2756,   559,  2788,  2801,  2804,
    2817,   592,   534,   534,   534,  2822,  2816,  2807,  2865,  2867,
    2829,   534,  2824,   668,   534,  1011,  2850,  2876,  2819,   534,
    2888,  2869,   767,  2886, -1861,  2830,  2890,   707,   707,    25,
      26,    27,   526,   534,   656,  2892,  2898,  2931,  2904,  2905,
     904,  2911,  3022,  3011,  3012, -1861,  3013,  2947,  3018,  3033,
      32,  3029,  3041,   767,  1475,  1476,  3030,   897,  3034,  2311,
    3047,  3049,  3056,  3057,   913,  3062,  3088,  3143,  3082,  3084,
    3093,  2777,  3184,  1722,  2845,  3181,  3099,  3188,  3100,  3119,
    2845,  3126,  3139,  3134,  3142,  3140,  3190,  3194,  3484,    37,
     794,  3182,  3207, -1861,  3203,    32, -1861,  3195,  3211,   913,
    3221,  3201, -1861,   763,   763,  3202,  2058,  3212,  3224,   767,
     763,  3213,  3226,  2059,  2060,  3227,  3231,  2061,  2062,  2063,
    3243,  3254,    39,   534,  3262, -1378,   534,  3264,  3257,   534,
   -2096,  3268,  3353,    42,    37, -2097,   766,  3244, -2098, -2099,
    3342, -2100, -2101,  3668, -1861, -2102,   534, -2103,  3245,    43,
     534,    21, -2104, -2105,   534,   534,   534, -2107, -2108, -2109,
     534,   534,   534, -2110,   534, -2111,  3265,    39, -1861, -2112,
    3272,  3280, -2113,    44,   913, -2114, -2116, -2117,    42,   904,
    3481, -2118, -2119,   534, -2120,   534,  3253,   690,  3282,  3283,
    3471,  1391,  3473,  3292,    43,  1391,  2994,  1391,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,  2991,  1244,
   -2121,  1515, -2122, -2123, -2124,  2396,  3286, -2125,    44, -2126,
   -2127, -1379,  3296,  3293,   561,  3298,   697,   534,  3304,  1245,
     534,  3300,   690,   534,  2996,  3306,  3310,  3483,    21,  3307,
    3486,  3311,  1868,  3313,  3318,  3323,   534,  3149,  3338,  3350,
     904,  3365,  1870,  1871, -1861,   561,   561,  1872,  3341,   534,
    3367,  3387,  3396,  3399, -1861,  3590,   913,   897,   906,  3401,
    3413,  3414,  3421,  1246,  3423,   904,  3429,  3430,   534,  3435,
    3438,  3439,  3442, -1861,  3453, -1861, -1861,  3621,  3455,  3454,
    3469,  1573,   897,  3476,  3468,   534,    25,    26,    27,  3472,
     767,  1629,   534,   534,   534,   534,  3625,  3478,  3475,  3488,
    3485,  3493,  3500,  2841,  3504,  3519,  3523,  1515,  3511,  3525,
    3019,   534, -1861,   534,  3539, -1861, -1861, -1861,  3220,   904,
    1087,  3535,  1629,  1963,  3541,   534,  3542,  1964,  1965,  3545,
    3558,  1966,  1967,  1968,  3560,  3566,   897,  3567,  3043,  3568,
    3574,  3045,  3577,  3579,  3584,  3589,  3581,  3587,  3585,  1307,
     913,  3122,    32,  3595,   534,   658,  1646,  3598,  3604,  1647,
     561,  1247,  3616,  1648,  1649,  2777,  3605, -2128, -2128, -2128,
    3624,   527,   535,    25,    26,    27,   560,  3627,   766,  3614,
    3638,   560,  2594,  3632,  3639,   660,  3640,   665,   665,  3641,
    3644,    37,   667,   560,   672,  3645,  1657,   672,  3662,  3652,
     693,   696,  3647,  1658,   696,  3653,  3654,   560,   560,  3664,
    3666,  1248,   534,  3667,   526,  3692,   656,  3698,   534,  1249,
    3701,  3703,  3709,  3706,    39,  3728,  3724,  3729,  1659,  3699,
     534,  1250,  3700,  3745,  3746,    42,   534,   650,  3752,    32,
    3761,  3764,  3772,  3766,  3774,  3775,  3785,  3787,  3793,   534,
     534,    43,   660,   660,  3798,  3234,  2946,   534,  2950,  1198,
    2639,  2271,   904,  1251,   693,  2168,   563,  2679, -1863,   696,
     560,   696,   696,   696,   534,    44,  1052,  1020,    37,   897,
    2730,    84,  1053,  3287,  3016,  3636,   564,  3741,  3409,   690,
    3697,  3704,  3735,  3452,  2621,  1790,  2646,   904,    38,  3694,
    2915,  3702,  2951,  2617,  3040,  1862,  3693,  1919,  2882,    84,
    1929,    39,    84,  2232,  2994,  1897,  3570,  3391,  2881,  1253,
    3657,  3522,    42,  3734,  3551,  1660,  3794,  3800,  3428,  2651,
    3784,  3773,   830,  3708,  3767,  3797,  1970,  3658,    43,  1054,
    3615,  2843,  1254,   565,  1661,  1027,  2572,  3499,  3593,  1662,
     534,  2573,  3331,  3757,  2852,  3758,  2607,  2544,   906,   566,
    2593,  2236,    44,  1256,   923,  1718,   534,  1763, -1863,  1629,
     567,  2758,   904,  1571,  2677,  1572,   690,  1762,  3580,   534,
    3665,  2603,  2681,  2204,  3474,  1010,  2235,   651,  1665,   897,
     767,  2576,  3315,  1767,  2694,  2064,  2065,  2066,  3091,  2067,
    2068,  2069,  2070,  2071,  2072,  2996,  1971,  2752,  2473,   568,
    1043,  1055,  2751,  1538,   534,  1029, -1863,  2780,   913,   569,
     534,   649,  3415,  3582,  1307,  1910,  3583,  2499,   534,  1525,
   -1863,   570,  3723,  1527,  2596, -1863,   571,  1531,  2487,  1532,
   -1863,  2011,  1668,  3183,  2538,  2827,  2167,  2481,   675,  1056,
     791, -1863,     0,     0,   534,  1515, -1863,     0,     0,  3269,
    2734,     0,  2735,     0,   904,  1057,  2740,   572,  2743,     0,
     763,     0,     0,     0,     0,     0,  1058,     0,   707,     0,
       0,   897,     0,     0,     0,     0,     0,     0, -1863,     0,
       0,   534,   907,     0,     0,     0,     0,     0,     0,     0,
    1565,     0,     0,     0,     0,     0,     0,     0,  1059, -1863,
       0,   573,   913,     0,     0,   574,     0,     0,   534,     0,
       0,     0,     0,  1596,     0,     0,   534,    21,     0,     0,
     534,   913,     0,     0,     0,     0,     0,     0,  3790,     0,
       0,     0,     0,     0,  1670,     0,     0,     0,     0,     0,
     906,     0,     0,     0,     0,  1060,   534, -1863,   904,     0,
   -1863,     0,  1061,     0,  3436,     0, -1863,     0,     0,     0,
       0,     0,     0,     0,     0,  2994,   534,   534,     0,     0,
       0,     0,     0,     0,   575,  1635,     0,     0,     0,   534,
       0,     0,     0,     0,   763,   534,     0,   534,     0,     0,
     534,   577,     0,     0,     0,  1062,     0,     0, -1863,     0,
    3388,  3390,     0,     0,     0,   534,     0,   658,     0,  1972,
    1973,  1974,  1063,  1975,  1976,  1977,  1978,  1979,  1980,     0,
      84,     0, -1863,     0,     0,   578,     0,     0,   579,     0,
       0,     0,   534,   534,     0,     0,   534,   580,   561,   561,
     581,     0,  1671,     0,     0, -2128, -2128, -2128,   699,  1675,
    1676,  1677,  1678,  1679,  1680,     0,   763,   763,     0,  1629,
     582,     0,    25,    26,    27,     0,   526,     0,   656,     0,
    3426,  3427,     0,     0,   583,     0,     0,     0,     0,     0,
     697,   584,     0,  1064,     0,     0,     0,     0,     0,     0,
       0,   585,     0,   696,     0,   696,     0,   586,     0,     0,
     696,     0,     0,   696,     0,     0,   906,     0, -1863,  2998,
       0,     0,   560,   793,   658,   796,     0,   800, -1863,     0,
       0,   534,     0,  1391,  3555,   587,     0,  3559,    32,     0,
       0,     0,     0,     0,  2677,  3017,     0, -1863,     0, -1863,
   -1863,     0,   917,   560,   560,     0,     0,     0,     0,  2113,
       0,     0,     0,     0,   763,     0,     0,   763,     0,     0,
     534,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,    84,    84,   526,     0,   656, -1863,     0,     0, -1863,
   -1863, -1863,   907,  1019,   535,   665,     0,     0,     0,     0,
       0,   527,     0,   696,     0,     0,     0,   534,  1937,     0,
      39,     0,   660,  1047,  1047,     0,     0,     0,  1047,  1070,
       0,    42,     0,     0,     0,     0,   904,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,     0,
       0,   909,  1693,   897,     0,   672,   672, -1877,   672,     0,
       0,    84,    84,  1938,     0,   534,     0,     0,     0,  1244,
       0,    44,   696,     0,     0,  3562,     0,     0,   560,     0,
    1646,     0,  1939,  1647,     0,   690,     0,  1648,  1649,  1245,
     906,  3565,     0,     0,     0,  3569,     0,     0,     0,     0,
       0,     0,   534,  1940,  3128,     0,     0,  1941,     0,     0,
       0,     0,     0,     0,   658,     0,   534,   534,   534,     0,
    1657,   906,   906,     0,     0,     0,   534, -2128,     0,  1942,
     904,     0,  1943,  1246,  2937,     0,     0,   906,   763,   763,
       0,     0,  2938,     0,     0,   696,     0,   897,   696,   904,
    1944,     0,  1659,  3707,     0,  3555,   534, -1877,     0,   561,
     561,     0,   561,     0,     0,  1391,  2994,     0,     0,     0,
       0,     0,     0,   526,     0,   656,   707,  2113,     0,     0,
       0,     0,     0,   763,     0,   763,     0,   534,     0,   534,
     696,     0,     0,     0,   907,   658,     0,   696,   696,   696,
     696,   696,     0,  2939,     0, -1877,     0,     0,     0,     0,
       0,     0,     0,   696,     0,     0,     0,     0,  2506, -1877,
       0,     0,     0,     0, -1877,     0,     0,     0,     0, -1877,
       0,  1247,     0,     0,   534,   561,     0,     0,     0,     0,
   -1877,     0,     0,  1945,     0, -1877,    84,     0,   534, -2128,
       0,  1946,  3690,     0,   526,   534,   656,  3555,  3768,     0,
       0,  2038,    84,     0,  2041,     0,    84,     0, -2128,     0,
     763,   763,  1947, -2128,     0,  3705,     0, -1877,     0,     0,
       0,  1248,     0,     0,     0,     0,     0,   763,   763,  1249,
       0,     0,  3789,     0,     0,     0,     0,     0, -1877,     0,
       0,  1250,  1948,     0,  2940,  3266,   534,     0,     0,     0,
    3799,     0, -2128,     0,     0,     0,     0,     0,     0,   534,
       0,     0,   763,     0,     0,     0,     0,   534,  1515,   906,
       0,     0,     0,  1251,     0,     0,   534,     0,     0,     0,
     763,     0,     0,     0,     0,     0, -1877,     0,     0, -1877,
       0,   909,     0,     0,     0, -1877,     0,     0,     0,     0,
     907,     0,     0,     0,     0,     0,  1668,   808,     0,   810,
       0,     0,     0,     0,   818,  1087,     0,   819,  1963,     0,
       0,     0,  1964,  1965,     0,     0,  1966,  1967,  1968,  1253,
       0,     0,     0,     0,     0,     0,     0, -1877,     0,     0,
       0,  3329,  1047,  1070,  2798,   696,     0,     0,  1550,     0,
       0,     0,  1254,     0,  1047,  1047,     0,     0,   560,     0,
       0, -1877,     0,    84,   660,     0,     0,     0,     0,     0,
       0,   660,     0,  1256,     0,  2941,   561,     0,  2942,     0,
       0,   560,     0,     0,     0,     0,    84,     0,     0,     0,
       0,   561,     0,     0,     0,     0,  1609,     0,     0,     0,
       0,   561,     0,   561,     0,     0,   561,  1032, -2128,     0,
       0,     0,   561,     0,   561,   906,     0,     0,  1924,   697,
    1925,  1087,     0,     0,  3149,     0,   561,     0,     0,  3150,
       0,   561, -2128, -2128, -2128,   561,   561,   561,   561,     0,
     561,   561,     0,   560,     0,     0,     0, -1877,     0,     0,
     910,     0,     0,     0,     0,     0,     0, -1877,  2998,     0,
       0,  3157,     0,     0,   907,     0,     0,     0,  3158,     0,
       0,     0,     0,     0,     0,     0, -1877,     0, -1877, -1877,
       0,     0,  1087,   909,     0,  3149,     0,  1801,  1052,  1710,
    3150,     0,  1712,  3159,  1053,   907,   907,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   560,   560,     0,  1087,
       0,   907,  3149,     0,   696, -1877, -2128,  3150, -1877, -1877,
   -1877,     0,  3157,  1675,  1676,  1677,  1678,  1679,  1680, -2128,
     906,  1970,     0,     0,     0,     0,  1550,     0,     0,  1199,
       0,     0,     0,     0,   696,  1793,     0,     0,     0,  3157,
       0,  1054,     0,     0,  3159,     0, -2128,   696,     0,     0,
       0,     0,     0,     0,  1646,     0,     0,  1647,     0,     0,
       0,  1648,  1649,   906,   696,  1652,  1653,  1654,   696,     0,
       0,  3159,  1836,     0,  1405,   906,     0,     0,     0,     0,
    3160,  1411,  1414,  1416,  1418,  1419,     0,     0,     0,     0,
       0,  1971,     0,     0,  1657,     0,     0,  1424,   561,  3161,
       0,  1658,     0,     0,  3162,   906,     0,     0,     0,     0,
    3503,     0,   906,  1055,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1221,     0,     0,  1659,     0,  3547,     0,
    2474,     0,     0,     0,     0,  2041,     0,  3512,     0,   909,
       0, -2128,     0,  3165,     0,     0,     0,     0,     0,     0,
     906,  1056,     0,   906,     0,     0,     0,     0,   906,     0,
   -2128,     0,     0,     0,     0, -2128,     0,  1057, -2128,     0,
       0,     0,  1087,     0,   561,  1963,     0,     0,  1058,  1964,
    1965,     0,  1635,  1966,  1967,  1968,     0, -2128,     0,     0,
       0,     0, -2128,   907,     0,     0,     0,  1971,     0,  2243,
       0,  2799,  1851,     0, -2128,     0,   696,   696,     0,  2252,
    1059,  2255,     0,   696,  2266,     0,     0,     0,     0,     0,
    2270,     0,  2272,  1660,     0,  1891,     0,     0,     0,     0,
       0, -2128,  1222,     0,  2279,     0,     0,     0,     0,  2282,
     910,     0,  1661,  2287,  2288,  2289,  2290,  1662,  2294,  2295,
       0,     0,     0,     0,     0,     0,  1908,  1060,  1971,     0,
       0,  1908,     0,     0,  1061,     0,     0,   561,     0,     0,
    1663,  1664,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1971,  1665,     0,     0,  1540,
       0,     0,   917,   917,     0,     0,     0,   560,   560,  3169,
     560,   917,     0,   909,  1972,  1973,  1974,  1062,  1975,  1976,
    1977,  1978,  1979,  1980,     0,     0,     0,     0,     0,     0,
       0,     0,   561,  1666,  1063,     0,  1667,     0,  2611,  2998,
       0,     0,     0,     0,   909,   909,     0,     0,     0,   907,
    1668,     0,     0,     0,     0,     0,     0,  1550,  1550,     0,
     909,     0,  1550,     0,     0,   527,     0,     0,     0,     0,
   -2128,     0,     0,     0,     0,     0,     0,     0,  1047,     0,
    2008,  3329,     0,   560,     0,     0,     0,     0,   696,     0,
       0,   660,     0,     0,   660,     0,     0, -2128,  1970,   660,
       0,     0,   660,     0,     0,  1064,     0,   660,     0,   560,
    1223,     0,   560,     0,     0,     0,     0,  3170,     0,     0,
   -2128, -2128, -2128,     0,  3174,  3175,  3176,  3177,  3178,  3179,
       0,     0,  2075,     0,     0,     0,     0,  2079,     0,     0,
     561,     0,   910,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   907,   906,     0,     0,  1971,     0,
       0,     0,     0,   917,     0,     0,     0,     0, -2128,     0,
       0,     0,     0,     0,     0,  3174,  3175,  3176,  3177,  3178,
    3179,     0,     0,     0,     0,     0,     0,     0,  1782,     0,
       0,     0,     0,  1461,  1462, -2128,     0,   907,     0,     0,
       0,  1809,  3174,  3175,  3176,  3177,  3178,  3179,     0,   907,
       0,     0,     0,     0,     0,  2165,     0,   696,     0,   696,
       0,     0,  1833,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   696,  2191,     0,     0,     0,   907,
       0,     0,   909,     0,     0,     0,   907,  1550,     0,     0,
    1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,
    1678,  1679,  1680,     0,     0,   561,     0,     0,   561,     0,
       0,     0,   696,  2038,   560,  1463,  1464,     0,     0,     0,
       0,     0,     0,     0,   907,  1924,     0,   907,  1793,   560,
       0,     0,   907,     0,     0,     0,     0,     0,   910,   560,
    2253,   560,  2257,     0,   560,     0,     0,     0,     0,     0,
     560,     0,   560,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   917,   560,     0,     0,   906,   917,   560,
       0,     0,     0,   560,   560,   560,   560,     0,   560,   560,
    1465,  1466,  1467,  1468,  1469,  1470,     0,     0,  1471,  1472,
       0,     0,     0,     0,     0,     0,     0,     0,   696,     0,
    1856,  1857,     0,   696,   696,   696,   696,  1875,     0,     0,
     696,  1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,  1979,
    1980,     0,     0,     0,     0,  2343,     0,     0,   909,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,   561,   561,
     561,  1087,     0,     0,  1963,     0,     0,   912,  1964,  1965,
       0,     0,  1966,  1967,  1968,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1514,   561,     0,     0,
    3110,     0,     0,     0,     0,     0,     0,     0,  2699,     0,
       0,     0,   561,   561,   561,   561,   561,   561,   561,   561,
     561,   561,   910,     0,  1473,  1474,   906,     0,  1550,  1550,
    1550,  1550,  1550,  1550,     0,     0,  1550,  1550,  1550,  1550,
    1550,  1550,  1550,  1550,  1550,  1550,     0,     0,  3145,  3146,
    3147,  3148,     0,   910,   910,     0,  1514,     0,     0,     0,
       0,     0,     0,   909,     0,     0,   560,  1646,     0,   910,
    1647,     0,     0,     0,  1648,  1649,     0,     0,   696,     0,
       0,     0,     0,     0,     0,     0,     0,   660,     0,     0,
       0,     0,  2019,   660,     0,     0,     0,   906,   560,     0,
       0,     0,     0,   560,     0,     0,   909,  1657,     0,  2038,
       0,     0,     0,     0, -2128,     0,     0,     0,   909,     0,
    1545,     0,   906,  1643,     0,     0,     0,  1052,     0,     0,
       0,     0,     0,  1053,     0,  2474,     0,     0,     0,  1659,
       0,     0,   560,     0,  1475,  1476,  2497,     0,   909,   907,
     560,  1514,     0,  1514,  1514,   909,     0,     0,     0,     0,
       0,     0,     0,     0,  1477,     0,     0,     0,     0,     0,
       0,  1550,  1550,     0,     0,     0,   906,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1970,  2075,     0,
    1054,     0,     0,   909,     0,     0,   909,     0,     0,     0,
       0,   909,     0,     0,     0,  2516,     0,     0,     0,     0,
       0,  1087,     0,     0,  1963,     0,     0,     0,  1964,  1965,
       0,   660,  1966,  1967,  1968,  1514,     0,     0,  1514,  1514,
       0,  2166,     0,  2169,     0,   560, -2128,     0,     0,     0,
    3111,     0,     0,     0,     0,     0,   660,     0,  2185,     0,
    2191,     0,     0,     0,     0, -2128,     0,  1971,     0,     0,
   -2128,   910,  1055,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1087,     0,   561,  1963,     0,   912,     0,  1964,
    1965,     0,     0,  1966,  1967,  1968,  2222,  2895,  2896,     0,
     560,     0,     0,  1550,     0,     0,   560,     0,     0, -2128,
    1056,  3600,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1851,     0,     0,  2948,  1057,     0,     0,   906,
       0,   907,     0,     0,     0,     0,     0,  1058,     0,     0,
    3001,  3002,  3003,  3004,  3005,  3006,  3007,  3008,  3009,  3010,
    3343,  3344,  3345,  3346,  3347,  3348,  3349,     0,     0,     0,
    3354,  3355,     0,  1668,   906,  3364,     0,     0,  3366,  1059,
       0,  3373,  3374,  3375,  3376,  3377,  3378,  3379,  3380,  3381,
    3382,     0,  2316,     0,     0,  1851,     0,  2320,  2322,  2323,
    2324,  2025,     0,   696,  2326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1851,   696,   696,   560,     0,
     696,     0,     0,     0,     0,     0,  1060,   910,     0,     0,
       0,   696,     0,  1061,   696,     0,     0,  1896,     0,   696,
       0,     0,     0,     0,     0,     0,     0,  1970,  1905,   906,
    1906,  2725,     0,     0,     0,     0,     0,     0,     0,     0,
    1913,     0,     0,     0,  3309,     0,     0,     0,     0,   917,
       0,     0,  2474,     0,     0, -2128,  1062,  1914,     0,     0,
     907,     0,     0,  1851,  1851,     0,  1851,     0,     0,   912,
    1972,  1973,  1974,  1063,  1975,  1976,  1977,  1978,  1979,  1980,
       0,     0,     0,     0,     0,     0,  1931,  1933,  1970,     0,
       0,     0,     0,     0,     0,     0,   527,  1971,   909,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2757,     0,     0,     0,     0,
       0,   906,   910,     0,   696,   696,   696,     0,     0,     0,
       0,   907,  2459,   560,     0,  1550,   560,     0,     0,     0,
       0,   560,     0,     0,  1064,     0,     0,     0,     0,  2026,
     561,     0,     0,     0,   561,  2075,   907,  3513,  1971,  3516,
       0,  3518,     0, -2128,     0,   910,     0,     0,     0,     0,
    1675,  1676,  1677,  1678,  1679,  1680,     0,   910,     0,     0,
     561,     0,     0,  1550,  1550,     0,     0,     0,     0,     0,
       0,     0,  3215,     0,     0,     0,     0,     0,     0,     0,
     561,   561,     0,     0,     0,     0,     0,   910,     0,     0,
     907,     0,     0,     0,   910,   906,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,     0,  1961,
    1962,     0,     0,     0,  1982,   912,     0,     0,  1550,     0,
       0,     0,     0,     0,     0,  2875,     0,     0,  2878,     0,
       0,  2191,   910,     0,     0,   910,     0,     0,     0,     0,
     910,     0,     0,     0,     0,     0,   561,     0,   696,     0,
     909,     0,   560,     0,     0,     0,   560,   560,   560,     0,
       0,     0,  1851,  1793,  1851,     0,  1891,     0,     0,     0,
    3599,     0,     0,  3602,  3603,     0,     0,     0,     0,     0,
       0,     0,  3607,     0,     0,   560,     0,  2949,     0,  3613,
    1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,  1979,  1980,
     560,   560,   560,   560,   560,   560,   560,   560,   560,   560,
       0,     0,     0,     0,  2216,  2216,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2343,
    1546,     0,   696,   907,     0,   696,     0,     0,     0,     0,
    1052,     0,     0,     0,     0,     0,  1053,     0,  1793,     0,
       0,  1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,  1979,
    1980,  1891,     0,     0,     0,     0,     0,     0,   907,     0,
    3678,  3679,     0,  1514,  3680,     0,     0,     0,  3683,   912,
    1851,  3686,  3687,  1514,     0,     0,  1514,     0,     0,   909,
       0,  1550,     0,     0,     0,     0,     0,   560,     0,     0,
       0,     0,     0,  1054,   696,   696,   696,   696,     0,     0,
     912,   912,     0,     0,     0,     0,  1550,  2682,     0,  1550,
       0,     0,     0,   560,     0,   917,   912,     0,     0,     0,
    2696,  2698,     0,     0,  2702,     0,     0,  3101,     0,     0,
       0,     0,     0,   907,     0,  2710,     0,     0,  2713,     0,
       0,     0,     0,  2718,  3731,  3732,     0,     0,  3733,   561,
     909,     0,     0,   906,     0,     0,  3124,     0,   660,     0,
       0,  2370,  2372,     0,     0,  1055,     0,     0,  3412,  1646,
       0,     0,  1647,     0,     0,   909,  1648,  1649,     0,     0,
       0,     0,     0,     0,     0,     0,  1514,     0,  3419,  3420,
       0,     0,  1550,  1550,  1550,  1550,     0,     0,     0,  1759,
       0,     0,     0,  1056,     0,     0,     0,     0,  1546,  1657,
       0,     0,  3440,     0,  2191,     0, -2128,     0,     0,  1057,
    2075,     0,     0,     0,     0,   907,     0,   910,     0,   909,
    1058,     0,  1793,     0,     0,     0,     0,     0,  1851,     0,
       0,  1659,     0,     0,     0,     0,     0,   906,  2764,  2765,
    2766,   917,   560,  1550,     0,     0,     0,     0,     0,   696,
       0,     0,  1059,     0,     0,     0,   906,     0,     0,     0,
       0,     0,  1144,  1144,     0,  1087,  3235,     0,  1963,     0,
       0,     0,  1964,  1965,  1224,     0,  1966,  1967,  1968,     0,
       0,     0,  1514,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3601,     0,     0,  2808,   912,  1060,
       0,     0,     0,     0,     0,     0,  1061,     0,     0,   907,
    2412,  2413,  2414,  2415,  2416,  2417,     0,     0,  2421,  2422,
    2423,  2424,  2425,  2426,  2427,  2428,  2429,  2430, -2128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1851,     0,     0,     0,     0, -2128,     0,  1062,
       0,     0, -2128,     0,     0,     0,     0,     0,  2343,     0,
       0,     0,   909,     0,  1087,     0,  1063,  3149,     0,     0,
       0,  3285,  3150,     0,     0,     0,     0,     0,     0,     0,
    1550,     0,  2889,     0,     0,  1309,  1314,     0,     0,   910,
       0, -2128,     0,     0,     0,     0,     0,   909,     0,     0,
       0,   561,     0,  2540,  3157,     0,  3303,     0,     0,     0,
       0, -2128,   560,     0,     0,  1646,     0,     0,  1647,     0,
     560,     0,  1648,  1649,     0,     0,  1652,  1653,  1654,     0,
       0,     0,     0,     0,     0,     0,  3159,  1064,     0,     0,
       0,     0,  2599,  2599,   912,  1668,  3327,     0,     0,     0,
       0,     0,     0,  2504,  2505,  1657,     0,  3617,     0,     0,
       0,     0,  1658,     0,     0,     0,  3025,     0,     0,  3028,
       0,     0,   909,     0,  1550,  1550,  1550,  1550,  1550,  1550,
    1550,  1970,     0,   917,  1550,  1550,     0,  1659,     0,  1550,
       0,     0,  1550,     0,     0,  1550,  1550,  1550,  1550,  1550,
    1550,  1550,  1550,  1550,  1550,     0,     0,     0,     0,     0,
    2875,     0,     0,     0,     0,     0,     0,     0,   560,  1546,
    1546,     0,   560,     0,  1546,     0,     0,     0,   910,     0,
       0,     0,     0, -2128,     0,     0,     0,     0,  3064,  3065,
    3066,  3067,     0,     0,     0,     0,  1646, -2128,   560,  1647,
       0,  1971, -2128,  1648,  1649,     0,     0, -2128,     0,   912,
       0,     0,     0,  1087,   909,     0,  1963,     0,   560,   560,
    1964,  1965,     0,     0,  1966,  1967,  1968,   907,     0,     0,
       0,   696,     0,     0,  1660,     0,  1657,   696,     0,  1793,
       0,     0,   560, -2128,     0,     0, -2128,     0,     0,   910,
       0,  2721,   912,  1661,     0,  1521,     0,   696,  1662,     0,
    3466,     0,     0,  1539,   912,     0,  1541,     0,  1659,  1552,
    1555,  1560,  1563,     0,   910,     0,     0,     0,     0,     0,
    1550, -2128, -2128,     0,   560,  1047,     0,     0,  1047,     0,
       0,     0,     0,     0,   912,     0,     0,  1665,     0,     0,
    1971,   912,     0,     0,     0, -2128,     0,     0,   909,     0,
    1309,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,
    3672,   907,     0,     0,     0,  1550,  1550,  1613,   910,     0,
       0,     0,     0,     0,  2811,     0,     0, -2128,     0,   912,
     907,  1550,   912,  1550,  1617,  1550,     0,   912,     0,     0,
       0,  1668,     0,  3222,     0,  1620,  1621,  1622,     0,  1626,
    1630,     0,     0,     0,     0, -2128,     0,  3466,     0,  2206,
       0,     0,     0,   696,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2128,     0,     0,  1689,     0, -2128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   696,     0,  1972,  1973,  1974,     0,  1975,  1976,
    1977,  1978,  1979,  1980,     0,     0,     0,     0, -2128,  1970,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1737,     0,     0,     0,  1753,  1758,     0,     0,  3303,
       0,     0,     0,  1670,     0,     0,  1144,  1144,  1646,     0,
       0,  1647,     0,     0,     0,  1648,  1649,  1550,     0,     0,
       0,   910,     0,     0,  1550,     0,     0,  1550,  1550,     0,
       0,     0,  1668,     0,     0,     0,  1550,     0,  1550,  1550,
       0,     0,     0,  1550,     0,     0,     0,   560,  1657,  1971,
       0,     0,     0,     0,  1309, -2128,   910,     0,     0,     0,
   -2128,     0,     0,  1309,     0,  2809,  2810,  3174,  3175,  3176,
    3177,  3178,  3179,     0,     0,     0,     0,     0,     0,     0,
    1659,     0,     0,     0,  1793,     0,     0,  1309,     0,     0,
       0,     0,     0,     0,  1514,     0,     0,  3466,   917,   917,
     917,     0,     0,     0,     0,     0,     0,     0,  2008,     0,
       0,  1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,
    1677,  1678,  1679,  1680,  1550,  1550,   909,     0,  1550,     0,
       0,   910,  1550,     0, -2128,  1550,  1550,     0,   696,     0,
    1546,  1546,  1546,  1546,  1546,  1546,  2812,     0,  1546,  1546,
    1546,  1546,  1546,  1546,  1546,  1546,  1546,  1546,     0,     0,
    1646,     0,     0,  1647,     0,     0,     0,  1648,  1649,   696,
       0,  1793,     0,     0,     0,     0,     0, -2128,  3466,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   912,     0, -2128,     0,     0,     0,
    1657, -2128,     0,     0,     0,     0,     0, -2128,  1550,  1550,
       0,     0,  1550,     0,     0,     0,  2191,     0,     0,     0,
     909,     0,     0,   910,     0,     0,     0,     0,     0,     0,
     696,     0,  1659,     0,     0,  3025,     0,   917,     0,   909,
   -2128,  3437, -2128,     0,     0,     0,     0,     0,     0,  1675,
    1676,  1677,  1678,  1679,  1680,     0,     0,     0,     0,     0,
       0,  3461,  1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,
    1979,  1980,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1546,  1546,     0,     0,     0,   696,     0,
       0,     0,     0,  3055,  1668,     0,     0,     0,  3114,     0,
       0,   696,     0,     0,     0,     0,  1953,     0,     0,   560,
       0,     0,     0,     0,     0,     0,     0,   910,   696,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1560,
       0,  1560,  1560,     0,     0,     0,     0,     0, -2128,     0,
       0,     0,     0, -2128,  1144,  1144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   912,     0,     0,     0,
    1144,     0,     0,     0,     0,     0,  1514,  3526,     0,     0,
       0,  1514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2128,     0,     0,     0, -2128,     0,  2057,     0,
       0,     0,     0,     0,     0,  1546,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3561,     0,     0,     0,
       0,     0,     0,     0,     0,  2090,     0,     0,     0,  1931,
    1933,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,     0,
       0,     0,     0,  2110,  2111,     0,  1668,     0,  2122,     0,
       0,     0,  2125,     0,     0,  2133,  2134,  2135,  2136,  2137,
    2138,  2139,  2140,  2141,     0,  3216,  2142,     0,     0,     0,
       0,     0,     0,  1144,     0,  1309,  1087,     0,     0,  1963,
       0,     0,     0,  1964,  1965,     0,     0,  1966,  1967,  1968,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2170,
       0,     0,     0,     0, -2128,   912,     0,     0,     0,     0,
       0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,     0,
       0,     0,     0,     0,     0,  1646,     0,     0,  1647,     0,
       0,     0,  1648,  1649,     0,     0,     0,  1621,  1622,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2128,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1548,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,     0, -2128,     0,     0,     0,   912,     0,     0,     0,
       0,     0,     0,     0,     0,   910,     0,     0,     0,     0,
       0,     0,  3689,     0,     0,     0,     0,  1659,     0,     0,
       0,   912,  3288,  1087,     0,     0,  1963,     0,     0,     0,
    1964,  1965,     0,     0,  1966,  1967,  1968,     0,     0,     0,
       0,     0,     0,  3711,  1309,     0,     0,  2304,  2305,     0,
    2306,     0,  3684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   912, -2128,     0,     0,     0,
       0,     0,     0,  1675,  1676,  1677,  1678,  1679,  1680,  1309,
    1683,     0,  1931,  1933,     0,     0,     0,     0,     0,   910,
       0,     0,     0,  1514,  3025,     0,     0,     0,     0,     0,
       0,     0,  1970,     0, -2128,  1546,  1546,     0,   910,  1087,
       0,     0,  1963,     0,     0,     0,  1964,  1965,     0,     0,
    1966,  1967,  1968, -2128,  1683,     0,     0,     0, -2128,     0,
       0,     0,  1087,     0,     0,  1963,     0,     0,  3685,  1964,
    1965,   -46,     0,  1966,  1967,  1968,     0,     0,  2407,  2408,
       0,  2409,  3025,     0,     0,     0,     0,     0,  1548,     0,
    2863,     0,     0,     1,     0,  3788,     0, -2128,     0,     0,
       0,     0,  1971,     0,     2,     0,     3,     4,     0,     0,
    2435,  2436,  3795,     0,  2170,     0,     0,     0,     0,     0,
       5,     0,     0,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,   912,     0,
       0,     0,     0,  2463,     0,     0,     8,     0,  2468,     0,
       0,  1668,     0,     0,     0,     0,     0,     9,     0,  1970,
       0,     0,     0,     0,     0,     0,     0,  1309,     0,    10,
       0,    11,     0,   912,     0,  1683,     0,  2485,     0,     0,
    1683,     0,    12,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,     0,    14,     0,
       0,     0,     0,  2495,     0,     0,     0,    15,  2498,     0,
       0,  2500,     0,     0,     0,    16,     0,     0,     0,     0,
       0,     0,     0,    17,     0,    18,    19,     0,     0,  1971,
       0,     0,     0,     0,     0,     0,     0,  3501,  3502,    20,
       0,     0,     0,    21,     0,     0,     0,     0,   912,  2518,
       0,     0,  2521, -2128,  2523,  1970,     0,     0,     0,     0,
       0,     0,     0,  1546,     0,     0,     0,     0,     0,     0,
    2527,    22,  1087,     0,     0,  1963,     0,     0, -2128,  1964,
    1965,     0,     0, -2128, -2128, -2128,     0,    23,  3085,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3103,     0,     0,     0,    24,  1972,  1973,  1974,  1737,  1975,
    1976,  1977,  1978,  1979,  1980,  1971,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1758,  2140,     0,     0,     0,
     912,     0,     0,     0,     0,     0,     0,     0,  1971,     0,
       0,     0,     0,     0,  1144,     0,     0,     0,     0,     0,
       0, -2128,     0,  2615,     0,     0,     0,     0,  1675,  1676,
    1677,  1678,  1679,  1680,  2863,  2863,  2863,  2863,     0,  3594,
       0,     0,     0,     0,     0,     0,     0,  1683,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
    3609,  3610,     0,     0,  1514,  1683,     0,  1683,     0,  1548,
    1548,  1981,     0,     0,  1548,     0,     0,     0,  1683,     0,
       0,  1683,  1309,     0,     0,     0,  1683,     0,     0,  1683,
       0,    30,     0,     0,   912,  1546,     0,     0,     0,     0,
      31,     0,  1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,
    1979,  1980,     0,     0,    32,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2716,    35,     0,  1683,
       0,     0,     0,  1683,     0,     0,  1683,  1683,  1683,    36,
       0,     0,  1683,    37,     0,     0,  1683,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,  1547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,     0,     0,    40,
       0,     0,    41,     0,     0,     0,     0,    42,  1972,  1973,
    1974,     0,  1975,  1976,  1977,  1978,  1979,  1980,     0,     0,
       0,     0,     0,    43,     0,  1683,     0,     0,  1971,     0,
       0,  1972,  1973,  1974,     0,  1975,  1976,  1977,  1978,  1979,
    1980,     0,  1546,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,  1646,   -46,     0,  1647,     0,     0,     0,
    1648,  1649,     0,  1683,  1652,  1653,  1654,     0,     0,  2785,
       0,     0,     0,     0,     0,     0,     0,  2789,     0,  1683,
       0,     0,  1655,     0,  1683,     0,  2797,     0,     0,  2800,
       0,  2802,     0,  1657,     0,     0,     0,     0,     0,  2806,
    1658,  1981,     0,     0,     0,     0,     0,  2813,  2814,     0,
       0,     0,     0,     0,  2821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1659,  2863,  2863,  2863,  2863,
    2863,  2863,  2863,     0,     0,     0,  2863,  2863,     0,     0,
       0,  2863,     0,     0,  2863,     0,     0,  2863,  2863,  2863,
    2863,  2863,  2863,  2863,  2863,  2863,  2863,     0,     0,     0,
    2866,     0,   912,  1547,     0,     0,     0,     0,     0,     0,
       0,     0,  2883,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1144,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,     0,     0,     0,
       0, -2128, -2128, -2128,     0,  1975,  1976,  1977,  1978,  1979,
    1980,  1661,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   912,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1663,
    1664,     0,     0,     0,     0,   912,     0,     0,     0,  1683,
       0,     0,  3480,     0,     0,  1665,     0,  1981,  1981,     0,
    1548,  1548,  1548,  1548,  1548,  1548,     0,     0,  1548,  1548,
    1548,  1548,  1548,  1548,  1548,  1548,  1548,  1548,  1981,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1666,     0,     0,  1667,     0,  1546,  1546,     0,
       0,     0,  1087,     0,     0,  3149,     0,     0,  1231,  1668,
    3150,     0,  1669,  2863,  1232,  2863,     0,  2863,     0,     0,
    3080,  3081,     0,  1244,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3098,     0,     0,
       0,     0,  3157,  1245,     0,     0,     0,  3102,     0, -2128,
       0,  3104,  3105,  1683,     0,     0,  3106,     0,     0,     0,
       0,  3109,     0,     0,  3112,  3113,     0,     0,     0,  2306,
    1309,     0,     0,  3120,  3159,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1683,  1246,     0,     0,
    1683,  1683,  1683,  1683,  1683,  1683,  1683,  1683,     0,     0,
       0,     0,     0,  1548,  1548,     0,  1683,  1683,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,  1233,  1683,     0,
    1144,  1683,     0,     0,     0,     0,     0,     0,     0,  1683,
    1683,  1683,  1683,  1683,  1683,  1683,  1683,  1683,  1683,  1546,
    3608,     0,     0,     0,     0,     0,  2863,     0,     0,  2863,
    2863,     0,     0,     0,  1547,  1547,     0,     0,  2863,  1547,
    1546,  1546,     0,     0,  3210,  2863,  1683,  1646,     0,     0,
    1647, -2128,     0,     0,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,     0,  1247,     0,     0,     0,     0,
   -2128,  3229,     0,     0,     0, -2128,  1655,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1657,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,     0,  1671,
       0,     0,  1672,  1673,  1674,  1548,  1675,  1676,  1677,  1678,
    1679,  1680,     0,     0, -2128,  1248,     0,     0,     0,  1659,
       0,     0,     0,  1249,     0,     0,  2863,  2863,     0,     0,
    2863,     0,     0,     0,  2863,  1250,     0,  2863,  2863,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3256,     0,  1234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1251,  1971,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2155,
    1683,  1683,  1683,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1630,     0,     0,     0,     0,
    2863,  2863,     0,     0,  2863,     0,  1660,  1252,     0,     0,
       0,  1236,     0,  1253,     0,  1309,     0,     0,     0,     0,
       0,     0,  2495,     0,  1547,  1661,     0,     0,     0,     0,
    1662,     0,     0,  3320,  3321,     0,  1254,  3322,     0,     0,
       0,  1255,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1663,  1664,     0,     0,  1256,     0,     0,
   -2128,     0,     0,     0,     0,     0,     0,     0,     0,  1665,
       0,     0,     0,  1683,  1683,  1683,     0,     0,  1981,  1981,
    1981,  1981,  1981,  1981,     0,     0,     0,  1981,  1981,  1981,
    1981,  1981,  1981,  1981,  1981,  1981,  1981,     0,     0,     0,
       0,  1683,  1683,     0,     0,  1144,  1666,     0,     0,  1667,
       0,     0,     0,  3395,  1238,     0,     0,     0,     0,     0,
       0,     0,     0,  1668,     0,     0,  1669,     0,     0,  1683,
       0,     0,     0,     0,  1683,     0,  3407,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,  1683,     0,  1683,     0, -2128,     0,
    1981,  1981,     0,     0,     0,  3174,  3175,  3176,  3177,  3178,
    3179,     0,     0,     0,  1683,  1548,  1548,  1683,     0,  1683,
       0,     0,     0,  1683,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3460,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3080,     0,  1670,     0,  3477,     0,     0,
       0,  1144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3487,     0,     0,     0,  1547,  1547,  1547,  1547,  1547,
    1547,     0,     0,  1547,  1547,  1547,  1547,  1547,  1547,  1547,
    1547,  1547,  1547,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,     0,     0,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3537,
       0,     0,     0,  1671,     0,     0,  1672,  1673,  1674,     0,
    1675,  1676,  1677,  1678,  1679,  1680,   565,     0,     0,     0,
       0,     0,  1645,  1956,     0,     0,     0,  1646,     0,     0,
    1647,     0,   566,     0,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,  1683,     0,     0,  3571,  1655,     0,  1547,  1547,
       0,  1656,     0,     0,     0,  3080,     0,  1657,     0,     0,
       0,     0,     0,     0,  1658,     0,     0,     0,  1144,     0,
       0,     0,   568,  1548,     0,     0,     0,     0,     0,     0,
       0,     0,   569,     0,     0,     0,     0,     0,     0,  1659,
       0,     0,     0,     0,   570,     0,     0,     0,     0,   571,
       0,     0,     0,     0,  1144,     0,     0,     0,     0,     0,
       0,  1683,     0,     0,     0,  1683,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,  3637,  1683,     0,  1683,     0,
     572,     0,  1683,     0,     0,  1981,  1981,     0,     0,  1683,
    1683,     0,     0,     0,     0,     0,     0,  1683,     0,     0,
       0,     0,     0,     0,     0,  1087,     0,     0,  3149,     0,
       0,     0,     0,  3150,     0,     0,  3153,  3154,  3155,     0,
    1547,     0,     0,     0,   573,     0,     0,     0,   574,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,  3180,     0,
       0,     0,  1683,     0,     0,  3157,     0,     0,     0,     0,
       0,     0,  3158,     0,     0,  1661,     0,     0,     0,  1683,
    1662,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3159,     0,     0,
       0,     0,     0,  1663,  1664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1548,     0,   575,     0,  1665,
       0,     0,  3720,  3720,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   576,   577,  1646,     0,     0,  1647,     0,
       0,     0,  1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,
       0,     0,     0,     0,     0,     0,  1666,     0,     0,  1667,
       0,     0,     0,     0,  1655,     0,     0,     0,   578,  2793,
    3720,   579,     0,  1668,     0,  1657,  1669,     0,     0,     0,
     580,     0,  1658,   581,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3160,     0,     0,     0,     0,     0,
       0,     0,     0,   582,     0,     0,     0,  1659,     0,     0,
       0,     0,     0,  3161,     0,     0,     0,   583,  3162,     0,
       0,     0,     0,     0,   584,  3720,     0,     0,     0,     0,
       0,     0,     0,     0,   585,     0,     0,     0,     0,     0,
     586, -2128, -2128,     0,     0,     0,     0,     0,     0,     0,
       0,  1981,  1548,     0,     0,     0,     0,  3165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   587,     0,
       0,     0,     0,     0,     0,  1670,  1683,  1683,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1683,     0,     0, -2128,  1683,     0,
    1683,  1683,  1683,     0,  1660,  1683,     0,     0,  1683,  1683,
       0,  1971,     0,     0,     0,     0,  1683,     0,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,  1662,     0,
    1547,  1547,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3180,  3180,  3180,  3180,     0,     0,     0,     0,     0,
       0,  1663,  1664,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1671,     0,  2864,  1672,  1673,  1674,     0,
    1675,  1676,  1677,  1678,  1679,  1680,     0,     0,     0,     0,
       0,     0,     0,     0,  1666,     0,  1683,  1667,     0,     0,
       0,     0,  1981,  3169,     0,     0,     0,     0,     0,     0,
       0,  1668,     0,     0,  1669,  1683,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1646,     0,     0,  1647,     0,
       0,     0,  1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,
       0,     0,  1683,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
       0,     0,  1658,     0,  1981,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,  1683,  1683,  1683,     0,
       0,  3170,     0,  1670,  3171,  3172,  3173,     0,  3174,  3175,
    3176,  3177,  3178,  3179,     0,     0,     0,     0,     0,  3180,
    3180,  3180,  3180,  3180,  3180,  3180,     0,  1548,  1548,     0,
    3180,  3180,     0,     0,     0,     0,     0,     0,  1547,     0,
    3180,     0,  3180,     0,     0,     0,     0,     0,     0,  3180,
    3180,  3180,  3180,  3180,  3180,  3180,  3180,  3180,  3180,     0,
       0,     0,     0,  1547,     0,  1646,     0,     0,  1647,     0,
       0,  1683,  1648,  1649,     0,     0,  1652,  1653,  1654,     0,
       0,     0,     0,  1683,  1660,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,  1661,     0,  1657,     0,     0,  1662,     0,
       0,  1671,  1658,     0,  1672,  1673,  1674,     0,  1675,  1676,
    1677,  1678,  1679,  1680,     0,     0,     0,     0,  2084,     0,
       0,  1663,  1664,     0,     0,     0,  1683,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,  2864,
    2864,  2864,  2864,  1683,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,     0,     0,     0,     0,  1548,
       0,     0,     0,     0,     0,     0,     0,  1981,  1981,     0,
       0,     0,     0,     0,  1666,     0,     0,  1667,     0,  3180,
    1548,  1548,  3180,     0,  3180,     0,     0,     0,     0,     0,
       0,  1668,     0,     0,  1669,     0,     0,     0,     0,     0,
    1547,     0,     0,  1683,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1683,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,  1662,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1981,     0,     0,     0,     0,  3180,     0,     0,  3180,  3180,
       0,  1663,  1664,  3180,     0,  1981,  1981,     0,     0,  3180,
       0,     0,     0,     0,     0,     0,     0,  1665,     0,     0,
       0,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1683,     0,     0,     0,  1646,     0,     0,
    1647,     0,     0,     0,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,  1666,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,  1655,  1547,     0,     0,
       0,  1668,     0,     0,  3180,  3180,  3180,  1657,  1646,  3180,
       0,  1647,  3180,  3180,  1658,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1655,     0,  1659,
       0,     0,     0,     0,     0,     0,  1683,     0,  1657,     0,
       0,     0,     0,     0,     0,  1658,     0,  3180,  3180,  3180,
       0,  1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,
    1677,  1678,  1679,  1680,     0,     0,     0,     0,  2084,     0,
    1659,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2864,  2864,  2864,  2864,  2864,  2864,  2864,     0,     0,
       0,  2864,  2864,  1670,     0,     0,  2864,     0,     0,  2864,
       0,     0,  2864,  2864,  2864,  2864,  2864,  2864,  2864,  2864,
    2864,  2864,  3383,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1661,     0,     0,     0,     0,
    1662,     0,     0,     0,     0,     0,     0,  1231,     0,     0,
       0,     0,     0,  1232,     0,     0,     0,  1660,     0,     0,
       0,     0,  1244,  1663,  1664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1661,     0,     0,  1665,
       0,  1662,  1245,     0,     0,     0,     0,     0,     0,     0,
       0,  1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,
    1677,  1678,  1679,  1680,  1663,  1664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,     0,     0,  1667,
    1665,     0,     0,     0,     0,     0,  1246,  1547,     0,     0,
       0,     0,     0,  1668,     0,     0,  1669,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1233,  1666,     0,     0,
    1667,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1547,  1547,  1668,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2864,     0,
    2864,     0,  2864,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1247,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1248,     0,  1670,     0,     0,     0,
       0,     0,  1249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1250,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1547,     0,  1234,     0,     0,     0,
       0,  2864,     0,     0,  2864,  2864,  1251,     0,     0,     0,
       0,     0,     0,  2864,     0,  1547,  1547,     0,     0,     0,
    2864,     0,     0,  1671,     0,     0,  1672,  1673,  1674,     0,
    1675,  1676,  1677,  1678,  1679,  1680,     0,     0,     0,     0,
    2406,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2273,     0,     0,     0,
    1236,     0,  1253,     0,  1671,     0,     0,  1672,  1673,  1674,
       0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,     0,
       0,  2489,     0,     0,     0,  1254,     0,     0,     0,     0,
    2274,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2864,  2864,     0,     0,  2864,  1256,     0,     0,  2864,
       0,     0,  2864,  2864,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,
       0,     0,     0,  1238,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,  2864,  2864,   126,  1090,  2864,
       0,   127,   128,   129,     0,   130,   131,   132,   133,   134,
     135,   136,   137,  1091,   139,  1092,  1093,     0,   142,   143,
     144,   145,   146,   147,  1094,   632,   148,   149,  1095,  1096,
     152,     0,   153,   154,   155,   156,   633,     0,   634,     0,
    1097,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,  1098,
    1099,   188,  1100,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
    1101,   220,   221,   222,   223,   224,   635,  1102,   226,     0,
     227,   228,  1103,   230,     0,   231,     0,   232,   233,    21,
     234,   235,   236,   237,   238,   239,     0,   240,   241,     0,
       0,  1104,  1105,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1106,  1107,     0,  1108,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,   289,   290,   291,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1109,   320,  1110,   322,
     323,   324,   325,   326,  1111,   327,   328,   329,   330,  1112,
     638,   332,  1113,   334,   335,   336,     0,   337,   338,     0,
       0,  1114,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   640,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    25,    26,    27,     0,   360,   361,
     641,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1115,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   405,  1116,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      32,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,  1117,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   643,   450,     0,   451,   452,    37,
     453,   454,   455,   456,   457,   458,   459,     0,  1118,  1119,
       0,   462,     0,   463,   464,   644,   466,   645,  1120,   468,
     469,   646,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,    39,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   647,  1121,     0,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,    43,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,  1122,     0,    44,     0,     0,     0,     0,  1123,  1124,
    1125,     0,     0,     0,     0,  1126,     0,  1127,  3299,     0,
       0,     0,     0,  1128,  1129,     0,     0,     0,     0,  1130,
    1131,   113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,  1090,
       0,     0,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,   136,   137,  1091,   139,  1092,  1093,     0,   142,
     143,   144,   145,   146,   147,  1094,   632,   148,   149,  1095,
    1096,   152,     0,   153,   154,   155,   156,   633,     0,   634,
       0,  1097,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
    1098,  1099,   188,  1100,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,  1101,   220,   221,   222,   223,   224,   635,  1102,   226,
       0,   227,   228,  1103,   230,     0,   231,     0,   232,   233,
      21,   234,   235,   236,   237,   238,   239,     0,   240,   241,
       0,     0,  1104,  1105,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1106,  1107,     0,  1108,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,   289,   290,   291,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1109,   320,  1110,
     322,   323,   324,   325,   326,  1111,   327,   328,   329,   330,
    1112,   638,   332,  1113,   334,   335,   336,     0,   337,   338,
       0,     0,  1114,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   640,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    25,    26,    27,     0,   360,
     361,   641,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1115,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   405,  1116,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,    32,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1117,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   643,   450,     0,   451,   452,
      37,   453,   454,   455,   456,   457,   458,   459,     0,  1118,
    1119,     0,   462,     0,   463,   464,   644,   466,   645,  1120,
     468,   469,   646,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,    39,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   647,  1121,     0,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
      43,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,  1122,     0,    44,     0,     0,     0,     0,  1123,
    1124,  1125,     0,     0,     0,     0,  1126,     0,  1127,     0,
       0,     0,     0,     0,  1128,  1129,     0,     0,     0,     0,
    1130,  1131,  1270,  1084,   540,  1085,  1086,  1087,  1088,  1089,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    1271,   123,   124,   125,     0,     0,     0,  1272,     0,   126,
    1090,     0,     0,  1273,   128,   129,     0,   130,   131,   132,
    1274,   134,   135,   136,   137,  1091,  1275,  1092,  1093,     0,
     142,   143,   144,   145,   146,   147,  1094,   632,   148,   149,
    1095,  1096,   152,     0,   153,   154,   155,   156,   633,     0,
    1276,     0,  1277,   160,   161,   162,   163,   164,  1278,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
    1279,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,  1098,  1099,   188,  1100,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
    1280,     0,   202,   203,   857,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,  1101,   220,   221,   222,   223,   224,   635,  1102,
     226,     0,   227,   228,  1103,   230,     0,   231,     0,   232,
    1281,     0,  1282,   235,   236,  1283,  1284,   239,     0,   240,
     241,     0,     0,  1104,  1105,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,  1285,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
    1286,   267,   268,   269,   270,   271,   272,  1106,  1107,     0,
    1108,     0,   276,  1287,  1288,   279,  1289,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,  1290,   290,  1291,
       0,   292,   293,   294,   295,   296,   297,   298,   299,  1292,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,  1109,  1293,
    1110,   322,   323,   324,   325,   326,  1111,   327,   328,  1294,
     330,  1112,   638,   332,  1113,   334,   335,   336,     0,   337,
     338,     0,     0,  1114,   340,   341,     0,     0,   342,   343,
    1295,   345,  1296,   640,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   641,  1297,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1115,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,  1298,   403,   404,   405,
    1116,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,  1299,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,  1300,   430,   431,  1117,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,  1301,   448,   643,   450,     0,   451,
     452,     0,   453,  1302,   455,   456,   457,   458,   459,     0,
    1118,  1119,     0,   462,     0,   463,   464,   644,   466,   645,
    1120,   468,   469,  1303,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,  1121,  1304,   490,  1305,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,  1122,     0,     0,     0,     0,     0,     0,
    1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,  1127,
    1306,     0,     0,     0,     0,  1128,  1129,     0,     0,     0,
       0,  1130,  1131,   113,  1084,   540,  1085,  1086,  1087,  1088,
    1089,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,  1090,     0,     0,   127,   128,   129,     0,   130,   131,
     132,   133,   134,   135,   136,   137,  1091,   139,  1092,  1093,
    1556,   142,   143,   144,   145,   146,   147,  1094,   632,   148,
     149,  1095,  1096,   152,     0,   153,   154,   155,   156,   633,
       0,   634,     0,  1097,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,  1098,  1099,   188,  1100,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   857,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,  1101,   220,   221,   222,   223,   224,   635,
    1102,   226,     0,   227,   228,  1103,   230,     0,   231,     0,
     232,   233,  1557,   234,   235,   236,   237,   238,   239,     0,
     240,   241,     0,     0,  1104,  1105,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,   272,  1106,  1107,
       0,  1108,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,  1558,   288,   289,   290,
     291,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,  1109,
     320,  1110,   322,   323,   324,   325,   326,  1111,   327,   328,
     329,   330,  1112,   638,   332,  1113,   334,   335,   336,     0,
     337,   338,     0,     0,  1114,   340,   341,     0,     0,   342,
     343,   344,   345,   346,   640,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   641,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1115,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     405,  1116,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,  1117,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   643,   450,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
       0,  1118,  1119,     0,   462,  1559,   463,   464,   644,   466,
     645,  1120,   468,   469,   646,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,  1121,     0,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,  1122,     0,     0,     0,     0,     0,
       0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,
    1127,     0,     0,     0,     0,     0,  1128,  1129,     0,     0,
       0,     0,  1130,  1131,  1270,  1084,   540,  1085,  1086,  1087,
    1088,  1089,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,  1272,
       0,   126,  1090,     0,     0,  1273,   128,   129,     0,   130,
     131,   132,  1274,   134,   135,   136,   137,  1091,  1275,  1092,
    1093,     0,   142,   143,   144,   145,   146,   147,  1094,   632,
     148,   149,  1095,  1096,   152,     0,   153,   154,   155,   156,
     633,     0,  1276,     0,  1277,   160,   161,   162,   163,   164,
    1278,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,  1279,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,  1098,  1099,   188,  1100,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   857,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,  1101,   220,   221,   222,   223,   224,
     635,  1102,   226,     0,   227,   228,  1103,   230,     0,   231,
       0,   232,  1281,     0,  1282,   235,   236,  1283,  1284,   239,
       0,   240,   241,     0,     0,  1104,  1105,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,  1285,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,  1286,   267,   268,   269,   270,   271,   272,  1106,
    1107,     0,  1108,     0,   276,  1287,  1288,   279,  1289,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,  1290,
     290,  1291,     0,   292,   293,   294,   295,   296,   297,   298,
     299,  1292,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
    1109,  1293,  1110,   322,   323,   324,   325,   326,  1111,   327,
     328,  1294,   330,  1112,   638,   332,  1113,   334,   335,   336,
       0,   337,   338,     0,     0,  1114,   340,   341,     0,     0,
     342,   343,  1295,   345,  1296,   640,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   641,  1297,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1115,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,  1298,   403,
     404,   405,  1116,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,  1299,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,  1300,   430,   431,
    1117,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,  1301,   448,   643,   450,
       0,   451,   452,     0,   453,  1302,   455,   456,   457,   458,
     459,     0,  1118,  1119,     0,   462,     0,   463,   464,   644,
     466,   645,  1120,   468,   469,  1303,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,  1121,  2299,
     490,  1305,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,  1122,     0,     0,     0,     0,
       0,     0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,
       0,  1127,     0,     0,     0,     0,     0,  1128,  1129,     0,
       0,     0,     0,  1130,  1131,  1270,  1084,   540,  1085,  1086,
    1087,  1088,  1089,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
    1272,     0,   126,  1090,     0,     0,  1273,   128,   129,     0,
     130,   131,   132,  1274,   134,   135,   136,   137,  1091,  1275,
    1092,  1093,     0,   142,   143,   144,   145,   146,   147,  1094,
     632,   148,   149,  1095,  1096,   152,     0,   153,   154,   155,
     156,   633,     0,  1276,     0,  1277,   160,   161,   162,   163,
     164,  1278,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,  1279,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,  1098,  1099,   188,  1100,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   857,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,  1101,   220,   221,   222,   223,
     224,   635,  1102,   226,     0,   227,   228,  1103,   230,     0,
     231,     0,   232,  1281,     0,  1282,   235,   236,  1283,  1284,
     239,     0,   240,   241,     0,     0,  1104,  1105,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,  1285,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,  1286,   267,   268,   269,   270,   271,   272,
    1106,  1107,     0,  1108,     0,   276,  1287,  1288,   279,  1289,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
    1290,   290,  1291,     0,   292,   293,   294,   295,   296,   297,
     298,   299,  1292,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,  1109,  1293,  1110,   322,   323,   324,   325,   326,  1111,
     327,   328,  1294,   330,  1112,   638,   332,  1113,   334,   335,
     336,     0,   337,   338,     0,     0,  1114,   340,   341,     0,
       0,   342,   343,  1295,   345,  1296,   640,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   641,  1297,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1115,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,  1298,
     403,   404,   405,  1116,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,  1299,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,  1300,   430,
     431,  1117,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,  1301,   448,   643,
     450,     0,   451,   452,     0,   453,  1302,   455,   456,   457,
     458,   459,     0,  1118,  1119,     0,   462,     0,   463,   464,
     644,   466,   645,  1120,   468,   469,  1303,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,  1121,
       0,   490,  1305,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,  1122,     0,     0,     0,
       0,     0,     0,  1123,  1124,  1125,     0,     0,     0,     0,
    1126,     0,  1127,  2351,     0,     0,     0,     0,  1128,  1129,
       0,     0,     0,     0,  1130,  1131,   113,  1084,   540,  1085,
    1086,  1087,  1088,  1089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122, -1222,   123,   124,   125,     0,     0,
       0,     0, -1222,   126,  1090,     0,     0,   127,   128,   129,
       0,   130,   131,   132,   133,   134,   135,   136,   137,  1091,
     139,  1092,  1093,     0,   142,   143,   144,   145,   146,   147,
    1094,   632,   148,   149,  1095,  1096,   152,     0,   153,   154,
     155,   156,   633,     0,   634,     0,  1097,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,  1098,  1099,   188,  1100,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   857,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,  1101,   220,   221,   222,
     223,   224,   635,  1102,   226,     0,   227,   228,  1103,   230,
       0,   231,     0,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,     0,     0,  1104,  1105,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,  1106,  1107,     0,  1108,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,   289,   290,   291,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,  1109,   320,  1110,   322,   323,   324,   325,   326,
    1111,   327,   328,   329,   330,  1112,   638,   332,  1113,   334,
     335,   336,     0,   337,   338,     0,     0,  1114,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   640,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   641,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1115,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,   405,  1116,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,  1117,   433, -1222,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     643,   450,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,     0,  1118,  1119,     0,   462,     0,   463,
     464,   644,   466,   645,  1120,   468,   469,   646,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
    1121,     0,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,  1122,     0,     0,
       0,     0,     0,     0,  1123,  1124,  1125,     0,     0,     0,
       0,  1126,     0,  1127,     0,     0,     0,     0,     0,  1128,
    1129,     0,     0,     0,     0,  1130,  1131,  1270,  1084,   540,
    1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,  1272,     0,   126,  1090,     0,     0,  1273,   128,
     129,     0,   130,   131,   132,  1274,   134,   135,   136,   137,
    1091,  1275,  1092,  1093,     0,   142,   143,   144,   145,   146,
     147,  1094,   632,   148,   149,  1095,  1096,   152,     0,   153,
     154,   155,   156,   633,     0,  1276,     0,  1277,   160,   161,
     162,   163,   164,  1278,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,  1279,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,  1098,  1099,   188,  1100,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   857,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,  1101,   220,   221,
     222,   223,   224,   635,  1102,   226,     0,   227,   228,  1103,
     230,     0,   231,     0,   232,  1281,     0,  1282,   235,   236,
    1283,  1284,   239,     0,   240,   241,     0,     0,  1104,  1105,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
    1285,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,  1286,   267,   268,   269,   270,
     271,   272,  1106,  1107,     0,  1108,     0,   276,  1287,  1288,
     279,  1289,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,  1290,   290,  1291,     0,   292,   293,   294,   295,
     296,   297,   298,   299,  1292,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,  1109,  1293,  1110,   322,   323,   324,   325,
     326,  1111,   327,   328,  1294,   330,  1112,   638,   332,  1113,
     334,   335,   336,     0,   337,   338,     0,     0,  1114,   340,
     341,     0,     0,   342,   343,  1295,   345,  1296,   640,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   641,  1297,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1115,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,  1298,   403,   404,   405,  1116,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,  1299,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
    1300,   430,   431,  1117,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,  1301,
     448,   643,   450,     0,   451,   452,     0,   453,  1302,   455,
     456,   457,   458,   459,     0,  1118,  1119,     0,   462,     0,
     463,   464,   644,   466,   645,  1120,   468,   469,  1303,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,  1121,     0,   490,  1305,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,  1122,     0,
       0,     0,     0,     0,     0,  1123,  1124,  1125,     0,     0,
       0,     0,  1126,     0,  1127,  3117,     0,     0,     0,     0,
    1128,  1129,     0,     0,     0,     0,  1130,  1131,  1270,  1084,
     540,  1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,  1272,     0,   126,  1090,     0,     0,  1273,
     128,   129,     0,   130,   131,   132,  1274,   134,   135,   136,
     137,  1091,  1275,  1092,  1093,     0,   142,   143,   144,   145,
     146,   147,  1094,   632,   148,   149,  1095,  1096,   152,     0,
     153,   154,   155,   156,   633,     0,  1276,     0,  1277,   160,
     161,   162,   163,   164,  1278,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,  1279,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,  1098,  1099,   188,
    1100,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     857,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,  1101,   220,
     221,   222,   223,   224,   635,  1102,   226,     0,   227,   228,
    1103,   230,     0,   231,     0,   232,  1281,     0,  1282,   235,
     236,  1283,  1284,   239,     0,   240,   241,     0,     0,  1104,
    1105,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,  1285,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,  1286,   267,   268,   269,
     270,   271,   272,  1106,  1107,     0,  1108,     0,   276,  1287,
    1288,   279,  1289,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,  1290,   290,  1291,     0,   292,   293,   294,
     295,   296,   297,   298,   299,  1292,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,  1109,  1293,  1110,   322,   323,   324,
     325,   326,  1111,   327,   328,  1294,   330,  1112,   638,   332,
    1113,   334,   335,   336,     0,   337,   338,     0,     0,  1114,
     340,   341,     0,     0,   342,   343,  1295,   345,  1296,   640,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   641,  1297,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1115,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,  1298,   403,   404,   405,  1116,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,  1299,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,  1300,   430,   431,  1117,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
    1301,   448,   643,   450,     0,   451,   452,     0,   453,  1302,
     455,   456,   457,   458,   459,     0,  1118,  1119,     0,   462,
       0,   463,   464,   644,   466,   645,  1120,   468,   469,  1303,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,  1121,     0,   490,  1305,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,  1122,
       0,     0,     0,     0,     0,     0,  1123,  1124,  1125,     0,
       0,     0,     0,  1126,     0,  1127,     0,     0,     0,     0,
       0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,   113,
    1084,   540,  1085,  1086,     0,  1088,  1089,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,  1090,     0,     0,
     127,   128,   129,     0,   130,   131,   132,   133,   134,   135,
     136,   137,  1091,   139,  1092,  1093,     0,   142,   143,   144,
     145,   146,   147,  1094,   632,   148,   149,  1095,  1096,   152,
       0,   153,   154,   155,   156,   633,     0,   634,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,  1098,  1099,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   857,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,  1101,
     220,   221,   222,   223,   224,   635,  1102,   226,     0,   227,
     228,  1103,   230,     0,   231,     0,   232,   233,    21,   234,
     235,   236,   237,   238,   239,     0,   240,   241,     0,     0,
    1104,  1105,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1106,  1107,     0,  1108,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,   289,   290,   291,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,  1109,   320,  1110,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1112,   638,
     332,  1113,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     640,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    25,    26,    27,     0,   360,   361,   641,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1115,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   405,  1116,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,    32,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,  1117,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   643,   450,     0,   451,   452,    37,   453,
     454,   455,   456,   457,   458,   459,     0,  1118,  1119,     0,
     462,     0,   463,   464,   644,   466,   645,  1120,   468,   469,
     646,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,    39,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   647,  1121,     0,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,    43,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1126,     0,  1127,     0,     0,     0,
       0,     0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,
     113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,  1734,   123,
     124,   125,     0,     0,     0,     0,     0,   126,  1090,     0,
       0,   127,   128,   129,     0,   130,   131,   132,   133,   134,
     135,   136,   137,  1091,   139,  1092,  1093,     0,   142,   143,
     144,   145,   146,   147,  1094,   632,   148,   149,  1095,  1096,
     152,     0,   153,   154,   155,   156,   633,     0,   634,     0,
    1097,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,  1098,
    1099,   188,  1100,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
    1101,   220,   221,   222,   223,   224,   635,  1102,   226,     0,
     227,   228,  1103,   230,     0,   231,     0,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,   241,     0,
       0,  1104,  1105,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1106,  1107,     0,  1108,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,   289,   290,   291,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1109,   320,  1110,   322,
     323,   324,   325,   326,  1111,   327,   328,   329,   330,  1112,
     638,   332,  1113,   334,   335,   336,     0,   337,   338,     0,
       0,  1114,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   640,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     641,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1115,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   405,  1116,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,  1117,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   643,   450,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,     0,  1118,  1119,
       0,   462,     0,   463,   464,   644,   466,   645,  1120,   468,
     469,   646,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,  1121,     0,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,  1122,     0,     0,     0,     0,     0,     0,  1123,  1124,
    1125,     0,     0,     0,     0,  1126,     0,  1127,     0,     0,
       0,     0,     0,  1128,  1129,     0,     0,     0,     0,  1130,
    1131,   113,  1749,   540,  1085,  1086,  1087,  1750,  1089,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,  1751,
     123,   124,   125,     0,     0,     0,     0,     0,   126,  1090,
       0,     0,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,   136,   137,  1091,   139,  1092,  1093,     0,   142,
     143,   144,   145,   146,   147,  1094,   632,   148,   149,  1095,
    1096,   152,     0,   153,   154,   155,   156,   633,     0,   634,
       0,  1097,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
    1098,  1099,   188,  1100,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,  1101,   220,   221,   222,   223,   224,   635,  1102,   226,
       0,   227,   228,  1103,   230,     0,   231,     0,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
       0,     0,  1104,  1105,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1106,  1107,     0,  1108,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,   289,   290,   291,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1109,   320,  1110,
     322,   323,   324,   325,   326,  1111,   327,   328,   329,   330,
    1112,   638,   332,  1113,   334,   335,   336,     0,   337,   338,
       0,     0,  1114,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   640,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   641,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1115,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   405,  1116,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1117,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   643,   450,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,     0,  1118,
    1119,     0,   462,     0,   463,   464,   644,   466,   645,  1120,
     468,   469,   646,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,  1121,     0,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,  1122,     0,     0,     0,     0,     0,     0,  1123,
    1124,  1125,     0,     0,     0,     0,  1126,     0,  1127,     0,
       0,     0,     0,     0,  1128,  1129,     0,     0,     0,     0,
    1130,  1131,   113,  1084,   540,  1085,  1086,  1087,  1088,  1089,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
    1090,     0,     0,   127,   128,   129,     0,   130,   131,   132,
     133,   134,   135,   136,   137,  1091,   139,  1092,  1093,     0,
     142,   143,   144,   145,   146,   147,  1094,   632,   148,   149,
    1095,  1096,   152,     0,   153,   154,   155,   156,   633,     0,
     634,     0,  1097,   160,   161,   162,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,  1098,  1099,   188,  1100,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   857,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,  1101,   220,   221,   222,   223,   224,   635,  1102,
     226,     0,   227,   228,  1103,   230,     0,   231,     0,   232,
     233,  1557,   234,   235,   236,   237,   238,   239,     0,   240,
     241,     0,     0,  1104,  1105,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,  1106,  1107,     0,
    1108,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,   289,   290,   291,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,  1109,   320,
    1110,   322,   323,   324,   325,   326,  1111,   327,   328,   329,
     330,  1112,   638,   332,  1113,   334,   335,   336,     0,   337,
     338,     0,     0,  1114,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   640,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   641,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1115,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   405,
    1116,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,  1117,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   643,   450,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,     0,
    1118,  1119,     0,   462,     0,   463,   464,   644,   466,   645,
    1120,   468,   469,   646,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,  1121,     0,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,  1122,     0,     0,     0,     0,     0,     0,
    1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,  1127,
       0,     0,     0,     0,     0,  1128,  1129,     0,     0,     0,
       0,  1130,  1131,   113,  1084,   540,  1085,  1086,  1087,  1088,
    1089,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,  1090,     0,     0,   127,   128,   129,     0,   130,   131,
     132,   133,   134,   135,   136,   137,  1091,   139,  1092,  1093,
       0,   142,   143,   144,   145,   146,   147,  1094,   632,   148,
     149,  1095,  1096,   152,     0,   153,   154,   155,   156,   633,
       0,   634,     0,  1097,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,  1098,  1099,   188,  1100,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   857,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,  1101,   220,   221,   222,   223,   224,   635,
    1102,   226,     0,   227,   228,  1103,   230,     0,   231,     0,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,     0,     0,  1104,  1105,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,   272,  1106,  1107,
       0,  1108,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,   289,   290,
     291,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,  1109,
     320,  1110,   322,   323,   324,   325,   326,  1111,   327,   328,
     329,   330,  1112,   638,   332,  1113,   334,   335,   336,     0,
     337,   338,     0,     0,  1114,   340,   341,     0,     0,   342,
     343,   344,   345,   346,   640,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   641,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1115,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
     405,  1116,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,  1117,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   643,   450,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
       0,  1118,  1119,     0,   462,     0,   463,   464,   644,   466,
     645,  1120,   468,   469,   646,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,  1121,     0,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,  1122,     0,     0,     0,     0,     0,
       0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,
    1127,  2076,     0,     0,     0,     0,  1128,  1129,     0,     0,
       0,     0,  1130,  1131,   113,  1084,   540,  1085,  1086,  1087,
    1088,  1089,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,  1090,     0,     0,   127,   128,   129,     0,   130,
     131,   132,   133,   134,   135,   136,   137,  1091,   139,  1092,
    1093,     0,   142,   143,   144,   145,   146,   147,  1094,   632,
     148,   149,  1095,  1096,   152,     0,   153,   154,   155,   156,
     633,     0,   634,     0,  1097,   160,   161,   162,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,  1098,  1099,   188,  1100,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   857,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,  1101,   220,   221,   222,   223,   224,
     635,  1102,   226,     0,   227,   228,  1103,   230,     0,   231,
       0,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   241,     0,     0,  1104,  1105,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,  1106,
    1107,     0,  1108,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,   289,
     290,   291,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
    1109,   320,  1110,   322,   323,   324,   325,   326,  1111,   327,
     328,   329,   330,  1112,   638,   332,  1113,   334,   335,   336,
       0,   337,   338,     0,     0,  1114,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   640,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   641,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1115,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,   405,  1116,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
    1117,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   643,   450,
       0,   451,   452,  2715,   453,   454,   455,   456,   457,   458,
     459,     0,  1118,  1119,     0,   462,     0,   463,   464,   644,
     466,   645,  1120,   468,   469,   646,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,  1121,     0,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,  1122,     0,     0,     0,     0,
       0,     0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,
       0,  1127,     0,     0,     0,     0,     0,  1128,  1129,     0,
       0,     0,     0,  1130,  1131,   113,  1084,   540,  1085,  1086,
    1087,  1088,  1089,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,  1090,     0,     0,   127,   128,   129,     0,
     130,   131,   132,   133,   134,   135,   136,   137,  1091,   139,
    1092,  1093,     0,   142,   143,   144,   145,   146,   147,  1094,
     632,   148,   149,  1095,  1096,   152,     0,   153,   154,   155,
     156,   633,     0,   634,     0,  1097,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,  1098,  1099,   188,  1100,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   857,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,  1101,   220,   221,   222,   223,
     224,   635,  1102,   226,     0,   227,   228,  1103,   230,     0,
     231,     0,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,     0,     0,  1104,  1105,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
    1106,  1107,     0,  1108,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
     289,   290,   291,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,  1109,   320,  1110,   322,   323,   324,   325,   326,  1111,
     327,   328,   329,   330,  1112,   638,   332,  1113,   334,   335,
     336,     0,   337,   338,     0,     0,  1114,   340,   341,     0,
       0,   342,   343,   344,   345,   346,   640,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   641,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1115,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   405,  1116,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,  1117,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   643,
     450,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,     0,  1118,  1119,     0,   462,     0,   463,   464,
     644,   466,   645,  1120,   468,   469,   646,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,  1121,
       0,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,  2820,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,  1122,     0,     0,     0,
       0,     0,     0,  1123,  1124,  1125,     0,     0,     0,     0,
    1126,     0,  1127,     0,     0,     0,     0,     0,  1128,  1129,
       0,     0,     0,     0,  1130,  1131,   113,  1084,   540,  1085,
    1086,  1087,  1088,  1089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,  3068,   123,   124,   125,     0,     0,
       0,     0,     0,   126,  1090,     0,     0,   127,   128,   129,
       0,   130,   131,   132,   133,   134,   135,   136,   137,  1091,
     139,  1092,  1093,     0,   142,   143,   144,   145,   146,   147,
    1094,   632,   148,   149,  1095,  1096,   152,     0,   153,   154,
     155,   156,   633,     0,   634,     0,  1097,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,  3069,   178,   179,   180,
     181,   182,   183,   184,   185,  1098,  1099,   188,  1100,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   857,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,  1101,   220,   221,   222,
     223,   224,   635,  1102,   226,     0,   227,   228,  1103,   230,
       0,   231,     0,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,     0,     0,  3070,  1105,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,  1106,  1107,     0,  1108,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,   289,   290,   291,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,  1109,   320,  1110,   322,   323,   324,   325,   326,
    1111,   327,   328,   329,   330,  1112,   638,   332,  1113,   334,
     335,   336,     0,   337,   338,     0,     0,  1114,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   640,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   641,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1115,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,  3071,  1116,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,  1117,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     643,   450,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,     0,  1118,  1119,     0,   462,     0,   463,
     464,   644,   466,   645,  1120,   468,   469,   646,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
    1121,     0,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,  1122,     0,     0,
       0,     0,     0,     0,  1123,  1124,  1125,     0,     0,     0,
       0,  1126,     0,  3072,     0,     0,     0,     0,     0,  1128,
    1129,     0,     0,     0,     0,  1130,  1131,   113,  1084,   540,
    1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,  1090,     0,     0,   127,   128,
     129,     0,   130,   131,   132,   133,   134,   135,   136,   137,
    1091,   139,  1092,  1093,     0,   142,   143,   144,   145,   146,
     147,  1094,   632,   148,   149,  1095,  1096,   152,     0,   153,
     154,   155,   156,   633,     0,   634,     0,  1097,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,  1098,  1099,   188,  1100,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   857,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,  1101,   220,   221,
     222,   223,   224,   635,  1102,   226,     0,   227,   228,  1103,
     230,     0,   231,     0,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,   241,     0,     0,  1104,  1105,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,   272,  1106,  1107,     0,  1108,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,   289,   290,   291,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,  1109,   320,  1110,   322,   323,   324,   325,
     326,  1111,   327,   328,   329,   330,  1112,   638,   332,  1113,
     334,   335,   336,     0,   337,   338,     0,     0,  1114,   340,
     341,     0,     0,   342,   343,   344,   345,   346,   640,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   641,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1115,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   405,  1116,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,  1117,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   643,   450,     0,   451,   452,  3255,   453,   454,   455,
     456,   457,   458,   459,     0,  1118,  1119,     0,   462,     0,
     463,   464,   644,   466,   645,  1120,   468,   469,   646,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,  1121,     0,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,  1122,     0,
       0,     0,     0,     0,     0,  1123,  1124,  1125,     0,     0,
       0,     0,  1126,     0,  1127,     0,     0,     0,     0,     0,
    1128,  1129,     0,     0,     0,     0,  1130,  1131,   113,  1084,
     540,  1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,  1090,     0,     0,   127,
     128,   129,     0,   130,   131,   132,   133,   134,   135,   136,
     137,  1091,   139,  1092,  1093,     0,   142,   143,   144,   145,
     146,   147,  1094,   632,   148,   149,  1095,  1096,   152,     0,
     153,   154,   155,   156,   633,     0,   634,     0,  1097,   160,
     161,   162,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,  1098,  1099,   188,
    1100,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     857,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,  1101,   220,
     221,   222,   223,   224,   635,  1102,   226,     0,   227,   228,
    1103,   230,     0,   231,     0,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,     0,     0,  1104,
    1105,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1106,  1107,     0,  1108,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,   289,   290,   291,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,  1109,   320,  1110,   322,   323,   324,
     325,   326,  1111,   327,   328,   329,   330,  1112,   638,   332,
    1113,   334,   335,   336,     0,   337,   338,     0,     0,  1114,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   640,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   641,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1115,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   405,  1116,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,  1117,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   643,   450,     0,   451,   452,  3459,   453,   454,
     455,   456,   457,   458,   459,     0,  1118,  1119,     0,   462,
       0,   463,   464,   644,   466,   645,  1120,   468,   469,   646,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,  1121,     0,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,  1122,
       0,     0,     0,     0,     0,     0,  1123,  1124,  1125,     0,
       0,     0,     0,  1126,     0,  1127,     0,     0,     0,     0,
       0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,   113,
    1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,  1090,     0,     0,
     127,   128,   129,     0,   130,   131,   132,   133,   134,   135,
     136,   137,  1091,   139,  1092,  1093,     0,   142,   143,   144,
     145,   146,   147,  1094,   632,   148,   149,  1095,  1096,   152,
       0,   153,   154,   155,   156,   633,     0,   634,     0,  1097,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,  1098,  1099,
     188,  1100,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   857,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,  1101,
     220,   221,   222,   223,   224,   635,  1102,   226,     0,   227,
     228,  1103,   230,     0,   231,     0,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,   241,     0,     0,
    1104,  1105,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1106,  1107,     0,  1108,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,   289,   290,   291,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,  1109,   320,  1110,   322,   323,
     324,   325,   326,  1111,   327,   328,   329,   330,  1112,   638,
     332,  1113,   334,   335,   336,     0,   337,   338,     0,     0,
    1114,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     640,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   641,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1115,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   405,  1116,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,  1117,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   643,   450,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,     0,  1118,  1119,     0,
     462,     0,   463,   464,   644,   466,   645,  1120,   468,   469,
     646,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,  1121,     0,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
    1122,     0,     0,     0,     0,     0,     0,  1123,  1124,  1125,
       0,     0,     0,     0,  1126,     0,  1127,     0,     0,     0,
       0,     0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,
     113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,  1090,     0,
       0,   127,   128,   129,     0,   130,   131,   132,   133,   134,
     135,   136,   137,  1091,   139,  1092,  1093,     0,   142,   143,
     144,   145,   146,   147,  1094,   632,   148,   149,  1095,  1096,
     152,     0,   153,   154,   155,   156,   633,     0,   634,     0,
    1097,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,  1098,
    1099,   188,  1100,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
    1101,   220,   221,   222,   223,   224,   635,  1102,   226,     0,
     227,   228,  1103,   230,     0,   231,     0,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,   241,     0,
       0,  1104,  1105,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1106,  1107,     0,  1108,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,   289,   290,   291,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1109,   320,  1110,   322,
     323,   324,   325,   326,  1111,   327,   328,   329,   330,  1112,
     638,   332,  1113,   334,   335,   336,     0,   337,   338,     0,
       0,  1114,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   640,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     641,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1115,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   405,  1116,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,  1117,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   643,   450,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,     0,  1118,  1119,
       0,   462,     0,   463,   464,   644,   466,   645,  1120,   468,
     469,   646,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,  1121,     0,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,  1122,     0,     0,     0,     0,     0,     0,  1754,  1755,
    1125,     0,     0,     0,     0,  1126,     0,  1127,     0,     0,
       0,     0,     0,  1128,  1129,     0,     0,     0,     0,  1130,
    1131,   113,  2214,   540,  1085,  1086,  1087,  1088,  1089,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,  1090,
       0,     0,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,   136,   137,  1091,   139,  1092,  1093,     0,   142,
     143,   144,   145,   146,   147,  1094,   632,   148,   149,  1095,
    1096,   152,     0,   153,   154,   155,   156,   633,     0,   634,
       0,  1097,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
    1098,  1099,   188,  1100,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,  1101,   220,   221,   222,   223,   224,   635,  1102,   226,
       0,   227,   228,  1103,   230,     0,   231,     0,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
       0,     0,  1104,  1105,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1106,  1107,     0,  1108,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,   289,   290,   291,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1109,   320,  1110,
     322,   323,   324,   325,   326,  1111,   327,   328,   329,   330,
    1112,   638,   332,  1113,   334,   335,   336,     0,   337,   338,
       0,     0,  1114,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   640,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   641,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1115,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   405,  1116,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1117,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   643,   450,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,     0,  1118,
    1119,     0,   462,     0,   463,   464,   644,   466,   645,  1120,
     468,   469,   646,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,  1121,     0,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,  1122,     0,     0,     0,     0,     0,     0,  1123,
    1124,  1125,     0,     0,     0,     0,  1126,     0,  1127,     0,
       0,     0,     0,     0,  1128,  1129,     0,     0,     0,     0,
    1130,  1131,   113,  1084,   540,  1085,  1086,  1087,  1088,  1089,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
    1090,     0,     0,   127,   128,   129,     0,   130,   131,   132,
     133,   134,   135,   136,   137,  1091,   139,  1092,  1093,     0,
     142,   143,   144,   145,   146,   147,  1094,   632,   148,   149,
    1095,  1096,   152,     0,   153,   154,   155,   156,   633,     0,
     634,     0,  1097,   160,   161,   162,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,  1098,  1099,   188,  1100,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   857,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,  1101,   220,   221,   222,   223,   224,   635,  1102,
     226,     0,   227,   228,  1103,   230,     0,   231,     0,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
     241,     0,     0,  1104,  1105,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,  1106,  1107,     0,
    1108,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,   289,   290,   291,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,  1109,   320,
    1110,   322,   323,   324,   325,   326,  1111,   327,   328,   329,
     330,  1112,   638,   332,  1113,   334,   335,   336,     0,   337,
     338,     0,     0,  1114,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   640,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   641,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1115,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   405,
    1116,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,  1117,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   643,   450,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,     0,
    1118,  1119,     0,   462,     0,   463,   464,   644,   466,   645,
    1120,   468,   469,   646,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,  1121,     0,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,  1122,     0,     0,     0,     0,     0,     0,
    1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,  2494,
       0,     0,     0,     0,     0,  1128,  1129,     0,     0,     0,
       0,  1130,  1131,   113,  1084,   540,  1085,  1086,  1087,  1088,
    1089,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,  1090,     0,     0,   127,   128,   129,     0,   130,   131,
     132,   133,   134,   135,   136,   137,  1091,   139,  1092,  1093,
       0,   142,   143,   144,   145,   146,   147,  1094,   632,   148,
     149,  1095,  1096,   152,     0,   153,   154,   155,   156,   633,
       0,   634,     0,  1097,   160,   161,   162,   163,   164,   165,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,   175,   176,  3069,   178,   179,   180,   181,   182,   183,
     184,   185,  1098,  1099,   188,  1100,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   857,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,  1101,   220,   221,   222,   223,   224,   635,
    1102,   226,     0,   227,   228,  1103,   230,     0,   231,     0,
     232,   233,     0,   234,   235,   236,   237,   238,   239,     0,
     240,   241,     0,     0,  3070,  1105,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   266,   267,   268,   269,   270,   271,   272,  1106,  1107,
       0,  1108,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,   289,   290,
     291,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,  1109,
     320,  1110,   322,   323,   324,   325,   326,  1111,   327,   328,
     329,   330,  1112,   638,   332,  1113,   334,   335,   336,     0,
     337,   338,     0,     0,  1114,   340,   341,     0,     0,   342,
     343,   344,   345,   346,   640,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   641,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,  1115,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   402,   403,   404,
    3071,  1116,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,  1117,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   643,   450,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,   459,
       0,  1118,  1119,     0,   462,     0,   463,   464,   644,   466,
     645,  1120,   468,   469,   646,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,  1121,     0,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,  1122,     0,     0,     0,     0,     0,
       0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,     0,
    3072,     0,     0,     0,     0,     0,  1128,  1129,     0,     0,
       0,     0,  1130,  1131,   113,  1084,   540,  1085,  1086,  1087,
    1088,  1089,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,  1090,     0,     0,   127,   128,   129,     0,   130,
     131,   132,   133,   134,   135,   136,  3717,  1091,   139,  1092,
    1093,     0,   142,   143,   144,   145,   146,   147,  1094,   632,
     148,   149,  1095,  1096,   152,     0,   153,   154,   155,   156,
     633,     0,   634,     0,  1097,   160,   161,   162,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,  3718,   179,   180,   181,   182,
     183,   184,   185,  1098,  1099,   188,  1100,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   857,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,  1101,   220,   221,   222,   223,   224,
     635,  1102,   226,     0,   227,   228,  1103,   230,     0,   231,
       0,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   241,     0,     0,  1104,  1105,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,  1106,
    1107,     0,  1108,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,   289,
     290,   291,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
    1109,   320,  1110,   322,   323,   324,   325,   326,  1111,   327,
     328,   329,   330,  1112,   638,   332,  1113,   334,   335,   336,
       0,   337,   338,     0,     0,  1114,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   640,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   641,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,  1115,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,   405,  1116,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
    1117,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   643,   450,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,     0,  1118,  1119,     0,   462,     0,   463,   464,   644,
     466,   645,  1120,   468,   469,   646,   471,   472,  3719,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,  1121,     0,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,  1122,     0,     0,     0,     0,
       0,     0,  1123,  1124,  1125,     0,     0,     0,     0,  1126,
       0,  1127,     0,     0,     0,     0,     0,  1128,  1129,     0,
       0,     0,     0,  1130,  1131,   113,  1084,   540,  1085,  1086,
    1087,  1088,  1089,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,  1090,     0,     0,   127,   128,   129,     0,
     130,   131,   132,   133,   134,   135,   136,   137,  1091,   139,
    1092,  1093,     0,   142,   143,   144,   145,   146,   147,  1094,
     632,   148,   149,  1095,  1096,   152,     0,   153,   154,   155,
     156,   633,     0,   634,     0,  1097,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,  3718,   179,   180,   181,
     182,   183,   184,   185,  1098,  1099,   188,  1100,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   857,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,  1101,   220,   221,   222,   223,
     224,   635,  1102,   226,     0,   227,   228,  1103,   230,     0,
     231,     0,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,     0,     0,  1104,  1105,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
    1106,  1107,     0,  1108,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
     289,   290,   291,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,  1109,   320,  1110,   322,   323,   324,   325,   326,  1111,
     327,   328,   329,   330,  1112,   638,   332,  1113,   334,   335,
     336,     0,   337,   338,     0,     0,  1114,   340,   341,     0,
       0,   342,   343,   344,   345,   346,   640,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   641,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,  1115,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   405,  1116,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,  1117,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   643,
     450,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,     0,  1118,  1119,     0,   462,     0,   463,   464,
     644,   466,   645,  1120,   468,   469,   646,   471,   472,  3719,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,  1121,
       0,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,  1122,     0,     0,     0,
       0,     0,     0,  1123,  1124,  1125,     0,     0,     0,     0,
    1126,     0,  1127,     0,     0,     0,     0,     0,  1128,  1129,
       0,     0,     0,     0,  1130,  1131,   113,  1084,   540,  1085,
    1086,     0,  1088,  1089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,   126,  1090,     0,     0,   127,   128,   129,
       0,   130,   131,   132,   133,   134,   135,   136,   137,  1091,
     139,  1092,  1093,     0,   142,   143,   144,   145,   146,   147,
    1094,   632,   148,   149,  1095,  1096,   152,     0,   153,   154,
     155,   156,   633,     0,   634,     0,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,  1098,  1099,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   857,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,  1101,   220,   221,   222,
     223,   224,   635,  1102,   226,     0,   227,   228,  1103,   230,
       0,   231,     0,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,     0,     0,  1104,  1105,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,  1106,  1107,     0,  1108,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,   289,   290,   291,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,  1109,   320,  1110,   322,   323,   324,   325,   326,
    2858,   327,   328,   329,   330,  1112,   638,   332,  1113,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   640,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   641,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,  1115,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,   405,  1116,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,  1117,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     643,   450,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,     0,  1118,  1119,     0,   462,     0,   463,
     464,   644,   466,   645,  1120,   468,   469,   646,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
    1121,     0,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,  2859,     0,     0,
       0,     0,     0,     0,  2860,  2861,     0,     0,     0,     0,
       0,  1126,     0,  1127,     0,     0,     0,     0,     0,  1128,
    1129,     0,     0,     0,     0,  1130,  1131,   113,  1084,   540,
    1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,  1090,     0,     0,   127,   128,
     129,     0,   130,   131,   132,   133,   134,   135,   136,   137,
    1091,   139,  1092,  1093,     0,   142,   143,   144,   145,   146,
     147,  1094,   632,   148,   149,  1095,  1096,   152,     0,   153,
     154,   155,   156,   633,     0,   634,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,  1098,  1099,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   857,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,  1101,   220,   221,
     222,   223,   224,   635,  1102,   226,     0,   227,   228,  1103,
     230,     0,   231,     0,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,   241,     0,     0,  1104,  1105,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,   272,  1106,  1107,     0,  1108,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,   289,   290,   291,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,  1109,   320,  1110,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,  1112,   638,   332,  1113,
     334,   335,   336,     0,   337,   338,     0,     0,  1114,   340,
     341,     0,     0,   342,   343,   344,   345,   346,   640,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   641,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,  1115,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   405,  1116,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,  1117,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   643,   450,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,     0,  1118,  1119,     0,   462,     0,
     463,   464,   644,   466,   645,  1120,   468,   469,   646,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,  1121,     0,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,     0,     0,
       0,     0,     0,     0,     0,  1543,  1544,     0,     0,     0,
       0,     0,  1126,     0,  1127,     0,     0,     0,     0,     0,
    1128,  1129,     0,     0,     0,     0,  1130,  1131,   113,  1084,
     540,  1085,  1086,  1087,  1088,  1089,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,  1090,     0,     0,   127,
     128,   129,     0,   130,   131,   132,   133,   134,   135,   136,
   -2128,  1091,   139,  1092,  1093,     0,   142,   143,   144,   145,
     146,   147,  1094,   632,   148,   149,  1095,  1096,   152,     0,
     153,   154,   155,   156,   633,     0,   634,     0,  1097,   160,
     161,   162,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,  3718,
     179,   180,   181,   182,   183,   184,   185,  1098,  1099,   188,
    1100,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     857,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,  1101,   220,
     221,   222,   223,   224,   635,  1102,   226,     0,   227,   228,
    1103,   230,     0,   231,     0,   232,   233,     0,   234,   235,
     236,   237, -2128,   239,     0,   240,   241,     0,     0,  1104,
    1105,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252, -2128,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,  1106,  1107,     0,  1108,     0,   276,     0,
       0,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,   289,   290, -2128,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,  1109,   320,  1110,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,  1112,   638,   332,
    1113,   334,   335,   336,     0,   337,   338,     0,     0,  1114,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   640,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   641,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,  1115,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   405,  1116,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428, -2128,   430,   431,  1117,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   643,   450,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,     0,  1118,  1119,     0,   462,
       0,   463,   464,   644,   466,   645,  1120,   468,   469,   646,
     471,   472,  3719,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,  1121,     0,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520, -2128,
       0,     0,     0,     0,     0,     0,  1123,  1124,  1125,     0,
       0,     0,     0,  1126,     0,  1127,     0,     0,     0,     0,
       0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,   113,
    1084,   540,  1085,  1086,     0,  1088,  1089,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,  1090,     0,     0,
     127,   128,   129,     0,   130,   131,   132,   133,   134,   135,
     136,   137,  1091,   139,  1092,  1093,     0,   142,   143,   144,
     145,   146,   147,  1094,   632,   148,   149,  1095,  1096,   152,
       0,   153,   154,   155,   156,   633,     0,   634,     0,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,  1098,  1099,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   857,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,  1101,
     220,   221,   222,   223,   224,   635,  1102,   226,     0,   227,
     228,  1103,   230,     0,   231,     0,   232,   233,     0,   234,
     235,   236,   237,   238,   239,     0,   240,   241,     0,     0,
    1104,  1105,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   266,   267,   268,
     269,   270,   271,   272,  1106,  1107,     0,  1108,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,   289,   290,   291,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,  1109,   320,  1110,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,  1112,   638,
     332,  1113,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,   344,   345,   346,
     640,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   641,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
    1115,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   402,   403,   404,   405,  2200,  2201,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,  1117,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   643,   450,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,   459,     0,  1118,  1119,     0,
     462,     0,   463,   464,   644,   466,   645,  1120,   468,   469,
     646,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,  1121,     0,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
       0,     0,     0,     0,     0,     0,     0,  2202,  2203,     0,
       0,     0,     0,     0,  1126,     0,  1127,     0,     0,     0,
       0,     0,  1128,  1129,     0,     0,     0,     0,  1130,  1131,
     113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,  1090,     0,
       0,   127,   128,   129,     0,   130,   131,   132,   133,   134,
     135,   136,   137,  1091,   139,  1092,  1093,     0,   142,   143,
     144,   145,   146,   147,  1094,   632,   148,   149,  1095,  1096,
     152,     0,   153,   154,   155,   156,   633,     0,   634,     0,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,  1098,
    1099,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
    1101,   220,   221,   222,   223,   224,   635,  1102,   226,     0,
     227,   228,  1103,   230,     0,   231,     0,   232,   233,     0,
     234,   235,   236,   237,   238,   239,     0,   240,   241,     0,
       0,  1104,  1105,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1106,  1107,     0,  1108,     0,
     276,     0,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,   289,   290,   291,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1109,   320,  1110,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,  1112,
     638,   332,  1113,   334,   335,   336,     0,   337,   338,     0,
       0,  1114,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   640,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     641,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1115,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   405,  1116,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,  1117,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   643,   450,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,     0,  1118,  1119,
       0,   462,     0,   463,   464,   644,   466,   645,  1120,   468,
     469,   646,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,  1121,     0,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     0,     0,     0,     0,     0,     0,     0,  1543,  1544,
       0,     0,     0,     0,     0,  1126,     0,  1127,     0,     0,
       0,     0,     0,  1128,  1129,     0,     0,     0,     0,  1130,
    1131,   113,  1084,   540,  1085,  1086,     0,  1088,  1089,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,  1090,
       0,     0,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,   136,   137,  1091,   139,  1092,  1093,     0,   142,
     143,   144,   145,   146,   147,  1094,   632,   148,   149,  1095,
    1096,   152,     0,   153,   154,   155,   156,   633,     0,   634,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
    1098,  1099,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,  1101,   220,   221,   222,   223,   224,   635,  1102,   226,
       0,   227,   228,  1103,   230,     0,   231,     0,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
       0,     0,  1104,  1105,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1106,  1107,     0,  1108,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,   289,   290,   291,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1109,   320,  1110,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
    1112,   638,   332,  1113,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   640,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   641,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1115,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   405,  1116,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1117,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   643,   450,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,     0,  1118,
    1119,     0,   462,     0,   463,   464,   644,   466,   645,  1120,
     468,   469,   646,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,  1121,     0,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1126,     0,  1127,     0,
       0,     0,     0,     0,  1128,  1129,     0,     0,     0,     0,
    1130,  1131,   113,  1084,   540,  1085,  1086,     0,  1088,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
    1090,     0,     0,   127,   128,   129,     0,   130,   131,   132,
     133,   134,   135,   136,   137,  1091,   139,  1092,  1093,     0,
     142,   143,   144,   145,   146,   147,  1094,     0,   148,   149,
    1095,  1096,   152,     0,   153,   154,   155,   156,   157,     0,
     158,     0,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,  1098,  1099,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   857,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,  1101,   220,   221,   222,   223,   224,   225,  1102,
     226,     0,   227,   228,  1103,   230,     0,   231,     0,   232,
     233,     0,   234,   235,   236,   237,   238,   239,     0,   240,
     241,     0,  3089,  1104,  1105,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     266,   267,   268,   269,   270,   271,   272,  1106,  1107,     0,
    1108,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,   289,   290,   291,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,  1109,   320,
    1110,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,  1112,   331,   332,  1113,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,  1115,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,  1117,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,   459,     0,
    1118,  1119,     0,   462,     0,   463,   464,   465,   466,   467,
    1120,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,  1121,     0,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1126,     0,  2772,
     113,  1084,   540,  1085,  1086,  1087,  1088,  1089,     0,     0,
       0,  1130,  1131,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,  1090,     0,
       0,   127,   128,   129,     0,   130,   131,   132,   133,   134,
     135,   136,     0,  1091,   139,  1092,  1093,     0,   142,   143,
     144,   145,   146,   147,  1094,   632,   148,   149,  1095,  1096,
     152,     0,   153,   154,   155,   156,   633,     0,   634,     0,
    1097,   160,   161,   162,   163,   164,   165,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,  1098,
    1099,   188,  1100,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,     0,   214,     0,   215,   216,   217,   218,
    1101,   220,   221,   222,   223,   224,   635,  1102,   226,     0,
     227,   228,  1103,   230,     0,   231,     0,   232,   233,     0,
     234,   235,   236,   237,     0,   239,     0,   240,   241,     0,
       0,  1104,  1105,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,   266,   267,
     268,   269,   270,   271,   272,  1106,  1107,     0,  1108,     0,
     276,     0,     0,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,   289,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,  1109,   320,  1110,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,  1112,
     638,   332,  1113,   334,   335,   336,     0,   337,   338,     0,
       0,  1114,   340,   341,     0,     0,   342,   343,   344,   345,
     346,   640,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     641,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,  1115,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,   402,   403,   404,   405,  1116,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,  1117,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   643,   450,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,   459,     0,  1118,  1119,
       0,   462,     0,   463,   464,   644,   466,   645,  1120,   468,
     469,   646,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,  1121,     0,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,     0,     0,     0,     0,     0,     0,     0,  1123,  1124,
    1125,     0,     0,     0,     0,  1126,     0,  1127,     0,     0,
       0,     0,     0,  1128,  1129,     0,     0,     0,     0,  1130,
    1131,   113,  1084,   540,  1085,  1086,     0,  1088,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,  1090,
       0,     0,   127,   128,   129,     0,   130,   131,   132,   133,
     134,   135,   136,   137,  1091,   139,  1092,  1093,     0,   142,
     143,   144,   145,   146,   147,  1094,     0,   148,   149,  1095,
    1096,   152,     0,   153,   154,   155,   156,   157,     0,   158,
       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
    1098,  1099,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,  1101,   220,   221,   222,   223,   224,   225,  1102,   226,
       0,   227,   228,  1103,   230,     0,   231,     0,   232,   233,
       0,   234,   235,   236,   237,   238,   239,     0,   240,   241,
       0,     0,  1104,  1105,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   266,
     267,   268,   269,   270,   271,   272,  1106,  1107,     0,  1108,
       0,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,   289,   290,   291,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,  1109,   320,  1110,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
    1112,   331,   332,  1113,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,  1115,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,  1117,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,   459,     0,  1118,
    1119,     0,   462,     0,   463,   464,   465,   466,   467,  1120,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,  1121,     0,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   709,     0,     0,  1126,     0,  2772,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1130,  1131,   114,   115,   116,   117,     0,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   710,   711,     0,   712,   713,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   714,   715,   152,     0,   153,   154,   155,   156,   716,
       0,     0,     0,     0,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   717,   718,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,     0,     0,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   719,   220,   221,   222,   223,   224,   720,
       0,   226,     0,   227,   228,   721,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   722,     0,   239,     0,
     240,     0,     0,     0,   723,   724,     0,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   725,   268,   269,   270,   271,   272,   726,   727,
       0,   728,     0,   276,     0,     0,   279,     0,   281,     0,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     729,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   730,
       0,   731,   322,   323,   324,     0,   732,     0,   327,   328,
       0,   330,     0,   733,   332,   734,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     735,     0,   345,     0,   736,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,   359,     0,     0,     0,
       0,   360,   361,   737,     0,   364,   365,   738,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,     0,   377,
       0,   378,   379,   380,   739,   382,   383,   384,   385,     0,
     386,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   740,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   741,   425,   426,     0,   428,     0,     0,   431,   742,
     433,     0,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   743,   448,   744,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   745,   746,     0,     0,     0,   463,   464,   747,   466,
     748,     0,   468,   469,   749,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,  1536,   751,     0,   490,
       0,   492,     0,   494,   495,   496,   497,     0,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   752,
     753,   754,   755,   756,   757,   758,   759,   760,   761,   762,
     517,   518,   519,   520,     0,     0,     0,     0,     0,     0,
       0,     0,   529,     0,     0,     0,     0,     0,     0,     0,
    3334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3335,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,  1044,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,  -673,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,  -673,   227,   228,   229,   230,  -673,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,  -673,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
    -673,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,  -673,   337,
     338,     0,     0,   339,   340,   341,     0,  -673,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,  -673,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1196,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   113,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2472,  3314,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,   127,   128,   129,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   632,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     633,     0,   634,     0,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     635,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,   233,    21,   234,   235,   236,   237,   238,   239,
       0,   240,   241,   636,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   637,     0,   288,   289,
     290,   291,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   638,   332,   333,   334,   335,   336,
       0,   337,   338,     0,   639,   339,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   640,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    25,    26,
      27,     0,   360,   361,   641,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,   405,   406,   642,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    32,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   643,   450,
       0,   451,   452,    37,   453,   454,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   644,
     466,   645,     0,   468,   469,   646,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,    39,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   647,   489,     0,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,    43,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     0,   113,    44,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   648,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,   126,     0,     0,     0,   127,   128,   129,
       0,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,   632,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   156,   633,     0,   634,     0,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   635,     0,   226,     0,   227,   228,   229,   230,
       0,   231,     0,   232,   233,     0,   234,   235,   236,   237,
     238,   239,     0,   240,   241,   636,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,     0,   275,     0,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   637,     0,
     288,   289,   290,   291,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   638,   332,   333,   334,
     335,   336,     0,   337,   338,     0,   639,   339,   340,   341,
       0,     0,   342,   343,   344,   345,   346,   640,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   641,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     402,   403,   404,   405,   406,   642,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     643,   450,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,   459,     0,   460,   461,     0,   462,     0,   463,
     464,   644,   466,   645,     0,   468,   469,   646,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   647,
     489,     0,   490,   491,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   113,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   648,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,     0,     0,     0,   127,   128,
     129,     0,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,   632,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   633,     0,   634,     0,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   635,     0,   226,     0,   227,   228,   229,
     230,     0,   231,     0,   232,   233,     0,   234,   235,   236,
     237,   238,   239,     0,   240,   241,     0,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,   289,   290,   291,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   638,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,   344,   345,   346,   640,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   641,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   402,   403,   404,   405,   406,   642,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   643,   450,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,   459,     0,   460,   461,     0,   462,     0,
     463,   464,   644,   466,   645,     0,   468,   469,   646,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,   489,     0,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   113,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   690,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,     0,     0,   127,
     128,   129,     0,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,   632,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   633,     0,   634,     0,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   635,     0,   226,     0,   227,   228,
     229,   230,     0,   231,     0,   232,   233,     0,   234,   235,
     236,   237,   238,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,   289,   290,   291,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,     0,   638,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,   344,   345,   346,   640,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   641,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   643,   450,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   644,   466,   645,     0,   468,   469,   646,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3462,     0,     0,   114,   115,
     116,   117,     0,   119,   120,   121,   122,     0,   123,   124,
     125,     3,     4,     0,   929,     0,     0,     0,     0,     0,
     930,   128,   129,     0,   130,   131,   132,   931,   134,   135,
     136,   932,   933,   934,   935,   936,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   937,   938,   152,
       0,   153,   154,   155,   156,   939,     0,   940,     0,   941,
     160,   161,   162,   163,   164,   942,   166,   167,   168,     0,
     169,   170,   171,   172,   173,     0,     0,   943,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   944,   945,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,     0,     0,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   946,
     220,   221,   222,   223,   224,   947,     0,   226,     0,   227,
     228,   948,   230,     0,   231,     0,   232,   949,    21,   950,
     235,   236,   951,   952,   239,     0,   240,     0,     0,     0,
     953,   954,     0,   245,     0,   246,   247,   248,   249,   250,
     251,   252,   955,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,   956,   957,   268,
     269,   270,   271,   272,   958,   959,     0,   960,     0,   276,
     961,   962,   279,   963,   281,     0,   283,   284,   285,   286,
     287,     0,     0,   288,   964,   290,   965,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   966,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   967,   968,   969,   322,   323,
     324,     0,   970,     0,   327,   328,   971,   330,     0,   972,
     332,   973,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   974,   975,   345,   976,
     977,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,     0,   359,    25,    26,    27,     0,   360,   361,   978,
     979,   364,   365,   980,   367,   368,   369,     0,   370,   371,
     372,   373,   374,     0,     0,   377,     0,   378,   379,   380,
     981,   382,   383,   384,   385,     0,   386,   387,   388,     0,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,   982,   403,   404,   405,   983,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,    32,
     984,   418,   419,   420,   421,   422,   423,   985,   425,   426,
       0,   428,   986,     0,   431,   987,   433,     0,     0,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   988,   448,   989,   450,     0,   451,   452,    37,   453,
     990,   455,   456,   457,   458,   459,     0,   991,   992,     0,
       0,     0,   463,   464,   993,   466,   994,     0,   468,   469,
     995,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,    39,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   996,   997,     0,   490,   998,   492,     0,   494,
     495,   496,   497,     0,     0,     0,   499,     0,    43,   500,
     501,   502,   503,   504,   505,   999,  1000,  1001,  1002,  1003,
    1004,  1005,  1006,  1007,  1008,  1009,   517,   518,   519,   520,
       0,     0,    44,   928,  1502,   540,     0,     0,     0,  1088,
       0,     0,     0,     0,     0,     0,   690,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,   929,     0,
       0,     0,     0,     0,   930,   128,   129,     0,   130,   131,
     132,   931,   134,   135,   136,   932,   933,   934,   935,   936,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   937,   938,   152,     0,   153,   154,   155,   156,   939,
       0,   940,     0,   941,   160,   161,   162,   163,   164,   942,
     166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
       0,   943,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   944,   945,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,     0,     0,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   946,   220,   221,   222,   223,   224,   947,
    1503,   226,     0,   227,   228,   948,   230,     0,   231,     0,
     232,   949,     0,   950,   235,   236,   951,   952,   239,     0,
     240,     0,     0,     0,   953,   954,     0,   245,     0,   246,
     247,   248,   249,   250,   251,   252,   955,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   956,   957,   268,   269,   270,   271,   272,   958,   959,
       0,   960,     0,   276,   961,   962,   279,   963,   281,     0,
     283,   284,   285,   286,   287,     0,     0,   288,   964,   290,
     965,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     966,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   967,
     968,   969,   322,   323,   324,     0,   970,     0,   327,   328,
     971,   330,     0,   972,   332,   973,   334,   335,   336,     0,
     337,   338,  1504,     0,   339,   340,   341,     0,     0,   342,
     974,   975,   345,   976,   977,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,   359,     0,     0,     0,
       0,   360,   361,   978,   979,   364,   365,   980,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,     0,   377,
       0,   378,   379,   380,   981,   382,   383,   384,   385,     0,
     386,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   982,   403,   404,
     405,   983,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   984,   418,   419,   420,   421,   422,
     423,   985,   425,   426,     0,   428,   986,     0,   431,   987,
     433,     0,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   988,   448,   989,   450,     0,
     451,   452,     0,   453,   990,   455,   456,   457,   458,   459,
       0,   991,   992,     0,     0,     0,   463,   464,   993,   466,
     994,  1505,   468,   469,   995,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,  1385,   997,     0,   490,
     998,   492,     0,   494,   495,   496,   497,     0,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   999,
    1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
     517,   518,   519,   520,   529,     0,     0,     0,     0,     0,
       0,  1506,  1507,  2389,     0,     0,     0,     0,     0,     0,
    2390,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   787,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,    21,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    25,    26,
      27,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    32,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,    37,   453,     0,   455,   456,   457,   458,
     459,     0,   788,   461,     0,   462,     0,   789,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,    39,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   647,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,    43,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   529,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   690,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,     0,   128,   129,     0,
     130,   131,   132,     0,   134,   135,   136,   137,   138,     0,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,     0,     0,   159,   160,   161,   162,   163,
     164,     0,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,     0,    21,     0,   235,   236,   530,     0,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
       0,   290,     0,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   531,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,     0,   345,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    25,
      26,    27,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,    32,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   532,   448,   449,
     450,     0,   451,   452,    37,   453,     0,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,    39,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   647,   489,
       0,   490,     0,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,    43,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,     0,   529,    44,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   690,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,   128,
     129,     0,   130,   131,   132,     0,   134,   135,   136,   137,
     138,     0,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   157,     0,     0,     0,   159,   160,   161,
     162,   163,   164,     0,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   227,   228,   229,
     230,     0,   231,     0,   232,     0,     0,     0,   235,   236,
     530,     0,   239,     0,   240,   241,     0,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,     0,   290,     0,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   531,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,     0,   345,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   532,
     448,   449,   450,     0,   451,   452,     0,   453,     0,   455,
     456,   457,   458,   459,     0,   460,   461,     0,   462,     0,
     463,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,   489,     0,   490,     0,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   529,     0,
     556,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1031,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
     128,   129,     0,   130,   131,   132,     0,   134,   135,   136,
     137,   138,     0,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   157,     0,     0,     0,   159,   160,
     161,   162,   163,   164,     0,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   227,   228,
     229,   230,     0,   231,     0,   232,     0,     0,     0,   235,
     236,   530,     0,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,     0,   290,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   531,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,     0,   345,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     532,   448,   449,   450,     0,   451,   452,     0,   453,     0,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,     0,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   529,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1595,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,     0,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   460,   461,     0,
     462,     0,   463,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2226,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   529,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2472,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   128,   129,     0,   130,   131,   132,     0,
     134,   135,   136,   137,   138,     0,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   157,     0,     0,
       0,   159,   160,   161,   162,   163,   164,     0,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   227,   228,   229,   230,     0,   231,     0,   232,     0,
       0,     0,   235,   236,   530,     0,   239,     0,   240,   241,
       0,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     267,   268,   269,   270,   271,   272,   273,   274,     0,   275,
       0,   276,     0,     0,   279,     0,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,     0,   290,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   531,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   330,
       0,   331,   332,   333,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,     0,
     345,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,     0,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   532,   448,   449,   450,     0,   451,   452,
       0,   453,     0,   455,   456,   457,   458,   459,     0,   460,
     461,     0,   462,     0,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,   489,     0,   490,     0,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   529,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2610,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   227,   228,   229,   230,     0,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3308,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   251,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2078,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   529,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2186,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,     0,   128,   129,     0,
     130,   131,   132,     0,   134,   135,   136,   137,   138,     0,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,     0,     0,   159,   160,   161,   162,   163,
     164,     0,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,     0,     0,     0,   235,   236,   530,     0,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
       0,   290,     0,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   531,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,     0,   345,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   532,   448,   449,
     450,     0,   451,   452,     0,   453,     0,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,   489,
       0,   490,     0,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   709,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3122,     0,     0,   114,   115,   116,   117,     0,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   128,   129,
       0,   130,   131,   132,     0,   134,   135,   136,   710,   711,
       0,   712,   713,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   714,   715,   152,     0,   153,   154,
     155,   156,   716,     0,     0,     0,     0,   160,   161,   162,
     163,   164,     0,   166,   167,   168,     0,   169,   170,   171,
     172,   173,     0,     0,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   717,   718,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,     0,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   719,   220,   221,   222,
     223,   224,   720,     0,   226,     0,   227,   228,   721,   230,
       0,   231,     0,   232,     0,    21,     0,   235,   236,   722,
       0,   239,     0,   240,     0,     0,     0,   723,   724,     0,
     245,     0,   246,   247,   248,   249,   250,   251,   252,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   725,   268,   269,   270,   271,
     272,   726,   727,     0,   728,     0,   276,     0,     0,   279,
       0,   281,     0,   283,   284,   285,   286,   287,     0,     0,
     288,     0,   290,     0,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   729,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   730,     0,   731,   322,   323,   324,     0,   732,
       0,   327,   328,     0,   330,     0,   733,   332,   734,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,   735,     0,   345,     0,   736,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,   359,
      25,    26,    27,     0,   360,   361,   737,     0,   364,   365,
     738,   367,   368,   369,     0,   370,   371,   372,   373,   374,
       0,     0,   377,     0,   378,   379,   380,   739,   382,   383,
     384,   385,     0,   386,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
       0,   403,   404,   405,   740,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,    32,     0,   418,   419,
     420,   421,   422,   423,   741,   425,   426,     0,   428,     0,
       0,   431,   742,   433,     0,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   743,   448,
     744,   450,     0,   451,   452,    37,   453,     0,   455,   456,
     457,   458,   459,     0,   745,   746,     0,     0,     0,   463,
     464,   747,   466,   748,     0,   468,   469,   749,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,    39,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   750,
     751,     0,   490,     0,   492,     0,   494,   495,   496,   497,
       0,     0,     0,   499,     0,    43,   500,   501,   502,   503,
     504,   505,   752,   753,   754,   755,   756,   757,   758,   759,
     760,   761,   762,   517,   518,   519,   520,     0,     0,    44,
       0,     0,  2952,  1502,   540,     0,     0,  2058,  1088,     0,
       0,     0,     0,   690,  2059,  2060,     0,     0,  2061,  2062,
    2063,   114,   115,   116,   117,     0,   119,   120,   121,   122,
    1317,   123,   124,   125,  1318,  1319,  1320,  2953,  1321,     0,
    1322,  1323,  1324,  2954,   128,   129,  1325,   130,   131,   132,
    2955,   134,   135,   136,     0,   845,  2956,   847,   848,  1326,
     142,   143,   144,   145,   146,   147,  1327,  1328,   148,   149,
     849,   850,   152,  1329,   153,   154,   155,   156,     0,  1330,
    2957,  1331,  2958,   160,   161,   162,   163,   164,  2959,   166,
     167,   168,  1332,   169,   170,   171,   172,   173,     0,  1333,
    2960,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   855,   856,   188,  1334,   189,  1335,   190,   191,   192,
     193,   194,   195,  1336,   196,     0,   198,   199,   200,   201,
    1337,  1338,   202,   203,   857,   205,   206,     0,     0,  1339,
     209,   210,   211,  1340,   212,   213,   214,  1341,   215,   216,
     217,   218,     0,   220,   221,   222,   223,   224,     0,  1342,
     226,  1343,   227,   228,   858,   230,  1344,   231,  1345,   232,
    2961,  1346,  2962,   235,   236,  2963,  2964,   239,  1347,   240,
       0,  1348,  1349,     0,     0,     0,   245,  1350,   246,   247,
     248,   249,   250,   251,   252,  2965,   254,   255,   256,   257,
    1351,   258,   259,   260,   261,   262,   263,   264,  1352,   265,
    2966,     0,   268,   269,   270,   271,   272,   865,   866,  1353,
     867,  1354,   276,  2967,  2968,   279,  2969,   281,     0,   283,
     284,   285,   286,   287,  1355,  1356,   288,  2970,   290,  2971,
    1357,   292,   293,   294,   295,   296,   297,   298,   299,  2972,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   874,  2973,
     876,   322,   323,   324,     0,  2974,  1358,   327,   328,  2975,
     330,  1359,     0,   332,   878,   334,   335,   336,  1360,   337,
     338,  1361,  1362,  2976,   340,   341,  1363,  1364,   342,     0,
    2977,   345,  2978,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,   359,  1365,  1366,  1367,  1368,
     360,   361,     0,  2979,   364,   365,     0,   367,   368,   369,
    1369,   370,   371,   372,   373,   374,     0,     0,   377,  1370,
     378,   379,   380,   882,   382,   383,   384,   385,  1371,   386,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,  1372,   400,   401,  2980,   403,   404,   405,
     884,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,  1373,  2981,   418,   419,   420,   421,   422,   423,
    2982,   425,   426,     0,   428,  2983,     0,   431,   888,   433,
    1374,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,  2984,   448,     0,   450,  1375,   451,
     452,  1376,   453,  2985,   455,   456,   457,   458,   459,  1377,
     891,   892,  1378,     0,  1379,   463,   464,     0,   466,     0,
    1380,   468,   469,  2986,   471,   472,   473,   474,   475,  2987,
    1382,   476,   477,   478,  1383,   479,   480,   481,   482,  1384,
     483,   484,   485,   486,   487,     0,   895,  1386,   490,  2988,
     492,     0,   494,   495,   496,   497,     0,  1387,  1388,   499,
    1389,  1390,   500,   501,   502,   503,   504,   505,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   517,
     518,   519,   520,     0,   529,     0,  2064,  2065,  2066,  2058,
    2989,  2990,  2069,  2070,  2071,  2072,  2059,  2060,     0,     0,
    2061,  2062,  2063,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,     0,     0,     0,  2064,  2065,
    2066,     0,  2067,  2068,  2069,  2070,  2071,  2072,  1646,     0,
       0,  1647,     0,     0,     0,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1657,  1646,
       0,     0,  1647,     0,     0,  1658,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1655,     0,
    1659,     0,     0,     0,     0,     0,     0,     0,     0,  1657,
    1646,     0,     0,  1647,     0,     0,  1658,  1648,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1655,
       0,  1659,     0,     0,     0,     0,     0,     0,     0,     0,
    1657,  1646,     0,     0,  1647,     0,     0,  1658,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1655,     0,  1659,     0,     0,     0,     0,     0,     0,     0,
       0,  1657,     0,  1646,     0,     0,  1647,  1660,  1658,     0,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1661,     0,     0,     0,
       0,  1662,  1655,  1659,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,  1660,     0,
    1658,     0,     0,     0,  1663,  1664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
    1665,     0,  1662,     0,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1660,
       0,     0,     0,     0,     0,  1663,  1664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1666,  1661,     0,
    1667,  1665,     0,  1662,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1668,     0,     0,  1669,     0,     0,
    1660,     0,     0,     0,     0,     0,  1663,  1664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,  1661,
       0,  1667,  1665,     0,  1662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,  1669,     0,
       0,     0,  1660,     0,     0,     0,     0,  1663,  1664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,  1661,  1667,  1665,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,     0,     0,  1669,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1663,
    1664,     0,     0,     0,     0,     0,  1670,     0,     0,     0,
    1666,     0,     0,  1667,     0,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1670,     0,     0,
       0,     0,  1666,     0,     0,  1667,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,  1672,  1673,  1674,
       0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,  1670,
       0,  2502,     0,     0,     0,     0,     0,     0,     0,  1646,
       0,     0,  1647,     0,     0,     0,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,     0,  1671,     0,     0,  1672,  1673,
    1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,  1655,     0,
       0,  1670,  2745,     0,     0,     0,     0,     0,     0,  1657,
    1646,     0,     0,  1647,     0,     0,  1658,  1648,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,  1671,     0,     0,  1672,
    1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,  1655,
       0,  1659,     0,  2795,     0,     0,     0,     0,     0,     0,
    1657,  1646,     0,     0,  1647,     0,     0,  1658,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,  1671,     0,     0,
    1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,
    1655,     0,  1659,     0,  2897,     0,     0,     0,     0,     0,
       0,  1657,     0,  1646,     0,     0,  1647,     0,  1658,     0,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,  1671,
       0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,
    1679,  1680,  1655,  1659,     0,     0,  3115,     0,     0,     0,
       0,     0,     0,  1657,  1646,     0,     0,  1647,  1660,     0,
    1658,  1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
       0,     0,  1662,  1655,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,  1657,     0,     0,     0,     0,  1660,
       0,  1658,     0,     0,     0,  1663,  1664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,  1665,     0,  1662,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1660,     0,     0,     0,     0,     0,  1663,  1664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,  1661,
       0,  1667,  1665,     0,  1662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,  1669,     0,
       0,     0,  1660,     0,     0,     0,     0,  1663,  1664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,  1661,  1667,  1665,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,     0,     0,  1669,
       0,     0,     0,  1660,     0,     0,     0,     0,     0,  1663,
    1664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,  1661,  1667,     0,  1665,     0,  1662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1663,  1664,     0,     0,     0,     0,     0,  1670,     0,     0,
       0,     0,  1666,     0,     0,  1667,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,  1666,     0,     0,  1667,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,     0,     0,  1669,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1670,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,  1672,  1673,
    1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,
       0,  1670,  3121,     0,     0,     0,     0,     0,     0,     0,
    1646,     0,     0,  1647,     0,     0,     0,  1648,  1649,  1650,
    1651,  1652,  1653,  1654,     0,     0,  1671,     0,     0,  1672,
    1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,  1655,
       0,     0,  1670,  3325,     0,     0,     0,     0,     0,     0,
    1657,  1646,     0,     0,  1647,     0,     0,  1658,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,  1671,     0,     0,
    1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,
    1655,     0,  1659,     0,  3404,     0,     0,     0,     0,     0,
       0,  1657,     0,  1646,     0,     0,  1647,     0,  1658,     0,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,  1671,
       0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,
    1679,  1680,  1655,  1659,     0,     0,  3538,     0,     0,     0,
       0,     0,     0,  1657,  1646,     0,     0,  1647,     0,     0,
    1658,  1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,
    1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,
    1678,  1679,  1680,  1655,     0,  1659,     0,  3626,     0,     0,
       0,     0,     0,     0,  1657,  1646,     0,     0,  1647,  1660,
       0,  1658,  1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,     0,  1662,  1655,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,  1657,     0,     0,     0,     0,
    1660,     0,  1658,     0,     0,     0,  1663,  1664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1661,
       0,     0,  1665,     0,  1662,     0,     0,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,  1663,  1664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,  1661,  1667,  1665,     0,     0,  1662,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1668,     0,     0,  1669,
       0,     0,     0,  1660,     0,     0,     0,     0,     0,  1663,
    1664,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,  1661,  1667,     0,  1665,     0,  1662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,     0,     0,     0,  1660,     0,     0,     0,     0,     0,
    1663,  1664,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1666,  1661,     0,  1667,  1665,     0,  1662,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1668,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,     0,
       0,  1663,  1664,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,  1666,     0,     0,  1667,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,     0,     0,  1669,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1670,
       0,     0,     0,     0,  1666,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1668,     0,     0,  1669,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,  1672,
    1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,
       0,     0,  1670,  3655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
    1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,
       0,     0,  1846,  1670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,
    1679,  1680,     0,     0,  2815,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,
    1678,  1679,  1680,     0,     0,  3317,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1316,     0,
       0,  1671,     0,     0,  1672,  1673,  1674,     0,  1675,  1676,
    1677,  1678,  1679,  1680,     0,     0,  3588,   114,   115,   116,
     117,     0,   119,   120,   121,   122,  1317,   123,   124,   125,
    1318,  1319,  1320,   929,  1321,     0,  1322,  1323,  1324,   930,
     128,   129,  1325,   130,   131,   132,   931,   134,   135,   136,
     932,   933,   934,   935,   936,  1326,   142,   143,   144,   145,
     146,   147,  1327,  1328,   148,   149,   937,   938,   152,  1329,
     153,   154,   155,   156,   939,  1330,   940,  1331,   941,   160,
     161,   162,   163,   164,   942,   166,   167,   168,  1332,   169,
     170,   171,   172,   173,     0,  1333,   943,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   944,   945,   188,
    1334,   189,  1335,   190,   191,   192,   193,   194,   195,  1336,
     196,     0,   198,   199,   200,   201,  1337,  1338,   202,   203,
     204,   205,   206,     0,     0,  1339,   209,   210,   211,  1340,
     212,   213,   214,  1341,   215,   216,   217,   218,   946,   220,
     221,   222,   223,   224,   947,  1342,   226,  1343,   227,   228,
     948,   230,  1344,   231,  1345,   232,   949,  1346,   950,   235,
     236,   951,   952,   239,  1347,   240,     0,  1348,  1349,   953,
     954,     0,   245,  1350,   246,   247,   248,   249,   250,   251,
     252,   955,   254,   255,   256,   257,  1351,   258,   259,   260,
     261,   262,   263,   264,  1352,   265,   956,   957,   268,   269,
     270,   271,   272,   958,   959,  1353,   960,  1354,   276,   961,
     962,   279,   963,   281,     0,   283,   284,   285,   286,   287,
    1355,  1356,   288,   964,   290,   965,  1357,   292,   293,   294,
     295,   296,   297,   298,   299,   966,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   967,   968,   969,   322,   323,   324,
       0,   970,  1358,   327,   328,   971,   330,  1359,   972,   332,
     973,   334,   335,   336,  1360,   337,   338,  1361,  1362,   339,
     340,   341,  1363,  1364,   342,   974,   975,   345,   976,   977,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
       0,   359,  1365,  1366,  1367,  1368,   360,   361,   978,   979,
     364,   365,   980,   367,   368,   369,  1369,   370,   371,   372,
     373,   374,     0,     0,   377,  1370,   378,   379,   380,   981,
     382,   383,   384,   385,  1371,   386,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,  1372,
     400,   401,   982,   403,   404,   405,   983,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,  1373,   984,
     418,   419,   420,   421,   422,   423,   985,   425,   426,     0,
     428,   986,     0,   431,   987,   433,  1374,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     988,   448,   989,   450,  1375,   451,   452,  1376,   453,   990,
     455,   456,   457,   458,   459,  1377,   991,   992,  1378,     0,
    1379,   463,   464,   993,   466,   994,  1380,   468,   469,   995,
     471,   472,   473,   474,   475,  1381,  1382,   476,   477,   478,
    1383,   479,   480,   481,   482,  1384,   483,   484,   485,   486,
     487,  1385,   997,  1386,   490,   998,   492,     0,   494,   495,
     496,   497,     0,  1387,  1388,   499,  1389,  1390,   500,   501,
     502,   503,   504,   505,   999,  1000,  1001,  1002,  1003,  1004,
    1005,  1006,  1007,  1008,  1009,   517,   518,   519,   520,   529,
       0,     0,     0,     0,     0,     0,     0,     0,  2161,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,     0,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   460,   461,     0,
     462,     0,   463,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,     0,     0,     0,     0,     0,     0,     0,  2738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   928,  1502,   540,     0,     0,     0,  1088,     0,     0,
    2741,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,   929,     0,     0,     0,
       0,     0,   930,   128,   129,     0,   130,   131,   132,   931,
     134,   135,   136,   932,   933,   934,   935,   936,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   937,
     938,   152,     0,   153,   154,   155,   156,   939,     0,   940,
       0,   941,   160,   161,   162,   163,   164,   942,   166,   167,
     168,     0,   169,   170,   171,   172,   173,     0,     0,   943,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     944,   945,   188,  1706,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,     0,     0,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   946,   220,   221,   222,   223,   224,   947,  1503,   226,
       0,   227,   228,   948,   230,     0,   231,     0,   232,   949,
       0,   950,   235,   236,   951,   952,   239,     0,   240,     0,
       0,     0,   953,   954,     0,   245,     0,   246,   247,   248,
     249,   250,   251,   252,   955,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   956,
     957,   268,   269,   270,   271,   272,   958,   959,     0,   960,
       0,   276,   961,   962,   279,   963,   281,     0,   283,   284,
     285,   286,   287,     0,     0,   288,   964,   290,   965,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   966,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   967,   968,   969,
     322,   323,   324,     0,   970,     0,   327,   328,   971,   330,
       0,   972,   332,   973,   334,   335,   336,     0,   337,   338,
    1504,     0,   339,   340,   341,     0,     0,   342,   974,   975,
     345,   976,   977,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,   359,     0,     0,     0,     0,   360,
     361,   978,   979,   364,   365,   980,   367,   368,   369,     0,
     370,   371,   372,   373,   374,     0,     0,   377,     0,   378,
     379,   380,   981,   382,   383,   384,   385,     0,   386,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   982,   403,   404,   405,   983,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   984,   418,   419,   420,   421,   422,   423,   985,
     425,   426,     0,   428,   986,     0,   431,   987,   433,     0,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   988,   448,   989,   450,     0,   451,   452,
       0,   453,   990,   455,   456,   457,   458,   459,     0,   991,
     992,     0,     0,     0,   463,   464,   993,   466,   994,  1505,
     468,   469,   995,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,  1385,   997,     0,   490,   998,   492,
       0,   494,   495,   496,   497,     0,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   999,  1000,  1001,
    1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,   517,   518,
     519,   520,   928,  1502,   540,     0,     0,     0,  1088,  1506,
    1507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,   929,     0,     0,
       0,     0,     0,   930,   128,   129,     0,   130,   131,   132,
     931,   134,   135,   136,   932,   933,   934,   935,   936,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     937,   938,   152,     0,   153,   154,   155,   156,   939,     0,
     940,     0,   941,   160,   161,   162,   163,   164,   942,   166,
     167,   168,     0,   169,   170,   171,   172,   173,     0,     0,
     943,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   944,   945,   188,  1708,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,     0,     0,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   946,   220,   221,   222,   223,   224,   947,  1503,
     226,     0,   227,   228,   948,   230,     0,   231,     0,   232,
     949,     0,   950,   235,   236,   951,   952,   239,     0,   240,
       0,     0,     0,   953,   954,     0,   245,     0,   246,   247,
     248,   249,   250,   251,   252,   955,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
     956,   957,   268,   269,   270,   271,   272,   958,   959,     0,
     960,     0,   276,   961,   962,   279,   963,   281,     0,   283,
     284,   285,   286,   287,     0,     0,   288,   964,   290,   965,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   966,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   967,   968,
     969,   322,   323,   324,     0,   970,     0,   327,   328,   971,
     330,     0,   972,   332,   973,   334,   335,   336,     0,   337,
     338,  1504,     0,   339,   340,   341,     0,     0,   342,   974,
     975,   345,   976,   977,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,   359,     0,     0,     0,     0,
     360,   361,   978,   979,   364,   365,   980,   367,   368,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   377,     0,
     378,   379,   380,   981,   382,   383,   384,   385,     0,   386,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,   982,   403,   404,   405,
     983,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,   984,   418,   419,   420,   421,   422,   423,
     985,   425,   426,     0,   428,   986,     0,   431,   987,   433,
       0,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   988,   448,   989,   450,     0,   451,
     452,     0,   453,   990,   455,   456,   457,   458,   459,     0,
     991,   992,     0,     0,     0,   463,   464,   993,   466,   994,
    1505,   468,   469,   995,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,  1385,   997,     0,   490,   998,
     492,     0,   494,   495,   496,   497,     0,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   999,  1000,
    1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,   517,
     518,   519,   520,   928,  1502,   540,     0,     0,     0,  1088,
    1506,  1507,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,   929,     0,
       0,     0,     0,     0,   930,   128,   129,     0,   130,   131,
     132,   931,   134,   135,   136,   932,   933,   934,   935,   936,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   937,   938,   152,     0,   153,   154,   155,   156,   939,
       0,   940,     0,   941,   160,   161,   162,   163,   164,   942,
     166,   167,   168,     0,   169,   170,   171,   172,   173,     0,
       0,   943,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   944,   945,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,     0,     0,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   946,   220,   221,   222,   223,   224,   947,
    1503,   226,     0,   227,   228,   948,   230,     0,   231,     0,
     232,   949,     0,   950,   235,   236,   951,   952,   239,     0,
     240,     0,     0,     0,   953,   954,     0,   245,     0,   246,
     247,   248,   249,   250,   251,   252,   955,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,   956,   957,   268,   269,   270,   271,   272,   958,   959,
       0,   960,     0,   276,   961,   962,   279,   963,   281,     0,
     283,   284,   285,   286,   287,     0,     0,   288,   964,   290,
     965,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     966,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   967,
     968,   969,   322,   323,   324,     0,   970,     0,   327,   328,
     971,   330,     0,   972,   332,   973,   334,   335,   336,     0,
     337,   338,  1504,     0,   339,   340,   341,     0,     0,   342,
     974,   975,   345,   976,   977,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,   359,     0,     0,     0,
       0,   360,   361,   978,   979,   364,   365,   980,   367,   368,
     369,     0,   370,   371,   372,   373,   374,     0,     0,   377,
       0,   378,   379,   380,   981,   382,   383,   384,   385,     0,
     386,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,   982,   403,   404,
     405,   983,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   984,   418,   419,   420,   421,   422,
     423,   985,   425,   426,     0,   428,   986,     0,   431,   987,
     433,     0,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   988,   448,   989,   450,     0,
     451,   452,     0,   453,   990,   455,   456,   457,   458,   459,
       0,   991,   992,     0,     0,     0,   463,   464,   993,   466,
     994,  1505,   468,   469,   995,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,  1385,   997,     0,   490,
     998,   492,     0,   494,   495,   496,   497,     0,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   999,
    1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
     517,   518,   519,   520,     0,     0,  1646,     0,     0,  1647,
       0,  1506,  1507,  1648,  1649,  1650,  1651,  1652,  1653,  1654,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1655,     0,     0,     0,     0,
       0,  2192,     0,     0,     0,     0,  1657,  1646,     0,     0,
    1647,     0,     0,  1658,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1655,     0,  1659,     0,
       0,     0,     0,     0,     0,     0,     0,  1657,  1646,     0,
       0,  1647,     0,     0,  1658,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1655,     0,  1659,
       0,     0,  2193,     0,     0,     0,     0,     0,  1657,  1646,
       0,     0,  1647,     0,     0,  1658,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1655,     0,
    1659,     0,     0,  1951,     0,     0,     0,     0,     0,  1657,
       0,     0,     0,     0,     0,  1660,  1658,     0,     0,  1646,
       0,     0,  1647,     0,     0,     0,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,  1661,     0,     0,     0,     0,  1662,
       0,  1659,     0,     0,     0,     0,  1987,     0,  1655,     0,
       0,  1988,     0,     0,     0,     0,  1660,     0,     0,  1657,
       0,     0,  1663,  1664,     0,     0,  1658,     0,     0,     0,
       0,     0,     0,     0,     0,  1661,     0,     0,  1665,     0,
    1662,     0,     0,     0,     0,     0,  3755,     0,     0,     0,
       0,  1659,     0,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,     0,  1663,  1664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1666,  1661,     0,  1667,  1665,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,  1669,     0,     0,  1660,     0,
       0,     0,     0,     0,  1663,  1664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,  1661,     0,  1667,
    1665,     0,  1662,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1668,     0,     0,  1669,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,  1664,     0,  1660,     0,
       0,     0,     0,     0,     0,     0,     0,  1666,     0,     0,
    1667,  1665,     0,     0,     0,     0,     0,  1661,     0,     0,
       0,     0,  1662,     0,  1668,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1670,  1663,  1664,     0,  1666,     0,
       0,  1667,     0,     0,     0,     0,  3756,     0,     0,     0,
       0,  1665,     0,     0,     0,  1668,     0,     0,  1669,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,     0,
       0,  1667,     0,     0,     0,     0,     0,     0,  2196,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,  1669,     0,
       0,     0,     0,     0,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1958,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,  1672,  1673,  1674,     0,  1675,
    1676,  1677,  1678,  1679,  1680,     0,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1646,     0,
       0,  1647,     0,     0,     0,  1648,  1649,  1650,  1651,  1652,
    1653,  1654,     0,  1671,     0,     0,  1672,  1673,  1674,     0,
    1675,  1676,  1677,  1678,  1679,  1680,     0,  1655,     0,     0,
       0,     0,  1993,     0,     0,     0,     0,  1670,  1657,  1646,
       0,     0,  1647,     0,     0,  1658,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,  1671,     0,     0,  1672,  1673,  1674,
       0,  1675,  1676,  1677,  1678,  1679,  1680,     0,  1655,     0,
    1659,     0,     0,     0,     0,     0,     0,     0,     0,  1657,
       0,     0,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,  1672,  1673,
    1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,
       0,  1659,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1646,
       0,     0,  1647,     0,     0,     0,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,     0,     0,  1671,     0,     0,  1672,  1673,
    1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,  1655,     0,
       0,     0,     0,  2000,     0,     0,     0,  1660,     0,  1657,
       0,  1646,     0,     0,  1647,     0,  1658,     0,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,     0,  1661,     0,     0,     0,
       0,  1662,     0,     0,     0,     0,     0,     0,     0,     0,
    1655,  1659,     0,  1998,     0,     0,     0,     0,  1660,     0,
       0,  1657,     0,     0,  1663,  1664,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
    1665,     0,  1662,     0,     0,     0,     0,     0,  1087,     0,
       0,  3149,     0,  1659,     0,     0,  3150,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,  1664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1666,     0,     0,
    1667,  1665,     0,     0,     0,     0,     0,     0,  3157,     0,
       0,     0,     0,     0,  1668, -2128,     0,  1669,     0,     0,
       0,     0,     0,     0,  1646,     0,     0,  1647,  1660,     0,
       0,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1666,     0,
    3159,  1667,     0,     0,     0,     0,     0,  1661,     0,     0,
       0,     0,  1662,  1655,     0,  1668,     0,     0,  1669,     0,
    2082,     0,     0,     0,  1657,     0,     0,     0,     0,     0,
    1660,  1658,     0,     0,     0,  1663,  1664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1661,
       0,  1665,     0,     0,  1662,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3611,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1670,  1663,  1664,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,     0,
       0,  1667,     0,  1665,     0,     0,     0, -2128,     0,     0,
       0,     0,     0,     0,     0,  1668,     0,     0,  1669,     0,
       0,     0,     0,     0,     0,     0, -2128,  1670,     0,     0,
       0, -2128,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,  1667,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1668,     0,     0,
    1669,     0,     0,  1660,     0,     0,     0,     0,     0,     0,
   -2128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,  1672,  1673,  1674,
       0,  1675,  1676,  1677,  1678,  1679,  1680,     0,     0,     0,
    1663,  1664,     0,     0,     0,     0,     0,  1670,     0,     0,
    1646,     0,     0,  1647,  1971,     0,  1665,  1648,  1649,  1650,
    1651,  1652,  1653,  1654,     0,  1671,     0,     0,  1672,  1673,
    1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,  1655,
       0,     0,     0,     0,  2793,     0,     0,     0,     0,  1670,
    1657,     0,     0,  1666,     0,     0,  1667,  1658,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1668,     0,     0,  1669,     0,     0,     0,     0,     0,     0,
       0,  1646,  1659,     0,  1647,     0,     0,     0,  1648,  1649,
    1650,  1651,  1652,  1653,  1654,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1655,     0,     0,     0,     0,  1671, -2128,     0,  1672,  1673,
    1674,  1657,  1675,  1676,  1677,  1678,  1679,  1680,  1658,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1659,     0,     0,     0,  1671,     0,     0,
    1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,
       0,     0,  1670,  1646,     0,     0,  1647,     0,     0,  1660,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1661,     0,
       0,     0,  1655,  1662,     0,     0,  2784,     0,     0,     0,
       0,     0,     0,  1657,     0,     0,     0,     0,     0,     0,
    1658,     0,     0,     0, -2128,     0,  1663,  1664,     0,     0,
       0,  3174,  3175,  3176,  3177,  3178,  3179,     0,     0,     0,
       0,     0,  1665,     0,     0,  1659,     0,     0,     0,     0,
    1660,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1087,     0,     0,  3149,  1661,
       0,     0,     0,  3150,  1662,     0,  3153,  3154,  3155,  1666,
    1671,     0,  1667,  1672,  1673,  1674,     0,  1675,  1676,  1677,
    1678,  1679,  1680,     0,  3156,     0,  1668,  1663,  1664,  1669,
       0,     0,     0,     0,     0,  3157,     0,  1087,     0,     0,
    3149,     0,  3158,  1665,     0,  3150,  3151,  3152,  3153,  3154,
    3155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3156,  3159,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,  3157,     0,     0,
    1666,     0,     0,  1667,  3158,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,  1662,  1668,     0,     0,
    1669,     0,     0,     0,  1087,     0,     0,  3149,     0,  3159,
       0,     0,  3150,     0,     0,  3153,  3154,  3155,     0,  1663,
    1664,     0,     0,     0,     0,     0,     0,     0,  1670,     0,
       0,     0,     0,  3156,     0,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,  3157,     0,     0,     0,     0,     0,
       0,  3158,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1087,     0,  3160,  3149,     0,     0,     0,     0,
    3150,     0,  1666,     0,     0,  1667,  3159,     0,     0,     0,
       0,     0,     0,  3161,     0,     0,     0,     0,  3162,  1668,
       0,     0,  1669,     0,     0,     0,     0,     0,     0,  1670,
       0,     0,  3157,     0,     0,     0,  3160,     0,     0, -2128,
       0,  3163,  3164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3161,     0,  3165,     0,     0,
    3162,     0,     0,     0,  3159,     0,  1671,     0,     0,  1672,
    1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,     0,
       0,     0,     0,  3163,  3164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3166,     0,     0,  3167,     0,  3165,
       0,     0,     0,  3160,     0,     0,     0,     0,     0,     0,
       0,  1971,     0,     0,  3168,     0,     0,     0,     0,     0,
    1087,  1670,  3161,  3149,     0,     0,     0,  3162,  3150,     0,
    3612,  3153,  3154,  3155,     0,     0,  3166,  1671,     0,  3167,
    1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,  1679,  1680,
    3163,  3164,     0,  1971,     0,     0,  3168,     0,     0,     0,
    3157, -2128,     0,     0,     0,     0,  3165,  3158,     0,     0,
       0,  1087,     0,     0,  3149,     0,     0,     0,     0,  3150,
   -2128,     0,     0,     0,     0, -2128,     0,     0,     0,     0,
       0,     0,  3159,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3166,     0,     0,  3167,     0,     0,     0,
       0,  3157,     0,  3169,     0,     0,     0,     0, -2128,     0,
    1971,     0,     0,     0, -2128,     0,     0,     0,     0,  1671,
       0,     0,  1672,  1673,  1674,     0,  1675,  1676,  1677,  1678,
    2213,  1680,     0,  3159,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3169,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1971,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3161,  3688,
       0,     0,     0,  3162,     0,     0,     0,     0,     0,     0,
       0,  3170,  3169,     0,  3171,  3172,  3173,     0,  3174,  3175,
    3176,  3177,  3178,  3179,     0,     0,  3163,  3164,     0,     0,
   -2128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3165,     0,     0,     0,     0,     0,     0, -2128,
       0,     0,     0,  3170, -2128,     0,  3171,  3172,  3173,     0,
    3174,  3175,  3176,  3177,  3178,  3179,     0,     0,     0,     0,
   -2128,     0,     0,     0,     0,     0,     0,     0,     0,  3166,
       0,     0,  3167,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2128,     0,     0,  1971,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3170,     0,     0,  3171,  3172,  3173,     0,  3174,  3175,  3176,
    3177,  3178,  3179,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1971,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -2128,     0,
       0,     0,     0,     0,     0,  3174,  3175,  3176,  3177,  3178,
    3179,     0,     0,     0,     0,     0,     0,     0,  3169,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3170,     0,     0,  3171,
    3172,  3173,     0,  3174,  3175,  3176,  3177,  3178,  3179,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1316,     0,  2102,     0,     0,     0, -2128,     0,     0,
       0,     0,     0,     0,  3174,  3175,  3176,  3177,  3178,  3179,
     114,   115,   116,   117,     0,   119,   120,   121,   122,  1317,
     123,   124,   125,  1318,  1319,  1320,   929,  1321,     0,  1322,
    1323,  1324,   930,   128,   129,  1325,   130,   131,   132,   931,
     134,   135,   136,   932,   933,   934,   935,   936,  1326,   142,
     143,   144,   145,   146,   147,  1327,  1328,   148,   149,   937,
     938,   152,  1329,   153,   154,   155,   156,   939,  1330,   940,
    1331,   941,   160,   161,   162,   163,   164,   942,   166,   167,
     168,  1332,   169,   170,   171,   172,   173,     0,  1333,   943,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     944,   945,   188,  1334,   189,  1335,   190,   191,   192,   193,
     194,   195,  1336,   196,     0,   198,   199,   200,   201,  1337,
    1338,   202,   203,   204,   205,   206,     0,     0,  1339,   209,
     210,   211,  1340,   212,   213,   214,  1341,   215,   216,   217,
     218,   946,   220,   221,   222,   223,   224,   947,  1342,   226,
    1343,   227,   228,   948,   230,  1344,   231,  1345,   232,   949,
    1346,   950,   235,   236,   951,   952,   239,  1347,   240,     0,
    1348,  1349,   953,   954,     0,   245,  1350,   246,   247,   248,
     249,   250,   251,   252,   955,   254,   255,   256,   257,  1351,
     258,   259,   260,   261,   262,   263,   264,  1352,   265,   956,
     957,   268,   269,   270,   271,   272,   958,   959,  1353,   960,
    1354,   276,   961,   962,   279,   963,   281,     0,   283,   284,
     285,   286,   287,  1355,  1356,   288,   964,   290,   965,  1357,
     292,   293,   294,   295,   296,   297,   298,   299,   966,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   967,   968,   969,
     322,   323,   324,     0,   970,  1358,   327,   328,   971,   330,
    1359,   972,   332,   973,   334,   335,   336,  1360,   337,   338,
    1361,  1362,   339,   340,   341,  1363,  1364,   342,   974,   975,
     345,   976,   977,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,   359,  1365,  1366,  1367,  1368,   360,
     361,   978,   979,   364,   365,   980,   367,   368,   369,  1369,
     370,   371,   372,   373,   374,     0,     0,   377,  1370,   378,
     379,   380,   981,   382,   383,   384,   385,  1371,   386,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,  1372,   400,   401,   982,   403,   404,   405,   983,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,  1373,   984,   418,   419,   420,   421,   422,   423,   985,
     425,   426,     0,   428,   986,     0,   431,   987,   433,  1374,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   988,   448,   989,   450,  1375,   451,   452,
    1376,   453,   990,   455,   456,   457,   458,   459,  1377,   991,
     992,  1378,     0,  1379,   463,   464,   993,   466,   994,  1380,
     468,   469,   995,   471,   472,   473,   474,   475,  1381,  1382,
     476,   477,   478,  1383,   479,   480,   481,   482,  1384,   483,
     484,   485,   486,   487,  1385,   997,  1386,   490,   998,   492,
       0,   494,   495,   496,   497,     0,  1387,  1388,   499,  1389,
    1390,   500,   501,   502,   503,   504,   505,   999,  1000,  1001,
    1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,   517,   518,
     519,   520,  1316,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,     0,   119,   120,   121,   122,
    1317,   123,   124,   125,  1318,  1319,  1320,   929,  1321,     0,
    1322,  1323,  1324,   930,   128,   129,  1325,   130,   131,   132,
     931,   134,   135,   136,   932,   933,   934,   935,   936,  1326,
     142,   143,   144,   145,   146,   147,  1327,  1328,   148,   149,
     937,   938,   152,  1329,   153,   154,   155,   156,   939,  1330,
     940,  1331,   941,   160,   161,   162,   163,   164,   942,   166,
     167,   168,  1332,   169,   170,   171,   172,   173,     0,  1333,
     943,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   944,   945,   188,  1334,   189,  1335,   190,   191,   192,
     193,   194,   195,  1336,   196,     0,   198,   199,   200,   201,
    1337,  1338,   202,   203,   204,   205,   206,     0,     0,  1339,
     209,   210,   211,  1340,   212,   213,   214,  1341,   215,   216,
     217,   218,   946,   220,   221,   222,   223,   224,   947,  1342,
     226,  1343,   227,   228,   948,   230,  1344,   231,  1345,   232,
     949,  1346,   950,   235,   236,   951,   952,   239,  1347,   240,
       0,  1348,  1349,   953,   954,     0,   245,  1350,   246,   247,
     248,   249,   250,   251,   252,   955,   254,   255,   256,   257,
    1351,   258,   259,   260,   261,   262,   263,   264,  1352,   265,
     956,   957,   268,   269,   270,   271,   272,   958,   959,  1353,
     960,  1354,   276,   961,   962,   279,   963,   281,     0,   283,
     284,   285,   286,   287,  1355,  1356,   288,   964,   290,   965,
    1357,   292,   293,   294,   295,   296,   297,   298,   299,   966,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   967,   968,
     969,   322,   323,   324,     0,   970,  1358,   327,   328,   971,
     330,  1359,   972,   332,   973,   334,   335,   336,  1360,   337,
     338,  1361,  1362,   339,   340,   341,  1363,  1364,   342,   974,
     975,   345,   976,   977,   348,   349,   350,   351,   352,   353,
     354,   355,   356,     0,     0,   359,  1365,  1366,  1367,  1368,
     360,   361,   978,   979,   364,   365,   980,   367,   368,   369,
    1369,   370,   371,   372,   373,   374,     0,     0,   377,  1370,
     378,   379,   380,   981,   382,   383,   384,   385,  1371,   386,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,  1372,   400,   401,   982,   403,   404,   405,
     983,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,  1373,   984,   418,   419,   420,   421,   422,   423,
     985,   425,   426,     0,   428,   986,     0,   431,   987,   433,
    1374,     0,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   988,   448,   989,   450,  1375,   451,
     452,  1376,   453,   990,   455,   456,   457,   458,   459,  1377,
     991,   992,  1378,     0,  1379,   463,   464,   993,   466,   994,
    1380,   468,   469,   995,   471,   472,   473,   474,   475,  1381,
    1382,   476,   477,   478,  1383,   479,   480,   481,   482,  1384,
     483,   484,   485,   486,   487,  1385,   997,  1386,   490,   998,
     492,     0,   494,   495,   496,   497,     0,  1387,  1388,   499,
    1389,  1390,   500,   501,   502,   503,   504,   505,   999,  1000,
    1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,   517,
     518,   519,   520,  1316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,     0,  2258,   120,   121,
     122,  1317,   123,   124,   125,  1318,  1319,  1320,   929,  1321,
       0,  1322,  1323,  1324,   930,   128,   129,  1325,   130,   131,
     132,   931,   134,   135,   136,   932,   933,   934,   935,   936,
    1326,   142,   143,   144,   145,   146,   147,  1327,  1328,   148,
     149,   937,   938,   152,  1329,   153,   154,   155,   156,   939,
    1330,   940,  1331,   941,   160,   161,   162,   163,   164,   942,
     166,   167,   168,  1332,   169,   170,   171,   172,   173,     0,
    1333,   943,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   944,   945,   188,  1334,   189,  1335,   190,   191,
     192,   193,   194,   195,  1336,   196,     0,   198,   199,   200,
     201,  1337,  1338,   202,   203,   204,  2259,   206,     0,     0,
    1339,   209,   210,   211,  1340,   212,   213,   214,  1341,   215,
     216,   217,   218,   946,   220,   221,   222,   223,   224,   947,
    1342,   226,  1343,   227,   228,   948,   230,  1344,   231,  1345,
     232,   949,  1346,   950,   235,   236,   951,   952,   239,  1347,
     240,     0,  1348,  1349,   953,   954,     0,   245,  1350,   246,
     247,   248,   249,   250,   251,   252,   955,   254,   255,   256,
     257,  1351,   258,   259,   260,   261,   262,   263,   264,  1352,
     265,   956,   957,   268,   269,   270,   271,   272,   958,   959,
    1353,   960,  1354,   276,   961,   962,   279,   963,   281,     0,
     283,   284,   285,   286,   287,  1355,  1356,   288,   964,   290,
     965,  1357,   292,   293,   294,   295,   296,   297,   298,   299,
     966,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   967,
     968,   969,   322,   323,   324,     0,   970,  1358,   327,   328,
     971,   330,  1359,   972,   332,   973,   334,   335,   336,  1360,
     337,   338,  1361,  1362,   339,   340,   341,  1363,  1364,   342,
     974,   975,   345,   976,   977,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,   359,  1365,  1366,  1367,
    1368,   360,   361,   978,   979,   364,   365,   980,   367,   368,
     369,  1369,   370,   371,   372,   373,   374,     0,     0,   377,
    1370,   378,   379,   380,   981,   382,   383,   384,   385,  1371,
     386,   387,   388,     0,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,  1372,   400,   401,   982,   403,   404,
     405,   983,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,  1373,   984,   418,   419,   420,   421,   422,
    2260,   985,   425,   426,     0,   428,   986,     0,   431,   987,
     433,  1374,     0,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   988,   448,   989,   450,  1375,
     451,   452,  1376,   453,   990,   455,   456,   457,   458,   459,
    1377,   991,   992,  1378,     0,  1379,   463,   464,   993,   466,
     994,  1380,   468,   469,   995,   471,   472,   473,   474,   475,
    1381,  1382,   476,   477,   478,  1383,   479,   480,   481,   482,
    1384,   483,   484,   485,   486,   487,  1385,   997,  1386,   490,
     998,   492,     0,   494,   495,   496,   497,     0,  1387,  1388,
     499,  1389,  1390,   500,   501,   502,   503,   504,   505,   999,
    1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
     517,   518,   519,   520,   113,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,   127,   128,   129,     0,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,   632,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     633,     0,   634,     0,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     635,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,   233,     0,   234,   235,   236,   237,   238,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,   289,
     290,   291,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   638,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,   344,   345,   346,   640,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   641,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   643,   450,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   644,
     466,   645,     0,   468,   469,   646,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   113,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,   127,   128,   129,     0,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,   158,     0,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,   233,     0,   234,   235,   236,   237,   238,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
     289,   290,   291,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,   489,
       0,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   928,     0,   540,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,   929,     0,     0,     0,     0,     0,   930,   128,   129,
       0,   130,   131,   132,   931,   134,   135,   136,   932,   933,
     934,   935,   936,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   937,   938,   152,     0,   153,   154,
     155,   156,   939,     0,   940,     0,   941,   160,   161,   162,
     163,   164,   942,   166,   167,   168,     0,   169,   170,   171,
     172,   173,     0,     0,   943,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   944,   945,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,     0,     0,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   946,   220,   221,   222,
     223,   224,   947,  1503,   226,     0,   227,   228,   948,   230,
       0,   231,     0,   232,   949,     0,   950,   235,   236,   951,
     952,   239,     0,   240,     0,     0,     0,   953,   954,     0,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   955,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   956,   957,   268,   269,   270,   271,
     272,   958,   959,     0,   960,     0,   276,   961,   962,   279,
     963,   281,     0,   283,   284,   285,   286,   287,     0,     0,
     288,   964,   290,   965,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   966,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   967,   968,   969,   322,   323,   324,     0,   970,
       0,   327,   328,   971,   330,     0,   972,   332,   973,   334,
     335,   336,     0,   337,   338,  1504,     0,   339,   340,   341,
       0,     0,   342,   974,   975,   345,   976,   977,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,   359,
       0,     0,     0,     0,   360,   361,   978,   979,   364,   365,
     980,   367,   368,   369,     0,   370,   371,   372,   373,   374,
       0,     0,   377,     0,   378,   379,   380,   981,   382,   383,
     384,   385,     0,   386,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     982,   403,   404,   405,   983,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   984,   418,   419,
     420,   421,   422,   423,   985,   425,   426,     0,   428,   986,
       0,   431,   987,   433,     0,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   988,   448,
     989,   450,     0,   451,   452,     0,   453,   990,   455,   456,
     457,   458,   459,     0,   991,   992,     0,     0,     0,   463,
     464,   993,   466,   994,  1505,   468,   469,   995,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,  1385,
     997,     0,   490,   998,   492,     0,   494,   495,   496,   497,
       0,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   999,  1000,  1001,  1002,  1003,  1004,  1005,  1006,
    1007,  1008,  1009,   517,   518,   519,   520,   928,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   119,   120,   121,   122,     0,   123,   124,   125,     3,
       4,     0,   929,     0,     0,     0,     0,     0,   930,   128,
     129,     0,   130,   131,   132,   931,   134,   135,   136,   932,
     933,   934,   935,   936,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   937,   938,   152,     0,   153,
     154,   155,   156,   939,     0,   940,     0,   941,   160,   161,
     162,   163,   164,   942,   166,   167,   168,     0,   169,   170,
     171,   172,   173,     0,     0,   943,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   944,   945,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,     0,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   946,   220,   221,
     222,   223,   224,   947,     0,   226,     0,   227,   228,   948,
     230,     0,   231,     0,   232,   949,     0,   950,   235,   236,
     951,   952,   239,     0,   240,     0,     0,     0,   953,   954,
       0,   245,     0,   246,   247,   248,   249,   250,   251,   252,
     955,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,   956,   957,   268,   269,   270,
     271,   272,   958,   959,     0,   960,     0,   276,   961,   962,
     279,   963,   281,     0,   283,   284,   285,   286,   287,     0,
       0,   288,   964,   290,   965,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   966,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   967,   968,   969,   322,   323,   324,     0,
     970,     0,   327,   328,   971,   330,     0,   972,   332,   973,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   974,   975,   345,   976,   977,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
     359,     0,     0,     0,     0,   360,   361,   978,   979,   364,
     365,   980,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   377,     0,   378,   379,   380,   981,   382,
     383,   384,   385,     0,   386,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,   982,   403,   404,   405,   983,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   984,   418,
     419,   420,   421,   422,   423,   985,   425,   426,     0,   428,
     986,     0,   431,   987,   433,     0,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   988,
     448,   989,   450,     0,   451,   452,     0,   453,   990,   455,
     456,   457,   458,   459,     0,   991,   992,     0,     0,     0,
     463,   464,   993,   466,   994,     0,   468,   469,   995,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
    1385,   997,     0,   490,   998,   492,     0,   494,   495,   496,
     497,     0,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   999,  1000,  1001,  1002,  1003,  1004,  1005,
    1006,  1007,  1008,  1009,   517,   518,   519,   520,   529,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
     128,   129,     0,   130,   131,   132,     0,   134,   135,   136,
     137,   138,     0,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,  1783,
     153,   154,   155,   156,   157,     0,     0,  1784,   159,   160,
     161,   162,   163,   164,     0,   166,   167,   168,  1785,   169,
     170,   171,   172,   173,   174,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   227,   228,
     229,   230,     0,   231,  1786,   232,     0,     0,     0,   235,
     236,   530,     0,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,  1787,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,     0,   290,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   531,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,     0,   345,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,  1788,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     532,   448,   449,   450,     0,   451,   452,     0,   453,     0,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,  1789,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,     0,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
    1783,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,  1785,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,  1786,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,  2336,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,  1788,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   460,   461,     0,
     462,     0,   463,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,  1789,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     3,     4,     0,     0,     0,   126,     0,     0,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   529,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   557,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   128,   129,     0,   130,   131,   132,     0,
     134,   135,   136,   137,   138,     0,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   157,     0,     0,
       0,   159,   160,   161,   162,   163,   164,     0,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   227,   228,   229,   230,     0,   231,     0,   232,     0,
       0,     0,   235,   236,   530,     0,   239,     0,   240,   241,
       0,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   251,   252,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     267,   268,   269,   270,   271,   272,   273,   274,     0,   275,
       0,   276,     0,     0,   279,     0,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,     0,   290,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   531,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   330,
       0,   331,   332,   333,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,     0,
     345,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,     0,   364,   365,   366,   558,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   532,   448,   449,   450,     0,   451,   452,
       0,   453,     0,   455,   456,   457,   458,   459,     0,   460,
     461,     0,   462,     0,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,   489,     0,   490,     0,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   529,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   227,   228,   229,   230,     0,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   251,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,   639,   339,   340,   341,     0,     0,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   797,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,   639,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   529,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   829,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   529,  2003,     0,     0,     0,
       0,  2004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,     0,   128,   129,     0,
     130,   131,   132,     0,   134,   135,   136,   137,   138,     0,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,     0,     0,   159,   160,   161,   162,   163,
     164,     0,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,     0,     0,     0,   235,   236,   530,     0,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   251,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
       0,   290,     0,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   531,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,     0,   345,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   532,   448,   449,
     450,     0,   451,   452,     0,   453,     0,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,   489,
       0,   490,     0,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   529,     0,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,   126,     0,     0,     0,     0,   128,   129,
       0,   130,   131,   132,     0,   134,   135,   136,   137,   138,
       0,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   156,   157,     0,     0,     0,   159,   160,   161,   162,
     163,   164,     0,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   227,   228,   229,   230,
       0,   231,     0,   232,     0,     0,     0,   235,   236,   530,
       0,  2012,     0,   240,   241,     0,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   267,   268,   269,   270,   271,
     272,   273,   274,     0,   275,     0,   276,     0,     0,   279,
       0,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,     0,   290,     0,     0,   292,   293,  2013,   295,   296,
     297,   298,   299,   531,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   330,     0,   331,   332,   333,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,   343,     0,   345,     0,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   362,     0,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   532,   448,
     449,   450,     0,   451,   452,  2014,   453,     0,   455,  2015,
     457,  2016,   459,     0,   460,   461,     0,   462,     0,   463,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,   475,     0,     0,   476,   477,  2017,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
     489,     0,   490,     0,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   529,     0,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,   128,
     129,     0,   130,   131,   132,     0,   134,   135,   136,   137,
     138,     0,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   157,     0,     0,     0,   159,   160,   161,
     162,   163,   164,     0,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   227,   228,   229,
     230,     0,   231,     0,   232,     0,     0,     0,   235,   236,
     530,     0,   239,     0,   240,   241,     0,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,     0,   290,     0,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   531,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,     0,   345,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   532,
     448,   449,   450,     0,   451,   452,     0,   453,     0,   455,
     456,   457,   458,   459,     0,   460,   461,     0,   462,     0,
     463,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,   489,     0,   490,     0,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   529,     0,
     540,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
     128,   129,     0,   130,   131,   132,     0,   134,   135,   136,
     137,   138,     0,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   157,     0,     0,     0,   159,   160,
     161,   162,   163,   164,     0,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   227,   228,
     229,   230,     0,   231,     0,   232,     0,     0,     0,   235,
     236,   530,     0,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,     0,   290,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   531,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,     0,   345,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     532,   448,   449,   450,     0,   451,   452,     0,   453,     0,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,     0,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   669,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,     0,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   670,   461,     0,
     462,     0,   671,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   704,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   529,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   128,   129,     0,   130,   131,   132,     0,
     134,   135,   136,   137,   138,     0,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   157,     0,     0,
       0,   159,   160,   161,   162,   163,   164,     0,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   227,   228,   229,   230,     0,   231,     0,   232,     0,
       0,     0,   235,   236,   530,     0,   239,     0,   240,   241,
       0,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,   792,   252,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     267,   268,   269,   270,   271,   272,   273,   274,     0,   275,
       0,   276,     0,     0,   279,     0,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,     0,   290,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   531,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   330,
       0,   331,   332,   333,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,     0,
     345,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,     0,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   532,   448,   449,   450,     0,   451,   452,
       0,   453,     0,   455,   456,   457,   458,   459,     0,   460,
     461,     0,   462,     0,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,   489,     0,   490,     0,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   529,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   227,   228,   229,   230,     0,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,   795,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,   799,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   529,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   809,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   529,     0,   556,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,     0,   128,   129,     0,
     130,   131,   132,     0,   134,   135,   136,   137,   138,     0,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,     0,     0,   159,   160,   161,   162,   163,
     164,     0,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,     0,     0,     0,   235,   236,   530,     0,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,   817,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
       0,   290,     0,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   531,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,     0,   345,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   532,   448,   449,
     450,     0,   451,   452,     0,   453,     0,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,   489,
       0,   490,     0,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   529,     0,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,   126,     0,     0,     0,     0,   128,   129,
       0,   130,   131,   132,     0,   134,   135,   136,   137,   138,
       0,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   156,   157,     0,     0,     0,   159,   160,   161,   162,
     163,   164,     0,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   227,   228,   229,   230,
       0,   231,     0,   232,     0,     0,     0,   235,   236,   530,
       0,   239,     0,   240,   241,     0,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   919,   252,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   267,   268,   269,   270,   271,
     272,   273,   274,     0,   275,     0,   276,     0,     0,   279,
       0,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,     0,   290,     0,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   531,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   330,     0,   331,   332,   333,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,   343,     0,   345,     0,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   362,     0,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   532,   448,
     449,   450,     0,   451,   452,     0,   453,     0,   455,   456,
     457,   458,   459,     0,   460,   461,     0,   462,     0,   463,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
     489,     0,   490,     0,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   529,     0,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,   128,
     129,     0,   130,   131,   132,     0,   134,   135,   136,   137,
     138,     0,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   157,     0,     0,     0,   159,   160,   161,
     162,   163,   164,     0,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   227,   228,   229,
     230,     0,   231,     0,   232,     0,     0,     0,   235,   236,
     530,     0,   239,     0,   240,   241,     0,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   922,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,     0,   290,     0,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   531,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,     0,   345,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
       0,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   532,
     448,   449,   450,     0,   451,   452,     0,   453,     0,   455,
     456,   457,   458,   459,     0,   460,   461,     0,   462,     0,
     463,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,   489,     0,   490,     0,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   529,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,  1044,     0,     0,
     128,   129,     0,   130,   131,   132,     0,   134,   135,   136,
     137,   138,     0,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   157,     0,     0,     0,   159,   160,
     161,   162,   163,   164,     0,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   227,   228,
     229,   230,     0,   231,     0,   232,     0,     0,     0,   235,
     236,   530,     0,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   251,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,     0,   290,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   531,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,     0,   345,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     532,   448,   449,   450,     0,   451,   452,     0,   453,     0,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,     0,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,  1067,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,     0,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   460,   461,     0,
     462,     0,   463,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,  1410,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   529,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   128,   129,     0,   130,   131,   132,     0,
     134,   135,   136,   137,   138,     0,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   157,     0,     0,
       0,   159,   160,   161,   162,   163,   164,     0,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   227,   228,   229,   230,     0,   231,     0,   232,     0,
       0,     0,   235,   236,   530,     0,   239,     0,   240,   241,
       0,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,  1412,   252,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     267,   268,   269,   270,   271,   272,   273,   274,     0,   275,
       0,   276,     0,     0,   279,     0,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,     0,   290,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   531,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   330,
       0,   331,   332,   333,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,     0,
     345,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,     0,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   532,   448,   449,   450,     0,   451,   452,
       0,   453,     0,   455,   456,   457,   458,   459,     0,   460,
     461,     0,   462,     0,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,   489,     0,   490,     0,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   529,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   227,   228,   229,   230,     0,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,  1415,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,  1417,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   529,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,  2254,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   529,     0,   556,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,   118,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,     0,     0,     0,   128,   129,     0,
     130,   131,   132,     0,   134,   135,   136,   137,   138,     0,
     140,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   150,   151,   152,     0,   153,   154,   155,
     156,   157,     0,     0,     0,   159,   160,   161,   162,   163,
     164,     0,   166,   167,   168,     0,   169,   170,   171,   172,
     173,   174,     0,     0,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,   197,   198,
     199,   200,   201,     0,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,     0,   227,   228,   229,   230,     0,
     231,     0,   232,     0,     0,     0,   235,   236,   530,     0,
     239,     0,   240,   241,     0,     0,   242,   243,   244,   245,
       0,   246,   247,   248,   249,   250,  3027,   252,     0,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   267,   268,   269,   270,   271,   272,
     273,   274,     0,   275,     0,   276,     0,     0,   279,     0,
     281,   282,   283,   284,   285,   286,   287,     0,     0,   288,
       0,   290,     0,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   531,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   321,   322,   323,   324,   325,   326,     0,
     327,   328,     0,   330,     0,   331,   332,   333,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,   343,     0,   345,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,     0,
       0,     0,     0,   360,   361,   362,     0,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,     0,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,     0,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   532,   448,   449,
     450,     0,   451,   452,     0,   453,     0,   455,   456,   457,
     458,   459,     0,   460,   461,     0,   462,     0,   463,   464,
     465,   466,   467,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,   488,   489,
       0,   490,     0,   492,   493,   494,   495,   496,   497,   498,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   529,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   115,   116,   117,   118,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,     0,     0,   126,     0,     0,     0,     0,   128,   129,
       0,   130,   131,   132,     0,   134,   135,   136,   137,   138,
       0,   140,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   150,   151,   152,     0,   153,   154,
     155,   156,   157,     0,     0,     0,   159,   160,   161,   162,
     163,   164,     0,   166,   167,   168,     0,   169,   170,   171,
     172,   173,   174,     0,     0,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,     0,   202,   203,   204,   205,
     206,   207,   208,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,     0,   226,     0,   227,   228,   229,   230,
       0,   231,     0,   232,     0,     0,     0,   235,   236,   530,
       0,   239,     0,   240,   241,     0,     0,   242,   243,   244,
     245,     0,   246,   247,   248,   249,   250,   251,   252,     0,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   267,   268,   269,   270,   271,
     272,   273,   274,     0,   275,     0,   276,     0,     0,   279,
       0,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     288,     0,   290,     0,     0,   292,   293,   294,   295,   296,
     297,   298,   299,   531,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,     0,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   330,     0,   331,   332,   333,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,   343,     0,   345,     0,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
       0,     0,     0,     0,   360,   361,   362,     0,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,     0,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,     0,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   532,   448,
     449,   450,     0,   451,   452,     0,   453,     0,   455,   456,
     457,   458,   459,     0,   460,   461,     0,   462,     0,   463,
     464,   465,   466,   467,     0,   468,   469,   470,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,   488,
     489,     0,   490,     0,   492,   493,   494,   495,   496,   497,
     498,     0,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   529,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
     118,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,   128,
     129,     0,   130,   131,   132,     0,   134,   135,   136,   137,
     138,     0,   140,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   150,   151,   152,     0,   153,
     154,   155,   156,   157,     0,     0,     0,   159,   160,   161,
     162,   163,   164,     0,   166,   167,   168,     0,   169,   170,
     171,   172,   173,   174,     0,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
     197,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,     0,   227,   228,   229,
     230,     0,   231,     0,   232,     0,     0,     0,   235,   236,
     530,     0,   681,     0,   240,   241,     0,     0,   242,   243,
     244,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   267,   268,   269,   270,
     271,   272,   273,   274,     0,   275,     0,   276,     0,     0,
     279,     0,   281,   282,   283,   284,   285,   286,   287,     0,
       0,   288,     0,   290,     0,     0,   292,   293,   682,   295,
     296,   297,   298,   299,   531,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   321,   322,   323,   324,   325,
     326,     0,   327,   328,     0,   330,     0,   331,   332,   333,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   343,     0,   345,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,     0,     0,     0,     0,   360,   361,   362,     0,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     683,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   684,   423,   424,   425,   426,   427,   428,
       0,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   532,
     448,   449,   450,     0,   451,   452,     0,   453,     0,   455,
     456,   457,   458,   459,     0,   685,   461,     0,   462,     0,
     463,   464,   465,   466,   467,     0,   468,   469,   470,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
     488,   489,     0,   490,     0,   492,   493,   494,   495,   496,
     497,   498,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   529,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,   118,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
     128,   129,     0,   130,   131,   132,     0,   134,   135,   136,
     137,   138,     0,   140,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   150,   151,   152,     0,
     153,   154,   155,   156,   157,     0,     0,     0,   159,   160,
     161,   162,   163,   164,     0,   166,   167,   168,     0,   169,
     170,   171,   172,   173,   174,     0,     0,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,     0,   202,   203,
     204,   205,   206,   207,   208,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,     0,   227,   228,
     229,   230,     0,   231,     0,   232,     0,     0,     0,   235,
     236,   530,     0,   239,     0,   240,   241,     0,     0,   242,
     243,   244,   245,     0,   246,   247,   248,   249,   250,   915,
     252,     0,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   267,   268,   269,
     270,   271,   272,   273,   274,     0,   275,     0,   276,     0,
       0,   279,     0,   281,   282,   283,   284,   285,   286,   287,
       0,     0,   288,     0,   290,     0,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   531,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,     0,   331,   332,
     333,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,   343,     0,   345,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,     0,     0,     0,     0,   360,   361,   362,     0,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,     0,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,     0,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     532,   448,   449,   450,     0,   451,   452,     0,   453,     0,
     455,   456,   457,   458,   459,     0,   460,   461,     0,   462,
       0,   463,   464,   465,   466,   467,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,   488,   489,     0,   490,     0,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   114,   115,
     116,   117,   118,   119,   120,   121,   122,     0,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,   128,   129,     0,   130,   131,   132,     0,   134,   135,
     136,   137,   138,     0,   140,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,   149,   150,   151,   152,
       0,   153,   154,   155,   156,   157,     0,     0,     0,   159,
     160,   161,   162,   163,   164,     0,   166,   167,   168,     0,
     169,   170,   171,   172,   173,   174,     0,     0,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,     0,   189,     0,   190,   191,   192,   193,   194,   195,
       0,   196,   197,   198,   199,   200,   201,     0,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,     0,   227,
     228,   229,   230,     0,   231,     0,   232,     0,     0,     0,
     235,   236,   530,     0,   239,     0,   240,   241,     0,     0,
     242,   243,   244,   245,     0,   246,   247,   248,   249,   250,
     251,   252,     0,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   267,   268,
     269,   270,   271,   272,   273,   274,     0,   275,     0,   276,
       0,     0,   279,     0,   281,   282,   283,   284,   285,   286,
     287,     0,     0,   288,     0,   290,     0,     0,   292,   293,
     294,   295,   296,   297,   298,   299,   531,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   321,   322,   323,
     324,   325,   326,     0,   327,   328,     0,   330,     0,   331,
     332,   333,   334,   335,   336,     0,   337,   338,     0,     0,
     339,   340,   341,     0,     0,   342,   343,     0,   345,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,     0,     0,     0,     0,   360,   361,   362,
       0,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
       0,   400,   401,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   683,   412,   413,   414,   415,   416,   417,     0,
       0,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,     0,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   532,   448,   449,   450,     0,   451,   452,     0,   453,
       0,   455,   456,   457,   458,   459,     0,   685,   461,     0,
     462,     0,   463,   464,   465,   466,   467,     0,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,   476,   477,
     478,     0,   479,   480,   481,   482,     0,   483,   484,   485,
     486,   487,   488,   489,     0,   490,     0,   492,   493,   494,
     495,   496,   497,   498,     0,     0,   499,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     529,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
     115,   116,   117,   118,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,  1711,
       0,     0,   128,   129,     0,   130,   131,   132,     0,   134,
     135,   136,   137,   138,     0,   140,   141,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   150,   151,
     152,     0,   153,   154,   155,   156,   157,     0,     0,     0,
     159,   160,   161,   162,   163,   164,     0,   166,   167,   168,
       0,   169,   170,   171,   172,   173,   174,     0,     0,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,     0,
     227,   228,   229,   230,     0,   231,     0,   232,     0,     0,
       0,   235,   236,   530,     0,   239,     0,   240,   241,     0,
       0,   242,   243,   244,   245,     0,   246,   247,   248,   249,
     250,   251,   252,     0,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   267,
     268,   269,   270,   271,   272,   273,   274,     0,   275,     0,
     276,     0,     0,   279,     0,   281,   282,   283,   284,   285,
     286,   287,     0,     0,   288,     0,   290,     0,     0,   292,
     293,   294,   295,   296,   297,   298,   299,   531,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,     0,   321,   322,
     323,   324,   325,   326,     0,   327,   328,     0,   330,     0,
     331,   332,   333,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,   343,     0,   345,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,     0,     0,     0,     0,   360,   361,
     362,     0,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,     0,   418,   419,   420,   421,   422,     0,   424,   425,
     426,   427,   428,     0,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   532,   448,   449,   450,     0,   451,   452,     0,
     453,     0,   455,   456,   457,   458,   459,     0,   460,   461,
       0,   462,     0,   463,   464,   465,   466,   467,     0,   468,
     469,   470,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,   488,   489,     0,   490,     0,   492,   493,
     494,   495,   496,   497,   498,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   529,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     114,   115,   116,   117,   118,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   128,   129,     0,   130,   131,   132,     0,
     134,   135,   136,   137,   138,     0,   140,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   150,
     151,   152,     0,   153,   154,   155,   156,   157,     0,     0,
       0,   159,   160,   161,   162,   163,   164,     0,   166,   167,
     168,     0,   169,   170,   171,   172,   173,   174,     0,     0,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
       0,   227,   228,   229,   230,     0,   231,     0,   232,     0,
       0,     0,   235,   236,   530,     0,   239,     0,   240,   241,
       0,     0,   242,   243,   244,   245,     0,   246,   247,   248,
     249,   250,  1888,   252,     0,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     267,   268,   269,   270,   271,   272,   273,   274,     0,   275,
       0,   276,     0,     0,   279,     0,   281,   282,   283,   284,
     285,   286,   287,     0,     0,   288,     0,   290,     0,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   531,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   321,
     322,   323,   324,   325,   326,     0,   327,   328,     0,   330,
       0,   331,   332,   333,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,   343,     0,
     345,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,     0,     0,     0,     0,   360,
     361,   362,     0,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,     0,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,     0,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   532,   448,   449,   450,     0,   451,   452,
       0,   453,     0,   455,   456,   457,   458,   459,     0,   460,
     461,     0,   462,     0,   463,   464,   465,   466,   467,     0,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,   488,   489,     0,   490,     0,   492,
     493,   494,   495,   496,   497,   498,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,   115,   116,   117,   118,   119,   120,   121,   122,
       0,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   128,   129,     0,   130,   131,   132,
       0,   134,   135,   136,   137,   138,     0,   140,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,   149,
     150,   151,   152,     0,   153,   154,   155,   156,   157,     0,
       0,     0,   159,   160,   161,   162,   163,   164,     0,   166,
     167,   168,     0,   169,   170,   171,   172,   173,   174,     0,
       0,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,     0,   189,     0,   190,   191,   192,
     193,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,     0,   202,   203,   204,   205,   206,   207,   208,     0,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,     0,   227,   228,   229,   230,     0,   231,     0,   232,
       0,     0,     0,   235,   236,   530,     0,   239,     0,   240,
     241,     0,     0,   242,   243,   244,   245,     0,   246,   247,
     248,   249,   250,  2241,   252,     0,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     275,     0,   276,     0,     0,   279,     0,   281,   282,   283,
     284,   285,   286,   287,     0,     0,   288,     0,   290,     0,
       0,   292,   293,   294,   295,   296,   297,   298,   299,   531,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,     0,   331,   332,   333,   334,   335,   336,     0,   337,
     338,     0,     0,   339,   340,   341,     0,     0,   342,   343,
       0,   345,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,     0,     0,     0,     0,
     360,   361,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,     0,   400,   401,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,     0,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,     0,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   532,   448,   449,   450,     0,   451,
     452,     0,   453,     0,   455,   456,   457,   458,   459,     0,
     460,   461,     0,   462,     0,   463,   464,   465,   466,   467,
       0,   468,   469,   470,   471,   472,   473,   474,   475,     0,
       0,   476,   477,   478,     0,   479,   480,   481,   482,     0,
     483,   484,   485,   486,   487,   488,   489,     0,   490,     0,
     492,   493,   494,   495,   496,   497,   498,     0,     0,   499,
       0,     0,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
     122,     0,   123,   124,   125,     0,     0,     0,     0,     0,
     126,     0,     0,     0,     0,   128,   129,     0,   130,   131,
     132,     0,   134,   135,   136,   137,   138,     0,   140,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
     149,   150,   151,   152,     0,   153,   154,   155,   156,   157,
       0,     0,     0,   159,   160,   161,   162,   163,   164,     0,
     166,   167,   168,     0,   169,   170,   171,   172,   173,   174,
       0,     0,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,     0,   189,     0,   190,   191,
     192,   193,   194,   195,     0,   196,   197,   198,   199,   200,
     201,     0,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,     0,   227,   228,   229,   230,     0,   231,     0,
     232,     0,     0,     0,   235,   236,   530,     0,   239,     0,
     240,   241,     0,     0,   242,   243,   244,   245,     0,   246,
     247,   248,   249,   250,  2256,   252,     0,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   267,   268,   269,   270,   271,   272,   273,   274,
       0,   275,     0,   276,     0,     0,   279,     0,   281,   282,
     283,   284,   285,   286,   287,     0,     0,   288,     0,   290,
       0,     0,   292,   293,   294,   295,   296,   297,   298,   299,
     531,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   321,   322,   323,   324,   325,   326,     0,   327,   328,
       0,   330,     0,   331,   332,   333,   334,   335,   336,     0,
     337,   338,     0,     0,   339,   340,   341,     0,     0,   342,
     343,     0,   345,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,     0,     0,     0,
       0,   360,   361,   362,     0,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,     0,   400,   401,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,     0,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,     0,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   532,   448,   449,   450,     0,
     451,   452,     0,   453,     0,   455,   456,   457,   458,   459,
       0,   460,   461,     0,   462,     0,   463,   464,   465,   466,
     467,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,   476,   477,   478,     0,   479,   480,   481,   482,
       0,   483,   484,   485,   486,   487,   488,   489,     0,   490,
       0,   492,   493,   494,   495,   496,   497,   498,     0,     0,
     499,     0,     0,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   529,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,   128,   129,     0,   130,
     131,   132,     0,   134,   135,   136,   137,   138,     0,   140,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   150,   151,   152,     0,   153,   154,   155,   156,
     157,     0,     0,     0,   159,   160,   161,   162,   163,   164,
       0,   166,   167,   168,     0,   169,   170,   171,   172,   173,
     174,     0,     0,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,     0,   202,   203,   204,   205,   206,   207,
     208,     0,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,     0,   227,   228,   229,   230,     0,   231,
       0,   232,     0,     0,     0,   235,   236,   530,     0,   239,
       0,   240,   241,     0,     0,   242,   243,   244,   245,     0,
     246,   247,   248,   249,   250,   251,   252,     0,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   267,   268,   269,   270,   271,   272,   273,
     274,     0,   275,     0,   276,     0,     0,   279,     0,   281,
     282,   283,   284,   285,   286,   287,     0,     0,   288,     0,
     290,     0,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   531,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,     0,   331,   332,   333,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,   343,     0,   345,     0,   347,   348,   349,   350,   351,
     352,   353,     0,   355,   356,   357,   358,   359,     0,     0,
       0,     0,   360,   361,   362,     0,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,     0,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,     0,   403,
     404,   405,   406,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,     0,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,     0,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   532,   448,   449,   450,
       0,   451,   452,     0,   453,     0,   455,   456,   457,   458,
     459,     0,   460,   461,     0,   462,     0,   463,   464,   465,
     466,   467,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,   488,   489,     0,
     490,     0,   492,   493,   494,   495,   496,   497,   498,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   841,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   114,   115,   116,   117,     0,   119,
     120,   121,   122,     0,   123,   124,   125,     0,     0,     0,
     842,     0,     0,     0,  -931,     0,   843,   128,   129,     0,
     130,   131,   132,   844,   134,   135,   136,     0,   845,   846,
     847,   848,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,   149,   849,   850,   152,     0,   153,   154,   155,
     156,     0,     0,   851,     0,   852,   160,   161,   162,   163,
     164,   853,   166,   167,   168,     0,   169,   170,   171,   172,
     173,     0,     0,   854,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   855,   856,   188,     0,   189,     0,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   198,
     199,   200,   201,     0,     0,   202,   203,   857,   205,   206,
       0,     0,     0,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,   218,     0,   220,   221,   222,   223,
     224,     0,     0,   226,     0,   227,   228,   858,   230,     0,
     231,     0,   232,   859,     0,   860,   235,   236,  -931,   861,
     239,     0,   240,     0,     0,     0,     0,     0,     0,   245,
       0,   246,   247,   248,   249,   250,   251,   252,   863,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,     0,   265,   864,     0,   268,   269,   270,   271,   272,
     865,   866,     0,   867,     0,   276,   868,   869,   279,   870,
     281,     0,   283,   284,   285,   286,   287,     0,     0,   288,
     871,   290,   872,     0,   292,   293,   294,   295,   296,   297,
     298,   299,   873,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   874,   875,   876,   322,   323,   324,     0,     0,     0,
     327,   328,   877,   330,     0,     0,   332,   878,   334,   335,
     336,     0,   337,   338,     0,     0,   339,   340,   341,     0,
       0,   342,     0,   879,   345,   880,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,   359,     0,
       0,     0,     0,   360,   361,     0,   881,   364,   365,     0,
     367,   368,   369,     0,   370,   371,   372,   373,   374,     0,
       0,   377,     0,   378,   379,   380,   882,   382,   383,   384,
     385,     0,   386,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,     0,   400,   401,   883,
     403,   404,   405,   884,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   885,   418,   419,   420,
     421,   422,   423,   886,   425,   426,     0,   428,   887,     0,
     431,   888,   433,     0,     0,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   889,   448,     0,
     450,     0,   451,   452,     0,   453,   890,   455,   456,   457,
     458,   459,     0,   891,   892,     0,     0,     0,   463,   464,
       0,   466,     0,     0,   468,   469,   893,   471,   472,   473,
     474,   475,   894,     0,   476,   477,   478,     0,   479,   480,
     481,   482,     0,   483,   484,   485,   486,   487,     0,   895,
       0,   490,   896,   492,     0,   494,   495,   496,   497,     0,
       0,     0,   499,     0,     0,   500,   501,   502,   503,   504,
     505,   841,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   517,   518,   519,   520,     0,     0,     0,     0,
     114,   115,   116,   117,     0,   119,   120,   121,   122,     0,
     123,   124,   125,     0,     0,     0,   842,     0,     0,     0,
       0,     0,   843,   128,   129,     0,   130,   131,   132,   844,
     134,   135,   136,     0,   845,   846,   847,   848,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,   149,   849,
     850,   152,     0,   153,   154,   155,   156,     0,     0,   851,
       0,   852,   160,   161,   162,   163,   164,   853,   166,   167,
     168,     0,   169,   170,   171,   172,   173,     0,     0,   854,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     855,   856,   188,     0,   189,     0,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   198,   199,   200,   201,     0,
       0,   202,   203,   857,   205,   206,     0,     0,     0,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
     218,     0,   220,   221,   222,   223,   224,     0,     0,   226,
       0,   227,   228,   858,   230,     0,   231,     0,   232,   859,
       0,   860,   235,   236,     0,   861,   239,     0,   240,     0,
       0,     0,     0,     0,     0,   245,     0,   246,   247,   248,
     249,   250,   862,   252,   863,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,     0,   265,   864,
       0,   268,   269,   270,   271,   272,   865,   866,     0,   867,
       0,   276,   868,   869,   279,   870,   281,     0,   283,   284,
     285,   286,   287,     0,     0,   288,   871,   290,   872,     0,
     292,   293,   294,   295,   296,   297,   298,   299,   873,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   874,   875,   876,
     322,   323,   324,     0,     0,     0,   327,   328,   877,   330,
       0,     0,   332,   878,   334,   335,   336,     0,   337,   338,
       0,     0,   339,   340,   341,     0,     0,   342,     0,   879,
     345,   880,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,   359,     0,     0,     0,     0,   360,
     361,     0,   881,   364,   365,     0,   367,   368,   369,     0,
     370,   371,   372,   373,   374,     0,     0,   377,     0,   378,
     379,   380,   882,   382,   383,   384,   385,     0,   386,   387,
     388,     0,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,     0,   400,   401,   883,   403,   404,   405,   884,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   885,   418,   419,   420,   421,   422,   423,   886,
     425,   426,     0,   428,   887,     0,   431,   888,   433,     0,
       0,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   889,   448,     0,   450,     0,   451,   452,
       0,   453,   890,   455,   456,   457,   458,   459,     0,   891,
     892,     0,     0,     0,   463,   464,     0,   466,     0,     0,
     468,   469,   893,   471,   472,   473,   474,   475,   894,     0,
     476,   477,   478,     0,   479,   480,   481,   482,     0,   483,
     484,   485,   486,   487,     0,   895,     0,   490,   896,   492,
       0,   494,   495,   496,   497,     0,     0,     0,   499,     0,
       0,   500,   501,   502,   503,   504,   505,   709,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   517,   518,
     519,   520,     0,     0,     0,     0,   114,   115,   116,   117,
       0,   119,   120,   121,   122,     0,   123,   124,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     129,     0,   130,   131,   132,     0,   134,   135,   136,   710,
     711,     0,   712,   713,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,   149,   714,   715,   152,     0,   153,
     154,   155,   156,   716,     0,     0,     0,     0,   160,   161,
     162,   163,   164,     0,   166,   167,   168,     0,   169,   170,
     171,   172,   173,     0,     0,     0,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   717,   718,   188,     0,
     189,     0,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   198,   199,   200,   201,     0,     0,   202,   203,   204,
     205,   206,     0,     0,     0,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,   218,   719,   220,   221,
     222,   223,   224,   720,     0,   226,     0,   227,   228,   721,
     230,     0,   231,     0,   232,     0,     0,     0,   235,   236,
     722,     0,   239,     0,   240,     0,     0,     0,   723,   724,
       0,   245,     0,   246,   247,   248,   249,   250,   251,   252,
       0,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   725,   268,   269,   270,
     271,   272,   726,   727,     0,   728,     0,   276,     0,     0,
     279,     0,   281,     0,   283,   284,   285,   286,   287,     0,
       0,   288,     0,   290,     0,     0,   292,   293,   294,   295,
     296,   297,   298,   299,   729,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   730,     0,   731,   322,   323,   324,     0,
     732,     0,   327,   328,     0,   330,     0,   733,   332,   734,
     334,   335,   336,     0,   337,   338,     0,     0,   339,   340,
     341,     0,     0,   342,   735,     0,   345,     0,   736,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
     359,     0,     0,     0,     0,   360,   361,   737,     0,   364,
     365,   738,   367,   368,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   377,     0,   378,   379,   380,   739,   382,
     383,   384,   385,     0,   386,   387,   388,     0,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,     0,   400,
     401,     0,   403,   404,   405,   740,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,     0,   418,
     419,   420,   421,   422,   423,   741,   425,   426,     0,   428,
       0,     0,   431,   742,   433,     0,     0,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   743,
     448,   744,   450,     0,   451,   452,     0,   453,     0,   455,
     456,   457,   458,   459,     0,   745,   746,     0,     0,     0,
     463,   464,   747,   466,   748,     0,   468,   469,   749,   471,
     472,   473,   474,   475,     0,     0,   476,   477,   478,     0,
     479,   480,   481,   482,     0,   483,   484,   485,   486,   487,
    1536,   751,     0,   490,     0,   492,     0,   494,   495,   496,
     497,     0,     0,     0,   499,     0,     0,   500,   501,   502,
     503,   504,   505,   752,   753,   754,   755,   756,   757,   758,
     759,   760,   761,   762,   517,   518,   519,   520,   841,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   114,   115,   116,
     117,     0,   119,   120,   121,   122,     0,   123,   124,   125,
       0,     0,     0,   842,     0,     0,     0,     0,     0,   843,
     128,   129,     0,   130,   131,   132,   844,   134,   135,   136,
       0,   845,   846,   847,   848,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,   149,   849,   850,   152,     0,
     153,   154,   155,   156,     0,     0,   851,     0,   852,   160,
     161,   162,   163,   164,   853,   166,   167,   168,     0,   169,
     170,   171,   172,   173,     0,     0,   854,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   855,   856,   188,
       0,   189,     0,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   198,   199,   200,   201,     0,     0,   202,   203,
     857,   205,   206,     0,     0,     0,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,   218,     0,   220,
     221,   222,   223,   224,     0,     0,   226,     0,   227,   228,
     858,   230,     0,   231,     0,   232,   859,     0,   860,   235,
     236,     0,   861,   239,     0,   240,     0,     0,     0,     0,
       0,     0,   245,     0,   246,   247,   248,   249,   250,   251,
     252,   863,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,     0,   265,   864,     0,   268,   269,
     270,   271,   272,   865,   866,     0,   867,     0,   276,   868,
     869,   279,   870,   281,     0,   283,   284,   285,   286,   287,
       0,     0,   288,   871,   290,   872,     0,   292,   293,   294,
     295,   296,   297,   298,   299,   873,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   874,   875,   876,   322,   323,   324,
       0,     0,     0,   327,   328,   877,   330,     0,     0,   332,
     878,   334,   335,   336,     0,   337,   338,     0,     0,   339,
     340,   341,     0,     0,   342,     0,   879,   345,   880,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,     0,
       0,   359,     0,     0,     0,     0,   360,   361,     0,   881,
     364,   365,     0,   367,   368,   369,     0,   370,   371,   372,
     373,   374,     0,     0,   377,     0,   378,   379,   380,   882,
     382,   383,   384,   385,     0,   386,   387,   388,     0,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,     0,
     400,   401,   883,   403,   404,   405,   884,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   885,
     418,   419,   420,   421,   422,   423,   886,   425,   426,     0,
     428,   887,     0,   431,   888,   433,     0,     0,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     889,   448,     0,   450,     0,   451,   452,     0,   453,   890,
     455,   456,   457,   458,   459,     0,   891,   892,     0,     0,
       0,   463,   464,     0,   466,     0,     0,   468,   469,   893,
     471,   472,   473,   474,   475,   894,     0,   476,   477,   478,
       0,   479,   480,   481,   482,     0,   483,   484,   485,   486,
     487,     0,   895,     0,   490,   896,   492,     0,   494,   495,
     496,   497,     0,     0,     0,   499,     0,     0,   500,   501,
     502,   503,   504,   505,   841,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   517,   518,   519,   520,     0,
       0,     0,     0,   114,   115,   116,   117,     0,   119,   120,
     121,   122,     0,   123,   124,   125,     0,     0,     0,   842,
       0,     0,     0,     0,     0,   843,   128,   129,     0,   130,
     131,   132,   844,   134,   135,   136,     0,   845,   846,   847,
     848,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,   149,   849,   850,   152,     0,   153,   154,   155,   156,
       0,     0,   851,     0,   852,   160,   161,   162,   163,   164,
     853,   166,   167,   168,     0,   169,   170,   171,   172,   173,
       0,     0,   854,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   855,   856,   188,     0,   189,     0,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   198,   199,
     200,   201,     0,     0,   202,   203,   857,   205,   206,     0,
       0,     0,   209,   210,   211,     0,  1873,   213,   214,     0,
     215,   216,   217,   218,     0,   220,   221,   222,   223,   224,
       0,     0,   226,     0,   227,   228,   858,   230,     0,   231,
       0,   232,   859,     0,   860,   235,   236,     0,   861,   239,
       0,   240,     0,     0,     0,     0,     0,     0,   245,     0,
     246,   247,   248,   249,   250,   251,   252,   863,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
       0,   265,   864,     0,   268,   269,   270,   271,   272,   865,
     866,     0,   867,     0,   276,   868,   869,   279,   870,   281,
       0,   283,   284,   285,   286,   287,     0,     0,   288,   871,
     290,   872,     0,   292,   293,   294,   295,   296,   297,   298,
     299,   873,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     874,   875,   876,   322,   323,   324,     0,     0,     0,   327,
     328,   877,   330,     0,     0,   332,   878,   334,   335,   336,
       0,   337,   338,     0,     0,   339,   340,   341,     0,     0,
     342,     0,   879,   345,   880,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,     0,     0,   359,     0,     0,
       0,     0,   360,   361,     0,   881,   364,   365,     0,   367,
     368,   369,     0,   370,   371,   372,   373,   374,     0,     0,
     377,     0,   378,   379,   380,   882,   382,   383,   384,   385,
       0,   386,   387,   388,     0,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,     0,   400,   401,   883,   403,
     404,   405,   884,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,   885,   418,   419,   420,   421,
     422,   423,   886,   425,   426,     0,   428,   887,     0,   431,
     888,   433,     0,     0,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   889,   448,     0,   450,
       0,   451,   452,     0,   453,   890,   455,   456,   457,   458,
     459,     0,   891,   892,     0,     0,     0,   463,   464,     0,
     466,     0,     0,   468,   469,   893,   471,   472,   473,   474,
     475,   894,     0,   476,   477,   478,     0,   479,   480,   481,
     482,     0,   483,   484,   485,   486,   487,     0,   895,     0,
     490,   896,   492,     0,   494,   495,   496,   497,     0,     0,
       0,   499,     0,     0,   500,   501,   502,   503,   504,   505,
    2952,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   517,   518,   519,   520,     0,     0,     0,     0,   114,
     115,   116,   117,     0,   119,   120,   121,   122,     0,   123,
     124,   125,     0,     0,     0,  2953,     0,     0,     0,     0,
       0,  2954,   128,   129,     0,   130,   131,   132,  2955,   134,
     135,   136,     0,   845,  2956,   847,   848,     0,   142,   143,
     144,   145,   146,   147,     0,     0,   148,   149,   849,   850,
     152,     0,   153,   154,   155,   156,     0,     0,  2957,     0,
    2958,   160,   161,   162,   163,   164,  2959,   166,   167,   168,
       0,   169,   170,   171,   172,   173,     0,     0,  2960,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   855,
     856,   188,     0,   189,     0,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   198,   199,   200,   201,     0,     0,
     202,   203,   857,   205,   206,     0,     0,     0,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,   218,
       0,   220,   221,   222,   223,   224,     0,     0,   226,     0,
     227,   228,   858,   230,     0,   231,     0,   232,  2961,     0,
    2962,   235,   236,  2963,  2964,   239,     0,   240,     0,     0,
       0,     0,     0,     0,   245,     0,   246,   247,   248,   249,
     250,   251,   252,  2965,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,     0,   265,  2966,     0,
     268,   269,   270,   271,   272,   865,   866,     0,   867,     0,
     276,  2967,  2968,   279,  2969,   281,     0,   283,   284,   285,
     286,   287,     0,     0,   288,  2970,   290,  2971,     0,   292,
     293,   294,   295,   296,   297,   298,   299,  3239,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   874,  2973,   876,   322,
     323,   324,     0,     0,     0,   327,   328,  2975,   330,     0,
       0,   332,   878,   334,   335,   336,     0,   337,   338,     0,
       0,   339,   340,   341,     0,     0,   342,     0,  2977,   345,
    2978,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,     0,     0,   359,     0,     0,     0,     0,   360,   361,
       0,  2979,   364,   365,     0,   367,   368,   369,     0,   370,
     371,   372,   373,   374,     0,     0,   377,     0,   378,   379,
     380,   882,   382,   383,   384,   385,     0,   386,   387,   388,
       0,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,     0,   400,   401,  2980,   403,   404,   405,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,  2981,   418,   419,   420,   421,   422,   423,     0,   425,
     426,     0,   428,  2983,     0,   431,   888,   433,     0,     0,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,  3240,   448,     0,   450,     0,   451,   452,     0,
     453,  2985,   455,   456,   457,   458,   459,     0,   891,   892,
       0,     0,     0,   463,   464,     0,   466,     0,     0,   468,
     469,  2986,   471,   472,   473,   474,   475,     0,     0,   476,
     477,   478,     0,   479,   480,   481,   482,     0,   483,   484,
     485,   486,   487,     0,   895,     0,   490,  2988,   492,     0,
     494,   495,   496,   497,     0,     0,     0,   499,     0,     0,
     500,   501,   502,   503,   504,   505,   841,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   517,   518,   519,
     520,     0,     0,     0,     0,   114,   115,   116,   117,     0,
     119,   120,   121,   122,     0,   123,   124,   125,     0,     0,
       0,   842,     0,     0,     0,     0,     0,   843,   128,   129,
       0,   130,   131,   132,   844,   134,   135,   136,     0,   845,
     846,   847,   848,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,   149,   849,   850,   152,     0,   153,   154,
     155,   156,     0,     0,   851,     0,   852,   160,   161,   162,
     163,   164,   853,   166,   167,   168,     0,   169,   170,   171,
     172,   173,     0,     0,   854,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   855,   856,   188,     0,   189,
       0,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     198,   199,   200,   201,     0,     0,   202,   203,   857,   205,
     206,     0,     0,     0,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,   218,     0,   220,   221,   222,
     223,   224,     0,     0,   226,     0,   227,   228,   858,   230,
       0,   231,     0,   232,   859,     0,   860,   235,   236,     0,
     861,   239,     0,   240,     0,     0,     0,     0,     0,     0,
     245,     0,   246,   247,   248,   249,   250,   251,   252,   863,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,     0,   265,   864,     0,   268,   269,   270,   271,
     272,   865,   866,     0,   867,     0,   276,   868,   869,   279,
     870,   281,     0,   283,   284,   285,   286,   287,     0,     0,
     288,   871,   290,   872,     0,   292,   293,   294,   295,   296,
     297,   298,   299,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   874,   875,   876,   322,   323,   324,     0,     0,
       0,   327,   328,   877,   330,     0,     0,   332,   878,   334,
     335,   336,     0,   337,   338,     0,     0,   339,   340,   341,
       0,     0,   342,     0,   879,   345,   880,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,     0,     0,   359,
       0,     0,     0,     0,   360,   361,     0,   881,   364,   365,
       0,   367,   368,   369,     0,   370,   371,   372,   373,   374,
       0,     0,   377,     0,   378,   379,   380,   882,   382,   383,
     384,   385,     0,   386,   387,   388,     0,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,   400,   401,
     883,   403,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   885,   418,   419,
     420,   421,   422,   423,     0,   425,   426,     0,   428,   887,
       0,   431,   888,   433,     0,     0,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,     0,   448,
       0,   450,     0,   451,   452,     0,   453,   890,   455,   456,
     457,   458,   459,     0,   891,   892,     0,     0,     0,   463,
     464,     0,   466,     0,     0,   468,   469,   893,   471,   472,
     473,   474,   475,     0,     0,   476,   477,   478,     0,   479,
     480,   481,   482,     0,   483,   484,   485,   486,   487,     0,
     895,     0,   490,   896,   492,     0,   494,   495,   496,   497,
       0,     1,     0,   499,     0,     0,   500,   501,   502,   503,
     504,   505,     2,     0,     3,     4,     0,     0,     1,     0,
       0,     0,     0,   517,   518,   519,   520,     0,     0,     2,
       0,     0,     0,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     8,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     9,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,    10,     0,   593,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,    10,     0,   593,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0,    12,     0,     0,
       0,     0,     0,     0,     0,   594,     0,     0,     0,     0,
       0,    13,     0,    16,     0,     0,     0,     0,     0,     0,
       0,    17,   594,     0,     0,     0,     0,     0,     0,     0,
      16,     0,     0,     0,     0,     0,     0,    20,    17,     0,
       0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    20,     0,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,    27,     0,
       0,     0,     0,     0,    28,     0,     0,    29,     0,     0,
       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,
       0,    28,     0,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,    32,     0,     0,    31,     0,     0,     0,    33,
       0,     0,     0,     0,    34,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,    35,    33,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,    36,     0,     0,
       0,    37,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,    37,     0,
       0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,     0,     0,     0,    38,     0,
      41,     0,     0,     0,     0,    42,     0,     0,     0,   595,
       0,    39,     0,     0,     0,     0,     0,    41,     0,     0,
       0,    43,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   596,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   690
};

static const yytype_int16 yycheck[] =
{
       8,   679,   589,     0,    12,    88,    89,    45,   596,    17,
     784,   588,    21,     0,     0,    23,    24,   796,     0,   808,
      28,    29,    30,    45,    86,    33,   806,   586,    36,    37,
     654,  1257,    40,  1269,  1077,    43,    44,    45,  1551,  1193,
    1036,  1737,   886,   815,   892,  1690,  2127,   703,  1016,  1256,
    1016,  1231,  1440,     0,  2130,     0,     0,     7,  1517,     7,
    1618,  2252,    18,     0,  2654,    37,  2158,  2197,  1233,  1598,
    2162,    21,  1304,    21,  1236,  2686,  2654,  1199,  2685,    88,
      89,    18,  1847,    90,   595,   650,     0,   660,  1445,    90,
     655,   596,   100,  1025,    21,  1025,  1261,   105,   106,   107,
     108,   109,  2296,  2297,  2298,   796,  1025,   798,  1158,   800,
       0,  2248,  1643,  1644,     0,  1165,  2186,     0,     0,     0,
       0,     0,    36,   696,  1025,  2699,     0,  1491,     0,     0,
       0,  1127,  2703,     0,     0,     0,   108,  2191,    88,    89,
      88,    89,  2494,    44,  2311,  2124,     0,    24,     0,     0,
    2559,   614,     0,   586,     0,  3138,     0,     0,     0,     9,
       5,    88,    89,   849,   850,     5,  3019,  2608,  3039,     5,
       4,  2612,  1697,   916,   779,     9,    17,   920,  1757,     5,
       0,    40,  3035,  1860,     5,  1857,   100,     5,     0,     5,
     876,   774,    13,    14,  2331,    13,    14,  1656,  1989,  2320,
       5,     5,    11,     5,     5,  1171,     5,    16,     5,    13,
      14,    13,    14,     5,     5,     5,    13,    14,     9,     9,
       5,   779,  3243,  2324,     5,     5,     5,     5,  1271,     5,
      17,  1755,    57,    47,    47,     5,    47,  1280,    31,    74,
     172,   172,   117,     3,     4,     5,    39,  2022,   173,     9,
     224,     4,     9,  2926,    13,    14,     9,     0,    13,    14,
    2035,    55,  2399,  2400,    11,  2402,    31,     3,   924,    16,
      80,  1119,    17,   193,    39,    18,     9,   107,    21,  1245,
     100,    11,  1248,  1249,    82,    47,    16,    11,   100,    31,
      31,    15,    16,    36,  1074,    93,    65,    39,    39,    35,
      36,    48,    45,   229,   298,  2563,  2564,   183,   172,    65,
     856,  3393,   140,  2999,   122,    65,   293,    65,    48,   290,
    3134,   275,  3137,   292,    48,  2471,  2825,  1433,   316,  2828,
     298,   106,   878,    80,   169,   230,   173,   120,   278,  3466,
    1799,   107,  1801,  2537,   371,    88,    89,    90,   115,   120,
      80,  3334,  3335,   136,   117,   115,    80,   100,   131,    75,
      11,    43,  2454,   115,  3125,    16,  3127,  1023,   914,    82,
     383,   422,    11,   195,   392,   281,    15,    16,    31,   274,
      93,   118,  2147,   177,  3426,    66,   317,   318,   319,   342,
      31,    55,  2982,    74,   120,   118,  1176,    48,   149,  2622,
    1244,   108,   196,   460,  1028,  3576,    11,   201,   166,  1095,
    1096,  2536,   150,    11,  2539,  1569,  3269,   138,   162,   372,
    3031,   509,    82,   412,  1110,  3490,  3491,  3034,  1016,    80,
    2621,  3042,   520,    93,    11,   171,    42,   173,    15,    16,
      11,   193,   124,    48,  1598,    16,   240,   347,  2548,    42,
      48,   202,   383,   886,    11,  2555,  2556,  2557,    15,    16,
     197,   221,   108,   520,  1029,   203,  2596,   195,   148,    90,
    1126,    48,   292,   310,   197,    80,  1041,    48,   131,   254,
     292,  2618,    80,  2620,   244,   385,   475,   262,  1076,   215,
     131,   422,   398,   520,  2717,   108,   331,   241,   393,   131,
     216,   433,   520,    80,   277,  1611,  1017,   128,   274,    80,
    2039,   524,  2491,  3578,   287,   282,  3331,   457,   472,   282,
    3562,   108,   422,  3565,   455,   277,  3340,   515,  3655,  3202,
     524,   539,   196,   541,  3295,   466,  1310,   201,   546,   361,
     220,   549,  3713,   520,   364,  1223,  1224,   330,  3221,   520,
     558,   520,   364,  1099,  3425,  3241,   524,   531,  1922,  1132,
     397,   586,   457,   244,  3063,   648,  2124,  1113,   326,   433,
     176,  1227,  3654,   473,   596,  2696,   240,   509,   586,   248,
     588,   589,   590,   176,   460,  1173,  1174,   462,   596,   520,
     522,  1164,   422,  2851,   363,   520,    71,    72,   524,  2736,
     520,   394,   396,  3624,  1784,   419,   419,   363,   419,  1841,
     409,   410,  2713,   363,  3597,   363,   451,  1200,   298,  2410,
    1225,   629,   630,   631,   538,  2204,   648,  1416,   637,  2775,
     358,   639,   353,  2164,  2759,   433,   401,   394,  2196,   648,
     596,   649,   650,   469,   484,  1078,   654,   655,   482,  1692,
     478,  1877,   460,  3243,  2326,   287,  2333,   419,   595,   401,
     401,   520,   482,  3705,  2189,  3243,   506,  1225,   690,   519,
     482,   512,   506,   681,   682,   520,   684,   511,   512,  2203,
     520,  1424,  3253,   484,   520,   692,   457,   637,   309,   637,
     698,   692,  2467,  3564,   520,   520,   704,   520,   648,   520,
     648,   521,   520,   523,   520,   506,  2897,   516,   518,   521,
    3563,   523,   522,   518,  1950,   520,   520,   522,   520,   520,
     433,   648,   784,   520,  1187,   512,   698,  1499,   520,   520,
     520,   457,   396,  3142,   470,   520,    11,  2904,  1171,   520,
     520,   520,   520,  2843,   520,   701,  3729,  3099,    23,    24,
     520,   511,   512,  3194,   631,  1441,  1442,  3198,   511,   512,
      65,   520,   507,   771,   274,   520,   774,   512,   524,   516,
     450,   421,   769,   518,   524,   520,   524,  1433,   511,   512,
     164,   436,   769,   769,  2148,   454,   516,   769,  3706,   513,
     514,   515,   516,    38,   802,   538,   804,  2931,     0,  2258,
    2259,  2260,   774,   704,    26,  2939,   427,   362,   816,   459,
    2880,  1244,  2044,  3424,   523,   823,   824,   825,   826,   827,
    3014,  2875,   769,    11,   769,   769,     8,   337,   316,    11,
     485,   839,   769,    15,    16,   390,   111,    19,    20,    21,
      26,    13,    14,  1886,   260,   261,  3764,  1813,  2002,  1408,
     234,   520,   595,   596,   470,   769,  3328,  1823,  3330,  1639,
    1826,   886,   513,   514,   515,   516,  3440,   162,  2015,  2016,
    2017,  3442,   511,   512,   513,   514,   515,   516,   886,   769,
    1439,  3018,   524,   769,   372,  2039,   769,   769,   769,   769,
     769,   164,    80,  1571,   637,   769,  1455,   769,   769,   769,
    1959,  1557,   769,   769,   769,   648,  1493,  2886,    38,  1587,
      11,  1488,  1489,  1501,  1694,   769,  1696,   769,   769,  2432,
    1497,   769,   131,   769,  2078,   769,   769,   769,   173,  2388,
     460,  1990,   248,  2491,   511,   512,   513,   514,   515,   516,
     511,   512,   513,   514,   515,   516,   241,   690,   482,   692,
     426,   160,   428,  3560,  1610,  1611,   513,   514,   515,   516,
    2010,  3572,   174,  1619,   380,   381,   211,  1050,  1936,   274,
    1936,  2502,   506,  3717,  1057,  1408,   518,  1550,   520,    80,
     522,    42,   227,  1915,  1640,   248,  1916,  1917,  1026,  1500,
     520,   148,   484,   238,   289,   167,  1501,  1916,  3470,  1564,
     273,    62,   117,  2360,    34,   162,  1439,  1440,  1016,  2366,
     167,    27,  2369,  3204,   506,  1916,  1917,  1918,  1026,   201,
    1028,  1029,  1455,  1031,   162,     5,   769,   515,  3772,   167,
    1809,    61,  1040,  1041,  3624,   230,  1044,   249,   148,    82,
    3647,  1050,   224,   173,  2166,   106,  3624,  2169,  1057,  2275,
      93,  2816,   162,  1078,   515,   515,  1629,   167,   363,  1067,
     376,   522,   522,   220,  1838,  1839,  1840,  2299,  1076,  1077,
    1078,    31,  2226,   282,  1082,   191,   192,  3158,   287,   274,
    1017,   211,  1659,  3788,   241,   390,  3162,   178,  1647,   520,
    3795,  1782,   314,   315,   209,  1867,  2654,   227,   358,   277,
    1050,     4,  1050,   241,   282,  1127,     9,  1057,   238,  1057,
     220,   484,   294,   376,     3,   518,     5,   520,  1809,  2284,
     136,  1129,   367,  1050,   484,    85,   181,  2515,   314,   315,
    1057,   241,   289,   506,    94,   347,  3747,  1828,   454,   384,
     508,   298,  1833,   204,   260,   261,   506,   520,   343,   131,
     518,   289,   108,   244,  1897,  1053,   116,  1195,  2154,   274,
     520,  1059,   277,   341,   509,  1173,  1174,  1175,    27,   205,
    1178,   248,   394,   385,    33,   397,  1919,   522,   160,   289,
    1923,   194,  2344,  1926,  1192,  1193,  2348,  1195,   298,     3,
    2649,   454,  1200,   254,  2653,   255,  2655,   508,   393,  1206,
    1207,   262,  1209,   439,   520,  1206,  1207,   518,  1209,  3400,
     422,   397,   434,   274,  1647,  1556,   422,  1558,  1559,  1244,
     109,   110,  1230,  1231,  2753,   511,     4,   513,  1200,   174,
     131,     9,   441,   193,  1793,  1243,  1244,   367,  1894,   473,
     526,   527,  1819,   452,    27,   306,   206,  1824,   434,   426,
      33,   428,  1260,     4,   384,   477,  1264,   520,     9,   160,
    1268,   473,   457,  1271,   380,   381,   681,   682,   181,   684,
       4,   162,  1280,   178,  1017,     9,   167,   136,  2877,     5,
     296,     4,   108,  2882,   379,   376,     9,  3368,  1260,   521,
    3484,   477,   524,   450,  3370,   277,  1304,   520,   248,   376,
     282,   362,   191,   192,   249,   287,   520,  1050,  2455,  2456,
    2457,  2458,  1941,   520,  1057,  2469,  1945,  2545,  2472,  1948,
     167,  2549,  2550,  2551,   385,   507,   508,   509,  2886,   511,
     512,   513,   514,   515,   516,   426,   520,   428,   521,   244,
     450,   524,  1998,   172,   360,   406,   362,  1090,  1936,  1908,
     241,   518,   178,   136,   629,   522,   631,   482,  1101,   484,
    1793,   518,  2750,   454,   521,   522,   520,   256,   257,   258,
     259,   260,   261,   520,   390,   264,   265,   454,  1048,   521,
     520,   282,   524,  1408,  1127,  2159,   287,   662,   521,   518,
    1398,   524,  1951,   522,  1402,  1403,  1066,   520,   289,  1069,
    1408,  1409,   347,   426,  1963,   428,   178,   518,   683,  2635,
    1407,   522,   520,  1421,  1439,  1440,  2804,   520,   244,   525,
    1407,  1407,  2390,   529,  1058,  1407,   376,  2634,  1062,   513,
    1455,  1439,  1440,   205,  1993,    42,   347,   296,   520,  2619,
     385,  2000,   521,   520,  1452,   524,   172,  1455,   408,  1457,
     426,   411,   428,   248,  2042,    62,  2112,   506,   521,   441,
     521,   524,   521,  1206,  1207,   524,  1209,    13,    14,  2676,
     452,  2633,   244,  2635,   385,  1908,  2258,   422,  2260,  2038,
    1488,  1489,  2041,  1491,   503,  1493,  1494,  2046,  1496,  1497,
     226,   380,   381,  1501,  1577,    13,    14,  1580,  2494,   106,
     521,   360,  1585,   524,   454,  1588,    13,    14,    61,  1517,
    1593,   422,  2255,   296,  2257,   520,  2364,  2365,  1951,   521,
     520,   426,   524,   428,   521,   297,  3618,   524,   473,   205,
    1963,   390,   521,   521,  2323,   524,   524,  3182,   521,   292,
     441,   524,  1551,   248,  3735,  1501,   131,    13,    14,   454,
     376,   452,   521,  2231,   521,   524,  1564,   524,  1566,    27,
    1993,  1569,   473,  1500,  3656,    33,  1574,  2000,  1577,   176,
     520,  1580,    27,   356,    27,   160,  1585,   360,    33,  1588,
      33,   376,    13,    14,  1593,  3715,  3716,  1595,    13,    14,
    1598,   317,   318,   319,   522,   521,   521,   204,   524,   524,
     426,  1551,   428,  1551,   463,  2038,   521,   390,  2041,   524,
    1618,   500,   501,  2046,   521,  1623,   503,   524,    27,   172,
      13,    14,  1647,   521,    33,    27,   524,  1577,   454,  1577,
    1580,    33,  1580,   521,   524,  1585,   524,  1585,  1588,  1647,
    1588,  3771,  3734,  1593,   522,  1593,   183,   254,  1656,   186,
    1577,  1659,   171,  1580,   426,   262,   428,   383,  1585,   454,
    1607,  1588,  1607,  1607,    13,    14,  1593,   274,   136,  3057,
    1607,   376,   521,   521,   520,   524,   524,   178,  3770,   451,
     463,   136,   454,   136,  1692,  3243,   521,  1695,  2654,   524,
     252,     6,   277,  1607,     9,   172,   422,   282,   521,   306,
     376,    16,   287,  1711,   205,  1713,     5,  1715,   521,   385,
     521,   524,    74,   524,   521,   521,    31,   524,  2898,  2945,
      35,   521,  1730,  1731,   524,   520,    74,   136,   521,   455,
     297,   524,    80,  1740,   136,   521,    13,    14,   524,  1740,
     466,  1016,  3387,   244,   521,    93,   422,   524,   521,   454,
    1025,   524,  2618,   115,  2620,   362,   482,  1500,  1714,   776,
    1768,   778,  1770,    61,   317,   318,   319,   115,  1793,   117,
      13,    14,   521,  3286,  2817,   524,  1784,  1785,   385,  3015,
     506,    13,    14,   521,  2343,  1793,   524,  1795,  1796,  1797,
    1798,  1799,  1800,  1801,   520,   520,   297,   473,  1806,   406,
    1808,  1076,  2390,   521,   521,   503,   524,   524,  2385,   108,
    2590,  1819,  1820,    13,    14,   520,  1824,  1825,    13,    14,
     226,  1829,  1830,  1831,  1832,   153,  1834,  1835,   296,   521,
     383,   356,   524,  1841,  1577,   521,   521,  1580,   524,   524,
     153,   296,  1585,   296,   153,  1588,  1854,    13,    14,   153,
    1593,  1859,  1860,  1861,  1862,    42,   441,   521,  1866,  1134,
     520,   209,    13,    14,  1607,    13,    14,   452,  1143,   422,
      13,    14,   277,  1881,   277,   376,  3521,   172,  1886,   178,
    3393,    13,    14,  1908,    42,  1160,   473,   296,   356,    13,
      14,    89,   360,   153,   296,  2669,  1171,   486,  1173,  1174,
    1908,   356,   455,   356,   469,   360,   205,   360,    13,    14,
    2343,    13,    14,   466,  1922,   277,    13,    14,  2690,  1662,
     282,  2710,   390,    13,    14,   426,  1951,   428,  1936,   277,
      13,    14,  2610,   327,   282,   390,   520,   390,  1963,   520,
    2023,   153,  3401,  1951,   445,   244,  2029,   356,    13,    14,
     451,   360,   520,   454,   356,  1963,   371,   372,   360,   371,
     372,   264,   265,  3659,   520,  3661,  1880,   520,  1993,   331,
    2936,   520,   380,   381,    41,  2000,   371,   372,   520,   371,
     372,   390,   153,   331,   522,  1993,  2729,   349,   390,   153,
     115,   153,  2000,   358,  2002,   463,   292,  1740,   297,  1173,
    1174,   349,   314,   315,   465,   466,  2014,   520,   463,   433,
     463,   520,   520,  2038,  2023,   521,  2041,   424,   520,   222,
    2029,  2046,   227,   301,   520,   227,  2034,   520,   227,   299,
    2038,  2039,    42,  2041,  2042,   239,  2044,   520,  2046,   338,
       5,     5,  3249,     5,   520,   520,   520,   172,   520,  3092,
       5,   520,  3748,     5,   463,   520,     5,   149,     9,     3,
    3573,   463,   520,   483,   303,   524,  3624,   104,   524,   521,
    2078,    42,   222,  2023,  2082,  2023,  3072,   376,  2086,  2029,
     390,  2029,  2515,   167,    61,  3053,   167,   239,   289,   451,
    2112,   287,   520,   433,   520,  2654,  2023,   524,   460,    93,
     433,    61,  2029,   451,    61,   482,   433,   267,   433,   531,
     433,   153,   460,   109,   110,   153,  2124,   100,   277,    42,
     277,   520,   277,  3511,   277,     3,  1401,   426,    12,   428,
    1873,   520,   520,    17,     9,    41,   518,  1880,  2982,   431,
    2148,  3654,  2180,   431,   518,    29,   445,   433,  2157,   433,
     433,   433,   451,   522,   521,   454,  3310,   521,   521,    43,
      44,   172,   521,  2171,  3623,   521,  2725,   521,   521,   524,
     521,   479,  2180,  2182,   520,   227,   227,   284,  2186,   520,
     305,   284,   520,    11,   478,   524,  3422,   519,   358,   524,
     524,   528,   317,   318,   319,   191,   192,   431,   520,   520,
     531,   183,   282,   433,  2781,  2948,  2949,  2157,   524,  2157,
     163,   172,   509,   460,   521,   520,   220,  3605,  2226,   267,
     393,  2654,   106,   524,  2232,   230,  2173,   293,  2173,  2173,
    2157,   316,  2182,   524,  2182,   524,  2173,   316,   183,   520,
    2248,   222,   521,   230,   277,  1520,   230,   336,   172,   298,
    2258,  2259,  2260,   473,     0,  2182,   290,   520,   383,  2173,
     256,   257,   258,   259,   260,   261,   520,   423,   264,   265,
    2184,   153,   153,   153,   482,    42,   153,  3243,   277,   292,
    2023,   521,   518,   521,   503,   503,  2029,    42,   521,   172,
     521,  2299,  2725,   521,   521,   292,    61,   422,   172,    11,
      42,   167,   167,  2311,   521,   521,   521,  2329,   521,   520,
     520,  2319,   183,   520,   152,   521,   172,  2750,  2343,   433,
     503,  2318,   519,  2331,  2332,  2333,  2334,   521,  2336,   522,
     455,  2318,  2318,   521,   172,  2343,  2318,   521,   520,  2347,
    2917,   466,  2350,   520,   520,   520,   156,  2355,     9,   479,
     479,    42,   524,   293,   100,   509,   505,   482,   293,  2367,
     247,   457,    61,   524,    61,   267,   277,   153,   205,  2112,
     433,  2804,   153,   520,   153,   433,   433,  2385,   433,   433,
    2388,   506,  2390,   284,   380,   381,   284,  2130,  2947,   172,
     521,  2399,  2400,   519,  2402,   520,    42,   520,   520,  3625,
     358,   521,   148,  2146,   482,   524,   292,  3187,    42,   153,
     521,   290,   282,   519,  2157,   519,   162,    61,   172,   188,
     521,   167,   305,  2432,   167,   520,   172,  1702,   521,   520,
    2173,    80,   172,  3222,   317,   318,   319,   183,   144,  2182,
     201,  2184,   188,  2451,   521,   521,    12,   521,   521,   520,
     520,    17,  2460,  2461,  2462,   302,   531,   521,    83,   364,
     521,  2469,   524,    29,  2472,  3053,   525,   292,  2530,  2477,
     293,   466,  2494,   520,   220,   521,   521,    43,    44,   317,
     318,   319,  2432,  2491,  2432,   183,   153,   176,   524,   521,
    2515,   520,    42,   521,   521,   241,   521,   445,   520,    42,
     383,   521,    86,  2525,   500,   501,   524,  2515,   520,   524,
     460,   519,   172,   520,  2947,   521,   201,     9,   481,   521,
     521,  2471,   465,  2561,  2562,   303,   524,    91,   521,   521,
    2568,   521,   521,   519,   519,   511,   509,    61,  3312,   422,
     106,   520,   207,   289,   482,   383,   292,   521,   115,  2982,
     230,   521,   298,  2561,  2562,   521,     8,    42,    88,  2581,
    2568,   520,   194,    15,    16,   282,   282,    19,    20,    21,
     509,    42,   455,  2581,    42,   522,  2584,   277,   524,  2587,
     522,   152,  3159,   466,   422,   522,  2329,   433,   522,   522,
    3149,   522,   522,  3589,   340,   522,  2604,   522,   433,   482,
    2608,   172,   522,   522,  2612,  2613,  2614,   522,   522,   522,
    2618,  2619,  2620,   522,  2622,   522,   520,   455,   364,   522,
     107,   482,   522,   506,  3057,   522,   522,   522,   466,  2654,
    3308,   522,   522,  2641,   522,  2643,   521,   520,    42,   292,
    3296,  2649,  3298,     9,   482,  2653,  2654,  2655,  2656,  2657,
    2658,  2659,  2660,  2661,  2662,  2663,  2664,  2665,  3624,    42,
     522,  1936,   522,   522,   522,  1940,   520,   522,   506,   522,
     522,   522,   520,   357,   558,   520,   422,  2685,   340,    62,
    2688,   524,   520,  2691,  3243,   524,    61,  3311,   172,   521,
    3314,   521,  2689,   201,   194,   519,  2704,    11,   525,   431,
    2725,   282,  2689,  2689,   450,   589,   590,  2689,   524,  2717,
     433,   524,   521,   349,   460,  3489,  3149,  2725,   586,   520,
      42,   153,   521,   106,   122,  2750,   521,   337,  2736,   231,
     153,    42,   521,   479,   372,   481,   482,  3526,    42,   372,
     520,  2824,  2750,    42,   521,  2753,   317,   318,   319,   520,
    2772,  2494,  2760,  2761,  2762,  2763,  3535,   460,   524,   311,
     520,    99,   503,   508,   172,   433,    93,  2042,   520,   132,
    2684,  2779,   518,  2781,   252,   521,   522,   523,   282,  2804,
       8,   520,  2525,    11,   193,  2793,   460,    15,    16,   445,
      31,    19,    20,    21,   520,    74,  2804,   295,  2712,    74,
      80,  2715,     9,   521,   374,    61,   521,  3485,   521,  2817,
    3243,   520,   383,   521,  2822,  2824,     8,   528,   172,    11,
     704,   204,   465,    15,    16,  2775,   520,    19,    20,    21,
     509,     7,     8,   317,   318,   319,    12,   274,  2581,   521,
     445,    17,   294,   292,    42,    21,   423,    23,    24,    42,
      83,   422,    28,    29,    30,   201,    48,    33,   521,   295,
      36,    37,   520,    55,    40,   295,   520,    43,    44,   521,
     521,   254,  2880,   521,  2824,   390,  2824,   207,  2886,   262,
     292,   292,   148,   520,   455,   525,   521,   529,    80,   120,
    2898,   274,   457,   520,   520,   466,  2904,  2824,   371,   383,
      25,   524,    37,   402,   521,   230,   520,   349,   126,  2917,
    2918,   482,    88,    89,   231,  2941,  2636,  2925,  2649,   769,
    2253,  1807,  2947,   306,   100,  1715,    14,  2315,     0,   105,
     106,   107,   108,   109,  2942,   506,    38,   630,   422,  2947,
    2388,  2684,    44,  3053,  2679,  3541,    24,  3700,  3215,   520,
    3626,  3635,  3693,  3274,  2246,  1231,  2259,  2982,   442,  3623,
    2628,  3633,  2653,  2243,  2704,  1404,  3621,  1488,  2588,  2712,
    1501,   455,  2715,   201,  2982,  1439,  3461,  3186,  2587,   362,
    3573,  3389,   466,  3692,  3428,   177,  3793,  3799,  3257,  2264,
    3773,  3764,   558,  3643,  3745,  3796,   224,  3574,   482,   101,
    3521,  2561,   385,    81,   196,   636,  2179,  3341,  3492,   201,
    3018,  2180,  3133,  3728,  2568,  3729,  2229,  2173,   886,    97,
    2195,  1779,   506,   406,   590,  1192,  3034,  1216,   100,  2772,
     108,  2452,  3057,  1049,  2309,  1049,   520,  1215,  3472,  3047,
    3584,  2212,  2317,  1743,  3300,  3053,  1778,    21,   240,  3057,
    3072,  2182,  3096,  1218,  2329,   507,   508,   509,  2775,   511,
     512,   513,   514,   515,   516,  3624,   294,  2432,  2034,   147,
     648,   173,  2431,  1029,  3082,   637,   148,  2477,  3511,   157,
    3088,  2824,  3236,  3475,  3092,  1457,  3476,  2086,  3096,  1025,
     162,   169,  3670,  1025,  2196,   167,   174,  1025,  2055,  1025,
     172,  1572,   294,  2867,  2161,  2538,  1714,  2042,    30,   211,
     100,   183,    -1,    -1,  3122,  2390,   188,    -1,    -1,  3033,
    2395,    -1,  2397,    -1,  3149,   227,  2401,   205,  2403,    -1,
    3138,    -1,    -1,    -1,    -1,    -1,   238,    -1,   704,    -1,
      -1,  3149,    -1,    -1,    -1,    -1,    -1,    -1,   220,    -1,
      -1,  3159,   586,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1044,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   241,
      -1,   249,  3605,    -1,    -1,   253,    -1,    -1,  3186,    -1,
      -1,    -1,    -1,  1067,    -1,    -1,  3194,   172,    -1,    -1,
    3198,  3624,    -1,    -1,    -1,    -1,    -1,    -1,  3785,    -1,
      -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,
    1078,    -1,    -1,    -1,    -1,   317,  3224,   289,  3243,    -1,
     292,    -1,   324,    -1,  3262,    -1,   298,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3243,  3244,  3245,    -1,    -1,
      -1,    -1,    -1,    -1,   322,  1129,    -1,    -1,    -1,  3257,
      -1,    -1,    -1,    -1,  3262,  3263,    -1,  3265,    -1,    -1,
    3268,   339,    -1,    -1,    -1,   367,    -1,    -1,   340,    -1,
    3184,  3185,    -1,    -1,    -1,  3283,    -1,  3286,    -1,   507,
     508,   509,   384,   511,   512,   513,   514,   515,   516,    -1,
    3033,    -1,   364,    -1,    -1,   373,    -1,    -1,   376,    -1,
      -1,    -1,  3310,  3311,    -1,    -1,  3314,   385,  1192,  1193,
     388,    -1,   504,    -1,    -1,   507,   508,   509,    40,   511,
     512,   513,   514,   515,   516,    -1,  3334,  3335,    -1,  3072,
     408,    -1,   317,   318,   319,    -1,  3286,    -1,  3286,    -1,
    3254,  3255,    -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,
     422,   429,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   439,    -1,   539,    -1,   541,    -1,   445,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,  1244,    -1,   450,  2654,
      -1,    -1,   558,   105,  3393,   107,    -1,   109,   460,    -1,
      -1,  3399,    -1,  3401,  3432,   473,    -1,  3435,   383,    -1,
      -1,    -1,    -1,    -1,  2679,  2680,    -1,   479,    -1,   481,
     482,    -1,   588,   589,   590,    -1,    -1,    -1,    -1,  3162,
      -1,    -1,    -1,    -1,  3432,    -1,    -1,  3435,    -1,    -1,
    3438,    -1,    -1,    -1,    -1,    -1,    -1,   422,    -1,    -1,
      -1,  3184,  3185,  3393,    -1,  3393,   518,    -1,    -1,   521,
     522,   523,   886,   629,   630,   631,    -1,    -1,    -1,    -1,
      -1,   637,    -1,   639,    -1,    -1,    -1,  3475,    57,    -1,
     455,    -1,   648,   649,   650,    -1,    -1,    -1,   654,   655,
      -1,   466,    -1,    -1,    -1,    -1,  3511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
      -1,   586,  2777,  3511,    -1,   681,   682,     0,   684,    -1,
      -1,  3254,  3255,   102,    -1,  3523,    -1,    -1,    -1,    42,
      -1,   506,   698,    -1,    -1,  3439,    -1,    -1,   704,    -1,
       8,    -1,   121,    11,    -1,   520,    -1,    15,    16,    62,
    1408,  3455,    -1,    -1,    -1,  3459,    -1,    -1,    -1,    -1,
      -1,    -1,  3560,   142,  2829,    -1,    -1,   146,    -1,    -1,
      -1,    -1,    -1,    -1,  3573,    -1,  3574,  3575,  3576,    -1,
      48,  1439,  1440,    -1,    -1,    -1,  3584,    55,    -1,   168,
    3605,    -1,   171,   106,   107,    -1,    -1,  1455,  3596,  3597,
      -1,    -1,   115,    -1,    -1,   771,    -1,  3605,   774,  3624,
     189,    -1,    80,  3641,    -1,  3643,  3614,   100,    -1,  1493,
    1494,    -1,  1496,    -1,    -1,  3623,  3624,    -1,    -1,    -1,
      -1,    -1,    -1,  3573,    -1,  3573,  1192,  3370,    -1,    -1,
      -1,    -1,    -1,  3641,    -1,  3643,    -1,  3645,    -1,  3647,
     816,    -1,    -1,    -1,  1078,  3654,    -1,   823,   824,   825,
     826,   827,    -1,   176,    -1,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   839,    -1,    -1,    -1,    -1,   146,   162,
      -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,
      -1,   204,    -1,    -1,  3692,  1569,    -1,    -1,    -1,    -1,
     183,    -1,    -1,   282,    -1,   188,  3439,    -1,  3706,   177,
      -1,   290,  3616,    -1,  3654,  3713,  3654,  3745,  3746,    -1,
      -1,  1595,  3455,    -1,  1598,    -1,  3459,    -1,   196,    -1,
    3728,  3729,   311,   201,    -1,  3639,    -1,   220,    -1,    -1,
      -1,   254,    -1,    -1,    -1,    -1,    -1,  3745,  3746,   262,
      -1,    -1,  3780,    -1,    -1,    -1,    -1,    -1,   241,    -1,
      -1,   274,   341,    -1,   277,  3030,  3764,    -1,    -1,    -1,
    3798,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,  3777,
      -1,    -1,  3780,    -1,    -1,    -1,    -1,  3785,  3053,  1647,
      -1,    -1,    -1,   306,    -1,    -1,  3794,    -1,    -1,    -1,
    3798,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,   886,    -1,    -1,    -1,   298,    -1,    -1,    -1,    -1,
    1244,    -1,    -1,    -1,    -1,    -1,   294,   539,    -1,   541,
      -1,    -1,    -1,    -1,   546,     8,    -1,   549,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,   362,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,
      -1,  3126,  1028,  1029,    37,  1031,    -1,    -1,  1034,    -1,
      -1,    -1,   385,    -1,  1040,  1041,    -1,    -1,  1044,    -1,
      -1,   364,    -1,  3616,  1050,    -1,    -1,    -1,    -1,    -1,
      -1,  1057,    -1,   406,    -1,   408,  1770,    -1,   411,    -1,
      -1,  1067,    -1,    -1,    -1,    -1,  3639,    -1,    -1,    -1,
      -1,  1785,    -1,    -1,    -1,    -1,  1082,    -1,    -1,    -1,
      -1,  1795,    -1,  1797,    -1,    -1,  1800,   639,   396,    -1,
      -1,    -1,  1806,    -1,  1808,  1793,    -1,    -1,  1494,   422,
    1496,     8,    -1,    -1,    11,    -1,  1820,    -1,    -1,    16,
      -1,  1825,    19,    20,    21,  1829,  1830,  1831,  1832,    -1,
    1834,  1835,    -1,  1129,    -1,    -1,    -1,   450,    -1,    -1,
     586,    -1,    -1,    -1,    -1,    -1,    -1,   460,  3243,    -1,
      -1,    48,    -1,    -1,  1408,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,   481,   482,
      -1,    -1,     8,  1078,    -1,    11,    -1,   520,    38,  1175,
      16,    -1,  1178,    80,    44,  1439,  1440,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1192,  1193,    -1,     8,
      -1,  1455,    11,    -1,  1200,   518,   504,    16,   521,   522,
     523,    -1,    48,   511,   512,   513,   514,   515,   516,    55,
    1908,   224,    -1,    -1,    -1,    -1,  1222,    -1,    -1,   771,
      -1,    -1,    -1,    -1,  1230,  1231,    -1,    -1,    -1,    48,
      -1,   101,    -1,    -1,    80,    -1,    55,  1243,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,  1951,  1260,    19,    20,    21,  1264,    -1,
      -1,    80,  1268,    -1,   816,  1963,    -1,    -1,    -1,    -1,
     177,   823,   824,   825,   826,   827,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,    48,    -1,    -1,   839,  2002,   196,
      -1,    55,    -1,    -1,   201,  1993,    -1,    -1,    -1,    -1,
     146,    -1,  2000,   173,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   183,    -1,    -1,    80,    -1,  3423,    -1,
    2034,    -1,    -1,    -1,    -1,  2039,    -1,   146,    -1,  1244,
      -1,   177,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
    2038,   211,    -1,  2041,    -1,    -1,    -1,    -1,  2046,    -1,
     196,    -1,    -1,    -1,    -1,   201,    -1,   227,   177,    -1,
      -1,    -1,     8,    -1,  2078,    11,    -1,    -1,   238,    15,
      16,    -1,  2086,    19,    20,    21,    -1,   196,    -1,    -1,
      -1,    -1,   201,  1647,    -1,    -1,    -1,   294,    -1,  1785,
      -1,    37,  1398,    -1,   240,    -1,  1402,  1403,    -1,  1795,
     270,  1797,    -1,  1409,  1800,    -1,    -1,    -1,    -1,    -1,
    1806,    -1,  1808,   177,    -1,  1421,    -1,    -1,    -1,    -1,
      -1,   240,   292,    -1,  1820,    -1,    -1,    -1,    -1,  1825,
     886,    -1,   196,  1829,  1830,  1831,  1832,   201,  1834,  1835,
      -1,    -1,    -1,    -1,    -1,    -1,  1452,   317,   294,    -1,
      -1,  1457,    -1,    -1,   324,    -1,    -1,  2171,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,   240,    -1,    -1,  1031,
      -1,    -1,  1488,  1489,    -1,    -1,    -1,  1493,  1494,   396,
    1496,  1497,    -1,  1408,   507,   508,   509,   367,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2226,   277,   384,    -1,   280,    -1,  2232,  3624,
      -1,    -1,    -1,    -1,  1439,  1440,    -1,    -1,    -1,  1793,
     294,    -1,    -1,    -1,    -1,    -1,    -1,  1543,  1544,    -1,
    1455,    -1,  1548,    -1,    -1,  1551,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1564,    -1,
    1566,  3666,    -1,  1569,    -1,    -1,    -1,    -1,  1574,    -1,
      -1,  1577,    -1,    -1,  1580,    -1,    -1,   396,   224,  1585,
      -1,    -1,  1588,    -1,    -1,   455,    -1,  1593,    -1,  1595,
     460,    -1,  1598,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,  1618,    -1,    -1,    -1,    -1,  1623,    -1,    -1,
    2334,    -1,  1078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1908,  2343,    -1,    -1,   294,    -1,
      -1,    -1,    -1,  1659,    -1,    -1,    -1,    -1,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,
      -1,    -1,    -1,   109,   110,   504,    -1,  1951,    -1,    -1,
      -1,  1243,   511,   512,   513,   514,   515,   516,    -1,  1963,
      -1,    -1,    -1,    -1,    -1,  1711,    -1,  1713,    -1,  1715,
      -1,    -1,  1264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1730,  1731,    -1,    -1,    -1,  1993,
      -1,    -1,  1647,    -1,    -1,    -1,  2000,  1743,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,  2469,    -1,    -1,  2472,    -1,
      -1,    -1,  1768,  2477,  1770,   191,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2038,  2171,    -1,  2041,  1784,  1785,
      -1,    -1,  2046,    -1,    -1,    -1,    -1,    -1,  1244,  1795,
    1796,  1797,  1798,    -1,  1800,    -1,    -1,    -1,    -1,    -1,
    1806,    -1,  1808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1819,  1820,    -1,    -1,  2515,  1824,  1825,
      -1,    -1,    -1,  1829,  1830,  1831,  1832,    -1,  1834,  1835,
     256,   257,   258,   259,   260,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1854,    -1,
    1402,  1403,    -1,  1859,  1860,  1861,  1862,  1409,    -1,    -1,
    1866,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,  1881,    -1,    -1,  1793,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2608,    -1,    -1,    -1,  2612,  2613,
    2614,     8,    -1,    -1,    11,    -1,    -1,   586,    15,    16,
      -1,    -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1016,  2641,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2334,    -1,
      -1,    -1,  2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,
    2664,  2665,  1408,    -1,   380,   381,  2654,    -1,  1964,  1965,
    1966,  1967,  1968,  1969,    -1,    -1,  1972,  1973,  1974,  1975,
    1976,  1977,  1978,  1979,  1980,  1981,    -1,    -1,  2858,  2859,
    2860,  2861,    -1,  1439,  1440,    -1,  1076,    -1,    -1,    -1,
      -1,    -1,    -1,  1908,    -1,    -1,  2002,     8,    -1,  1455,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,  2014,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2023,    -1,    -1,
      -1,    -1,  1574,  2029,    -1,    -1,    -1,  2725,  2034,    -1,
      -1,    -1,    -1,  2039,    -1,    -1,  1951,    48,    -1,  2753,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,  1963,    -1,
    1034,    -1,  2750,  1143,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    -1,  2779,    -1,    -1,    -1,    80,
      -1,    -1,  2078,    -1,   500,   501,  2082,    -1,  1993,  2343,
    2086,  1171,    -1,  1173,  1174,  2000,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,  2107,  2108,    -1,    -1,    -1,  2804,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,  2124,    -1,
     101,    -1,    -1,  2038,    -1,    -1,  2041,    -1,    -1,    -1,
      -1,  2046,    -1,    -1,    -1,   146,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,  2157,    19,    20,    21,  1245,    -1,    -1,  1248,  1249,
      -1,  1713,    -1,  1715,    -1,  2171,   177,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,  2182,    -1,  1730,    -1,
    2186,    -1,    -1,    -1,    -1,   196,    -1,   294,    -1,    -1,
     201,  1647,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,  2918,    11,    -1,   886,    -1,    15,
      16,    -1,    -1,    19,    20,    21,  1768,  2613,  2614,    -1,
    2226,    -1,    -1,  2229,    -1,    -1,  2232,    -1,    -1,   240,
     211,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2248,    -1,    -1,  2641,   227,    -1,    -1,  2947,
      -1,  2515,    -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,
    2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,  2664,  2665,
    3150,  3151,  3152,  3153,  3154,  3155,  3156,    -1,    -1,    -1,
    3160,  3161,    -1,   294,  2982,  3165,    -1,    -1,  3168,   270,
      -1,  3171,  3172,  3173,  3174,  3175,  3176,  3177,  3178,  3179,
    3180,    -1,  1854,    -1,    -1,  2311,    -1,  1859,  1860,  1861,
    1862,   292,    -1,  2319,  1866,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2331,  2332,  2333,  2334,    -1,
    2336,    -1,    -1,    -1,    -1,    -1,   317,  1793,    -1,    -1,
      -1,  2347,    -1,   324,  2350,    -1,    -1,  1437,    -1,  2355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,  1448,  3057,
    1450,  2367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1460,    -1,    -1,    -1,  3088,    -1,    -1,    -1,    -1,  2385,
      -1,    -1,  3096,    -1,    -1,   396,   367,  1477,    -1,    -1,
    2654,    -1,    -1,  2399,  2400,    -1,  2402,    -1,    -1,  1078,
     507,   508,   509,   384,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,  1506,  1507,   224,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2432,   294,  2343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2451,    -1,    -1,    -1,    -1,
      -1,  3149,  1908,    -1,  2460,  2461,  2462,    -1,    -1,    -1,
      -1,  2725,  2014,  2469,    -1,  2471,  2472,    -1,    -1,    -1,
      -1,  2477,    -1,    -1,   455,    -1,    -1,    -1,    -1,   460,
    3194,    -1,    -1,    -1,  3198,  2491,  2750,  3367,   294,  3369,
      -1,  3371,    -1,   504,    -1,  1951,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,   515,   516,    -1,  1963,    -1,    -1,
    3224,    -1,    -1,  2519,  2520,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2918,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3244,  3245,    -1,    -1,    -1,    -1,    -1,  1993,    -1,    -1,
    2804,    -1,    -1,    -1,  2000,  3243,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3268,    -1,    -1,    -1,    -1,  1543,
    1544,    -1,    -1,    -1,  1548,  1244,    -1,    -1,  2574,    -1,
      -1,    -1,    -1,    -1,    -1,  2581,    -1,    -1,  2584,    -1,
      -1,  2587,  2038,    -1,    -1,  2041,    -1,    -1,    -1,    -1,
    2046,    -1,    -1,    -1,    -1,    -1,  3310,    -1,  2604,    -1,
    2515,    -1,  2608,    -1,    -1,    -1,  2612,  2613,  2614,    -1,
      -1,    -1,  2618,  2619,  2620,    -1,  2622,    -1,    -1,    -1,
    3500,    -1,    -1,  3503,  3504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3512,    -1,    -1,  2641,    -1,  2643,    -1,  3519,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
    2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,  2664,  2665,
      -1,    -1,    -1,    -1,  1754,  1755,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2685,
    1034,    -1,  2688,  2947,    -1,  2691,    -1,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    -1,    44,    -1,  2704,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,  2717,    -1,    -1,    -1,    -1,    -1,    -1,  2982,    -1,
    3600,  3601,    -1,  1813,  3604,    -1,    -1,    -1,  3608,  1408,
    2736,  3611,  3612,  1823,    -1,    -1,  1826,    -1,    -1,  2654,
      -1,  2747,    -1,    -1,    -1,    -1,    -1,  2753,    -1,    -1,
      -1,    -1,    -1,   101,  2760,  2761,  2762,  2763,    -1,    -1,
    1439,  1440,    -1,    -1,    -1,    -1,  2772,  2319,    -1,  2775,
      -1,    -1,    -1,  2779,    -1,  2781,  1455,    -1,    -1,    -1,
    2332,  2333,    -1,    -1,  2336,    -1,    -1,  2793,    -1,    -1,
      -1,    -1,    -1,  3057,    -1,  2347,    -1,    -1,  2350,    -1,
      -1,    -1,    -1,  2355,  3684,  3685,    -1,    -1,  3688,  3523,
    2725,    -1,    -1,  3511,    -1,    -1,  2822,    -1,  2824,    -1,
      -1,  1911,  1912,    -1,    -1,   173,    -1,    -1,  3224,     8,
      -1,    -1,    11,    -1,    -1,  2750,    15,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1936,    -1,  3244,  3245,
      -1,    -1,  2858,  2859,  2860,  2861,    -1,    -1,    -1,  1213,
      -1,    -1,    -1,   211,    -1,    -1,    -1,    -1,  1222,    48,
      -1,    -1,  3268,    -1,  2880,    -1,    55,    -1,    -1,   227,
    2886,    -1,    -1,    -1,    -1,  3149,    -1,  2343,    -1,  2804,
     238,    -1,  2898,    -1,    -1,    -1,    -1,    -1,  2904,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,  3605,  2460,  2461,
    2462,  2917,  2918,  2919,    -1,    -1,    -1,    -1,    -1,  2925,
      -1,    -1,   270,    -1,    -1,    -1,  3624,    -1,    -1,    -1,
      -1,    -1,   679,   680,    -1,     8,  2942,    -1,    11,    -1,
      -1,    -1,    15,    16,   292,    -1,    19,    20,    21,    -1,
      -1,    -1,  2042,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,   146,  1647,   317,
      -1,    -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,  3243,
    1964,  1965,  1966,  1967,  1968,  1969,    -1,    -1,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3018,    -1,    -1,    -1,    -1,   196,    -1,   367,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,  3034,    -1,
      -1,    -1,  2947,    -1,     8,    -1,   384,    11,    -1,    -1,
      -1,  3047,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3056,    -1,  2604,    -1,    -1,   802,   803,    -1,    -1,  2515,
      -1,   240,    -1,    -1,    -1,    -1,    -1,  2982,    -1,    -1,
      -1,  3785,    -1,  2163,    48,    -1,  3082,    -1,    -1,    -1,
      -1,    55,  3088,    -1,    -1,     8,    -1,    -1,    11,    -1,
    3096,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,   455,    -1,    -1,
      -1,    -1,  2202,  2203,  1793,   294,  3122,    -1,    -1,    -1,
      -1,    -1,    -1,  2107,  2108,    48,    -1,  3523,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,  2688,    -1,    -1,  2691,
      -1,    -1,  3057,    -1,  3150,  3151,  3152,  3153,  3154,  3155,
    3156,   224,    -1,  3159,  3160,  3161,    -1,    80,    -1,  3165,
      -1,    -1,  3168,    -1,    -1,  3171,  3172,  3173,  3174,  3175,
    3176,  3177,  3178,  3179,  3180,    -1,    -1,    -1,    -1,    -1,
    3186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3194,  1543,
    1544,    -1,  3198,    -1,  1548,    -1,    -1,    -1,  2654,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,  2760,  2761,
    2762,  2763,    -1,    -1,    -1,    -1,     8,   396,  3224,    11,
      -1,   294,   196,    15,    16,    -1,    -1,   201,    -1,  1908,
      -1,    -1,    -1,     8,  3149,    -1,    11,    -1,  3244,  3245,
      15,    16,    -1,    -1,    19,    20,    21,  3511,    -1,    -1,
      -1,  3257,    -1,    -1,   177,    -1,    48,  3263,    -1,  3265,
      -1,    -1,  3268,    55,    -1,    -1,   240,    -1,    -1,  2725,
      -1,  2361,  1951,   196,    -1,  1022,    -1,  3283,   201,    -1,
    3286,    -1,    -1,  1030,  1963,    -1,  1033,    -1,    80,  1036,
    1037,  1038,  1039,    -1,  2750,    -1,    -1,    -1,    -1,    -1,
    3306,   224,   225,    -1,  3310,  3311,    -1,    -1,  3314,    -1,
      -1,    -1,    -1,    -1,  1993,    -1,    -1,   240,    -1,    -1,
     294,  2000,    -1,    -1,    -1,   504,    -1,    -1,  3243,    -1,
    1077,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
     115,  3605,    -1,    -1,    -1,  3351,  3352,  1094,  2804,    -1,
      -1,    -1,    -1,    -1,   146,    -1,    -1,   280,    -1,  2038,
    3624,  3367,  2041,  3369,  1111,  3371,    -1,  2046,    -1,    -1,
      -1,   294,    -1,  2925,    -1,  1122,  1123,  1124,    -1,  1126,
    1127,    -1,    -1,    -1,    -1,   177,    -1,  3393,    -1,  1743,
      -1,    -1,    -1,  3399,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,  1154,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3438,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   240,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1208,    -1,    -1,    -1,  1212,  1213,    -1,    -1,  3475,
      -1,    -1,    -1,   396,    -1,    -1,  1223,  1224,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,  3493,    -1,    -1,
      -1,  2947,    -1,    -1,  3500,    -1,    -1,  3503,  3504,    -1,
      -1,    -1,   294,    -1,    -1,    -1,  3512,    -1,  3514,  3515,
      -1,    -1,    -1,  3519,    -1,    -1,    -1,  3523,    48,   294,
      -1,    -1,    -1,    -1,  1271,    55,  2982,    -1,    -1,    -1,
     504,    -1,    -1,  1280,    -1,  2519,  2520,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,  3560,    -1,    -1,  1304,    -1,    -1,
      -1,    -1,    -1,    -1,  2654,    -1,    -1,  3573,  3574,  3575,
    3576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3584,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,  3600,  3601,  3511,    -1,  3604,    -1,
      -1,  3057,  3608,    -1,   396,  3611,  3612,    -1,  3614,    -1,
    1964,  1965,  1966,  1967,  1968,  1969,   146,    -1,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,  3645,
      -1,  3647,    -1,    -1,    -1,    -1,    -1,   177,  3654,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2343,    -1,   196,    -1,    -1,    -1,
      48,   201,    -1,    -1,    -1,    -1,    -1,    55,  3684,  3685,
      -1,    -1,  3688,    -1,    -1,    -1,  3692,    -1,    -1,    -1,
    3605,    -1,    -1,  3149,    -1,    -1,    -1,    -1,    -1,    -1,
    3706,    -1,    80,    -1,    -1,  3257,    -1,  3713,    -1,  3624,
     240,  3263,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,  3283,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2107,  2108,    -1,    -1,    -1,  3764,    -1,
      -1,    -1,    -1,  2747,   294,    -1,    -1,    -1,   146,    -1,
      -1,  3777,    -1,    -1,    -1,    -1,  1523,    -1,    -1,  3785,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3243,  3794,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1556,
      -1,  1558,  1559,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,  1571,  1572,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2515,    -1,    -1,    -1,
    1587,    -1,    -1,    -1,    -1,    -1,  2936,  3399,    -1,    -1,
      -1,  2941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   396,    -1,  1615,    -1,
      -1,    -1,    -1,    -1,    -1,  2229,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3438,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1642,    -1,    -1,    -1,  2989,
    2990,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,    -1,
      -1,    -1,    -1,  1660,  1661,    -1,   294,    -1,  1665,    -1,
      -1,    -1,  1669,    -1,    -1,  1672,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,    -1,  2919,  1683,    -1,    -1,    -1,
      -1,    -1,    -1,  1690,    -1,  1692,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1716,
      -1,    -1,    -1,    -1,   504,  2654,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    -1,  1754,  1755,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1034,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,    -1,  2725,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3511,    -1,    -1,    -1,    -1,
      -1,    -1,  3614,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,  2750,  3056,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,  3645,  1841,    -1,    -1,  1844,  1845,    -1,
    1847,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2804,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,   515,   516,  1886,
    1144,    -1,  3232,  3233,    -1,    -1,    -1,    -1,    -1,  3605,
      -1,    -1,    -1,  3243,  3706,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,    -1,   177,  2519,  2520,    -1,  3624,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,   196,  1188,    -1,    -1,    -1,   201,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    37,    15,
      16,     0,    -1,    19,    20,    21,    -1,    -1,  1955,  1956,
      -1,  1958,  3764,    -1,    -1,    -1,    -1,    -1,  1222,    -1,
    2574,    -1,    -1,    22,    -1,  3777,    -1,   240,    -1,    -1,
      -1,    -1,   294,    -1,    33,    -1,    35,    36,    -1,    -1,
    1987,  1988,  3794,    -1,  1991,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,  2947,    -1,
      -1,    -1,    -1,  2020,    -1,    -1,    75,    -1,  2025,    -1,
      -1,   294,    -1,    -1,    -1,    -1,    -1,    86,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2044,    -1,    98,
      -1,   100,    -1,  2982,    -1,  1309,    -1,  2054,    -1,    -1,
    1314,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,   127,    -1,
      -1,    -1,    -1,  2080,    -1,    -1,    -1,   136,  2085,    -1,
      -1,  2088,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,    -1,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3351,  3352,   168,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,  3057,  2126,
      -1,    -1,  2129,   396,  2131,   224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2747,    -1,    -1,    -1,    -1,    -1,    -1,
    2147,   200,     8,    -1,    -1,    11,    -1,    -1,   224,    15,
      16,    -1,    -1,    19,    20,    21,    -1,   216,  2772,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2794,    -1,    -1,    -1,   243,   507,   508,   509,  2195,   511,
     512,   513,   514,   515,   516,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2212,  2213,    -1,    -1,    -1,
    3149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,  2231,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,  2240,    -1,    -1,    -1,    -1,   511,   512,
     513,   514,   515,   516,  2858,  2859,  2860,  2861,    -1,  3493,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1521,   317,   318,
     319,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,   328,
    3514,  3515,    -1,    -1,  3624,  1539,    -1,  1541,    -1,  1543,
    1544,  1545,    -1,    -1,  1548,    -1,    -1,    -1,  1552,    -1,
      -1,  1555,  2299,    -1,    -1,    -1,  1560,    -1,    -1,  1563,
      -1,   360,    -1,    -1,  3243,  2919,    -1,    -1,    -1,    -1,
     369,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,
      -1,   390,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2353,   406,    -1,  1613,
      -1,    -1,    -1,  1617,    -1,    -1,  1620,  1621,  1622,   418,
      -1,    -1,  1626,   422,    -1,    -1,  1630,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442,    -1,  1034,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,    -1,   458,
      -1,    -1,   461,    -1,    -1,    -1,    -1,   466,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,   482,    -1,  1689,    -1,    -1,   294,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,  3056,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,     8,   523,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,  1737,    19,    20,    21,    -1,    -1,  2486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2494,    -1,  1753,
      -1,    -1,    37,    -1,  1758,    -1,  2503,    -1,    -1,  2506,
      -1,  2508,    -1,    48,    -1,    -1,    -1,    -1,    -1,  2516,
      55,  1775,    -1,    -1,    -1,    -1,    -1,  2524,  2525,    -1,
      -1,    -1,    -1,    -1,  2531,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    80,  3150,  3151,  3152,  3153,
    3154,  3155,  3156,    -1,    -1,    -1,  3160,  3161,    -1,    -1,
      -1,  3165,    -1,    -1,  3168,    -1,    -1,  3171,  3172,  3173,
    3174,  3175,  3176,  3177,  3178,  3179,  3180,    -1,    -1,    -1,
    2577,    -1,  3511,  1222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2589,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2610,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3605,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,  3624,    -1,    -1,    -1,  1953,
      -1,    -1,  3306,    -1,    -1,   240,    -1,  1961,  1962,    -1,
    1964,  1965,  1966,  1967,  1968,  1969,    -1,    -1,  1972,  1973,
    1974,  1975,  1976,  1977,  1978,  1979,  1980,  1981,  1982,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,    -1,  3351,  3352,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    27,   294,
      16,    -1,   297,  3367,    33,  3369,    -1,  3371,    -1,    -1,
    2767,  2768,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2784,    -1,    -1,
      -1,    -1,    48,    62,    -1,    -1,    -1,  2794,    -1,    55,
      -1,  2798,  2799,  2057,    -1,    -1,  2803,    -1,    -1,    -1,
      -1,  2808,    -1,    -1,  2811,  2812,    -1,    -1,    -1,  2816,
    2817,    -1,    -1,  2820,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2090,   106,    -1,    -1,
    2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,    -1,    -1,
      -1,    -1,    -1,  2107,  2108,    -1,  2110,  2111,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,   136,  2122,    -1,
    2867,  2125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2133,
    2134,  2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  3493,
     146,    -1,    -1,    -1,    -1,    -1,  3500,    -1,    -1,  3503,
    3504,    -1,    -1,    -1,  1543,  1544,    -1,    -1,  3512,  1548,
    3514,  3515,    -1,    -1,  2911,  3519,  2170,     8,    -1,    -1,
      11,   177,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,
     196,  2938,    -1,    -1,    -1,   201,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,  2229,   511,   512,   513,   514,
     515,   516,    -1,    -1,   240,   254,    -1,    -1,    -1,    80,
      -1,    -1,    -1,   262,    -1,    -1,  3600,  3601,    -1,    -1,
    3604,    -1,    -1,    -1,  3608,   274,    -1,  3611,  3612,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3022,    -1,   296,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   306,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1688,
    2304,  2305,  2306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3072,    -1,    -1,    -1,    -1,
    3684,  3685,    -1,    -1,  3688,    -1,   177,   356,    -1,    -1,
      -1,   360,    -1,   362,    -1,  3092,    -1,    -1,    -1,    -1,
      -1,    -1,  3099,    -1,  1743,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,  3110,  3111,    -1,   385,  3114,    -1,    -1,
      -1,   390,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,   406,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,  2407,  2408,  2409,    -1,    -1,  2412,  2413,
    2414,  2415,  2416,  2417,    -1,    -1,    -1,  2421,  2422,  2423,
    2424,  2425,  2426,  2427,  2428,  2429,  2430,    -1,    -1,    -1,
      -1,  2435,  2436,    -1,    -1,  3182,   277,    -1,    -1,   280,
      -1,    -1,    -1,  3190,   463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,  2463,
      -1,    -1,    -1,    -1,  2468,    -1,  3213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2495,    -1,    -1,  2498,    -1,  2500,    -1,   504,    -1,
    2504,  2505,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,  2518,  2519,  2520,  2521,    -1,  2523,
      -1,    -1,    -1,  2527,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3282,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3300,    -1,   396,    -1,  3304,    -1,    -1,
      -1,  3308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3318,    -1,    -1,    -1,  1964,  1965,  1966,  1967,  1968,
    1969,    -1,    -1,  1972,  1973,  1974,  1975,  1976,  1977,  1978,
    1979,  1980,  1981,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3406,
      -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    81,    -1,    -1,    -1,
      -1,    -1,     3,   524,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    97,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2716,    -1,    -1,  3462,    37,    -1,  2107,  2108,
      -1,    42,    -1,    -1,    -1,  3472,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,  3485,    -1,
      -1,    -1,   147,  2747,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
      -1,    -1,    -1,    -1,  3521,    -1,    -1,    -1,    -1,    -1,
      -1,  2785,    -1,    -1,    -1,  2789,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2797,    -1,  3542,  2800,    -1,  2802,    -1,
     205,    -1,  2806,    -1,    -1,  2809,  2810,    -1,    -1,  2813,
    2814,    -1,    -1,    -1,    -1,    -1,    -1,  2821,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    19,    20,    21,    -1,
    2229,    -1,    -1,    -1,   249,    -1,    -1,    -1,   253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,  2862,    -1,
      -1,    -1,  2866,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    -1,   196,    -1,    -1,    -1,  2883,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2919,    -1,   322,    -1,   240,
      -1,    -1,  3669,  3670,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   338,   339,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,   373,    42,
    3717,   376,    -1,   294,    -1,    48,   297,    -1,    -1,    -1,
     385,    -1,    55,   388,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   408,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,   422,   201,    -1,
      -1,    -1,    -1,    -1,   429,  3772,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   439,    -1,    -1,    -1,    -1,    -1,
     445,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3055,  3056,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   396,  3080,  3081,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3098,    -1,    -1,   280,  3102,    -1,
    3104,  3105,  3106,    -1,   177,  3109,    -1,    -1,  3112,  3113,
      -1,   294,    -1,    -1,    -1,    -1,  3120,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,
    2519,  2520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3145,  3146,  3147,  3148,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,  2574,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,  3210,   280,    -1,    -1,
      -1,    -1,  3216,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,  3229,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,  3256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    55,    -1,  3288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3320,  3321,  3322,    -1,
      -1,   504,    -1,   396,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,  3343,
    3344,  3345,  3346,  3347,  3348,  3349,    -1,  3351,  3352,    -1,
    3354,  3355,    -1,    -1,    -1,    -1,    -1,    -1,  2747,    -1,
    3364,    -1,  3366,    -1,    -1,    -1,    -1,    -1,    -1,  3373,
    3374,  3375,  3376,  3377,  3378,  3379,  3380,  3381,  3382,    -1,
      -1,    -1,    -1,  2772,    -1,     8,    -1,    -1,    11,    -1,
      -1,  3395,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,  3407,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    48,    -1,    -1,   201,    -1,
      -1,   504,    55,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   521,    -1,
      -1,   224,   225,    -1,    -1,    -1,  3460,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,  2858,
    2859,  2860,  2861,  3477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3487,    -1,    -1,    -1,    -1,    -1,  3493,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3501,  3502,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,  3513,
    3514,  3515,  3516,    -1,  3518,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
    2919,    -1,    -1,  3537,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3571,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3594,    -1,    -1,    -1,    -1,  3599,    -1,    -1,  3602,  3603,
      -1,   224,   225,  3607,    -1,  3609,  3610,    -1,    -1,  3613,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3637,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,  3056,    -1,    -1,
      -1,   294,    -1,    -1,  3678,  3679,  3680,    48,     8,  3683,
      -1,    11,  3686,  3687,    55,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,  3720,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    55,    -1,  3731,  3732,  3733,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,   521,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3150,  3151,  3152,  3153,  3154,  3155,  3156,    -1,    -1,
      -1,  3160,  3161,   396,    -1,    -1,  3165,    -1,    -1,  3168,
      -1,    -1,  3171,  3172,  3173,  3174,  3175,  3176,  3177,  3178,
    3179,  3180,  3181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,
      -1,    -1,    -1,    33,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    42,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   240,
      -1,   201,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,   280,
     240,    -1,    -1,    -1,    -1,    -1,   106,  3306,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3351,  3352,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3367,    -1,
    3369,    -1,  3371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,   396,    -1,    -1,    -1,
      -1,    -1,   262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3493,    -1,   296,    -1,    -1,    -1,
      -1,  3500,    -1,    -1,  3503,  3504,   306,    -1,    -1,    -1,
      -1,    -1,    -1,  3512,    -1,  3514,  3515,    -1,    -1,    -1,
    3519,    -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
     521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
     360,    -1,   362,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,
     390,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3600,  3601,    -1,    -1,  3604,   406,    -1,    -1,  3608,
      -1,    -1,  3611,  3612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,  3684,  3685,    40,    41,  3688,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,   521,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
     521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,   521,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    39,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,   521,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,   521,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,   511,
     512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
     511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,   520,
      -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,
      -1,   532,   533,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,    -1,
     520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,    -1,
      -1,    -1,   532,   533,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,   518,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,    -1,    -1,   532,   533,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,   511,   512,   513,    -1,    -1,    -1,    -1,
     518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,
      -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,
      -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,   526,
     527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,    -1,
     526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,    -1,    -1,    -1,    -1,    -1,   511,   512,   513,    -1,
      -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,    -1,
      -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,    -1,
      -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,   533,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,
     532,   533,     3,     4,     5,     6,     7,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
     181,    -1,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,   520,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,    -1,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   511,   512,
     513,    -1,    -1,    -1,    -1,   518,    -1,   520,    -1,    -1,
      -1,    -1,    -1,   526,   527,    -1,    -1,    -1,    -1,   532,
     533,     3,     4,     5,     6,     7,    -1,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   518,    -1,   520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     532,   533,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    42,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,   521,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,     3,   506,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    -1,    27,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      44,    45,    46,    -1,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,    -1,    -1,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,    -1,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,   473,
     474,   475,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
      -1,    -1,   506,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   511,   512,   513,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,    -1,     3,   506,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,   172,    -1,   174,   175,   176,
      -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,   318,   319,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,    -1,    -1,   506,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,   520,    15,    16,    -1,    -1,    19,    20,
      21,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,    -1,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,    -1,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,    -1,    -1,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,   318,   319,   320,
     321,   322,    -1,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,   435,   436,   437,    -1,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,   503,    -1,     3,    -1,   507,   508,   509,     8,
     511,   512,   513,   514,   515,   516,    15,    16,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,    -1,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,     8,    -1,    -1,    11,   177,    55,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,   201,    37,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,   177,    -1,
      55,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     240,    -1,   201,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,
     280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,
      -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
     277,    -1,    -1,   280,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   396,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    37,    -1,
      -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,    48,
       8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    37,
      -1,    80,    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      37,    -1,    80,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    37,    80,    -1,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,    48,     8,    -1,    -1,    11,   177,    -1,
      55,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    37,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,   177,
      -1,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,   240,    -1,   201,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,   196,
      -1,   280,   240,    -1,   201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,   196,   280,    -1,   240,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
      -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    37,
      -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      48,     8,    -1,    -1,    11,    -1,    -1,    55,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      37,    -1,    80,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    48,    -1,     8,    -1,    -1,    11,    -1,    55,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    37,    80,    -1,    -1,   521,    -1,    -1,    -1,
      -1,    -1,    -1,    48,     8,    -1,    -1,    11,    -1,    -1,
      55,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    37,    -1,    80,    -1,   521,    -1,    -1,
      -1,    -1,    -1,    -1,    48,     8,    -1,    -1,    11,   177,
      -1,    55,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   201,    37,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
     177,    -1,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,   240,    -1,   201,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,   196,   280,   240,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,   196,   280,    -1,   240,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   277,   196,    -1,   280,   240,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,   240,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,   396,   521,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   519,   396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,   519,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,    -1,    -1,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     513,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,    -1,   180,    -1,
      -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
     292,    -1,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,     4,     5,    -1,    -1,    -1,     9,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,    -1,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,    -1,   180,
      -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,    -1,    -1,   237,   238,   239,   240,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,   292,    -1,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,    -1,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,    -1,    -1,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,     4,     5,    -1,    -1,    -1,     9,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,    -1,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,    -1,
     180,    -1,    -1,    -1,   184,   185,    -1,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,    -1,    -1,   237,   238,   239,
     240,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,   292,    -1,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,    -1,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,    -1,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,   424,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,    -1,    -1,     8,    -1,    -1,    11,
      -1,   511,   512,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    48,     8,    -1,    -1,
      11,    -1,    -1,    55,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,     8,    -1,
      -1,    11,    -1,    -1,    55,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    80,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,
      80,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,   177,    55,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   196,    -1,    -1,    -1,    -1,   201,
      -1,    80,    -1,    -1,    -1,    -1,   167,    -1,    37,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   177,    -1,    -1,    48,
      -1,    -1,   224,   225,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   240,    -1,
     201,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   277,   196,    -1,   280,   240,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   294,    -1,    -1,   297,    -1,    -1,   177,    -1,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,   196,    -1,   280,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,   177,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   240,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    -1,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   396,   224,   225,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,   460,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,    -1,    -1,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,   504,    -1,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    37,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,   396,    48,     8,
      -1,    -1,    11,    -1,    -1,    55,    15,    16,    17,    18,
      19,    20,    21,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    37,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    37,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,   177,    -1,    48,
      -1,     8,    -1,    -1,    11,    -1,    55,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   196,    -1,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    80,    -1,   172,    -1,    -1,    -1,    -1,   177,    -1,
      -1,    48,    -1,    -1,   224,   225,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
     240,    -1,   201,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    80,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
     280,   240,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
      -1,    -1,    -1,    -1,   294,    55,    -1,   297,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   177,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,   277,    -1,
      80,   280,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,   201,    37,    -1,   294,    -1,    -1,   297,    -1,
     167,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
     177,    55,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,   240,    -1,    -1,   201,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,   280,    -1,   240,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,   396,    -1,    -1,
      -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
     297,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
     240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,   201,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,
       8,    -1,    -1,    11,   294,    -1,   240,    15,    16,    17,
      18,    19,    20,    21,    -1,   504,    -1,    -1,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    37,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,   396,
      48,    -1,    -1,   277,    -1,    -1,   280,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    80,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,   504,   396,    -1,   507,   508,
     509,    48,   511,   512,   513,   514,   515,   516,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    -1,    -1,   504,    -1,    -1,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,   396,     8,    -1,    -1,    11,    -1,    -1,   177,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    37,   201,    -1,    -1,   430,    -1,    -1,    -1,
      -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    -1,    -1,   504,    -1,   224,   225,    -1,    -1,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    80,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   196,
      -1,    -1,    -1,    16,   201,    -1,    19,    20,    21,   277,
     504,    -1,   280,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    37,    -1,   294,   224,   225,   297,
      -1,    -1,    -1,    -1,    -1,    48,    -1,     8,    -1,    -1,
      11,    -1,    55,   240,    -1,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    80,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    48,    -1,    -1,
     277,    -1,    -1,   280,    55,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,   201,   294,    -1,    -1,
     297,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    80,
      -1,    -1,    16,    -1,    -1,    19,    20,    21,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    37,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   177,    11,    -1,    -1,    -1,    -1,
      16,    -1,   277,    -1,    -1,   280,    80,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,   201,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    48,    -1,    -1,    -1,   177,    -1,    -1,    55,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,   240,    -1,    -1,
     201,    -1,    -1,    -1,    80,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,   280,    -1,   240,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
       8,   396,   196,    11,    -1,    -1,    -1,   201,    16,    -1,
     146,    19,    20,    21,    -1,    -1,   277,   504,    -1,   280,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
     224,   225,    -1,   294,    -1,    -1,   297,    -1,    -1,    -1,
      48,   177,    -1,    -1,    -1,    -1,   240,    55,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
     196,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,    48,    -1,   396,    -1,    -1,    -1,    -1,    55,    -1,
     294,    -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,   504,
      -1,    -1,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   146,
      -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   504,   396,    -1,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,   224,   225,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,   504,   201,    -1,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,
      -1,    -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   396,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,     5,    -1,    -1,    -1,   504,    -1,    -1,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,   515,   516,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,    -1,    -1,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    -1,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,    -1,    -1,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,    -1,   398,   399,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    -1,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,    -1,    -1,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,    -1,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,   292,    -1,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    35,
      36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,
      46,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,   238,   239,   240,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,   424,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    -1,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,   169,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,   169,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    35,    36,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,     4,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
     138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,    -1,   180,   181,    -1,    -1,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,    -1,   212,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,
     228,   229,   230,   231,   232,   233,   234,    -1,    -1,   237,
      -1,   239,    -1,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,    -1,   283,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,   327,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,    -1,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,    -1,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,    -1,   471,   472,   473,   474,   475,   476,   477,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,    46,
      -1,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,    -1,   212,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,   226,
      -1,   228,   229,   230,   231,   232,   233,   234,    -1,    -1,
     237,    -1,   239,    -1,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,    -1,   283,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,   326,
     327,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,    -1,   436,
     437,   438,   439,   440,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,   229,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,   472,   473,   474,   475,
     476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      45,    46,    -1,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,   138,   139,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,    -1,   212,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,    -1,
      -1,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
      -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,    -1,   283,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
     325,   326,   327,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
      -1,   436,   437,   438,   439,   440,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,    -1,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    -1,
      -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    -1,    61,    62,    63,
      64,    65,    66,    -1,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,   141,   142,   143,
      -1,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,    -1,   180,   181,    -1,    -1,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,    -1,   210,    -1,   212,   213,
     214,   215,   216,   217,   218,   219,    -1,   221,    -1,   223,
      -1,    -1,   226,    -1,   228,   229,   230,   231,   232,   233,
     234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,    -1,   283,
     284,   285,   286,   287,   288,    -1,   290,   291,    -1,    -1,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
      -1,   325,   326,   327,   328,   329,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,    -1,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,    -1,    -1,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    42,
      -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,   138,   139,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,    -1,   180,   181,    -1,
      -1,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,    -1,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,    -1,    -1,   226,    -1,   228,   229,   230,   231,   232,
     233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,    -1,   325,   326,   327,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,    -1,   436,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
      -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,   181,
      -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,    -1,
     212,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,   231,
     232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,    -1,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
      -1,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,    -1,   325,   326,   327,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,    -1,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,    -1,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,    -1,   471,
     472,   473,   474,   475,   476,   477,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    -1,
      61,    62,    63,    64,    65,    66,    -1,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,   138,   139,    -1,
     141,   142,   143,    -1,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,   180,
     181,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,    -1,   210,
      -1,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
     221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,   230,
     231,   232,   233,   234,    -1,    -1,   237,    -1,   239,    -1,
      -1,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,    -1,   283,   284,   285,   286,   287,   288,    -1,   290,
     291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,    -1,   436,   437,   438,   439,   440,
      -1,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
      -1,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,    -1,   480,
      -1,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    66,    -1,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,   138,   139,
      -1,   141,   142,   143,    -1,   145,   146,   147,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,    -1,
     180,   181,    -1,    -1,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,    -1,
     210,    -1,   212,   213,   214,   215,   216,   217,   218,   219,
      -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,   229,
     230,   231,   232,   233,   234,    -1,    -1,   237,    -1,   239,
      -1,    -1,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,    -1,   283,   284,   285,   286,   287,   288,    -1,
     290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,    -1,   436,   437,   438,   439,
     440,    -1,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,    -1,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
      -1,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
     480,    -1,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    45,    46,    -1,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,   138,
     139,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
      -1,   180,   181,    -1,    -1,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,    -1,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,    -1,    -1,   226,    -1,   228,
     229,   230,   231,   232,   233,   234,    -1,    -1,   237,    -1,
     239,    -1,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,    -1,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,    -1,   325,   326,   327,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,    -1,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,
      28,    29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    44,    45,    46,    -1,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    66,    -1,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    -1,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,    -1,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,   147,
      -1,   149,   150,   151,   152,    -1,   154,   155,   156,   157,
     158,    -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,
      -1,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,    -1,   210,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,    -1,    -1,   237,
     238,   239,   240,    -1,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,    -1,    -1,
     278,   279,   280,   281,    -1,    -1,   284,   285,   286,   287,
     288,    -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,
      -1,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,    -1,
      -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,
     328,   329,   330,    -1,   332,   333,   334,   335,   336,    -1,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,    -1,
     398,   399,   400,    -1,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
     418,    -1,   420,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,
      -1,   439,    -1,    -1,   442,   443,   444,   445,   446,   447,
     448,   449,   450,    -1,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,    -1,   467,
      -1,   469,   470,   471,    -1,   473,   474,   475,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,   484,   485,   486,   487,
     488,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    -1,    27,    28,    29,    30,    -1,
      32,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    44,    45,    46,    -1,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    66,    -1,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    -1,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,    -1,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,    -1,    -1,   141,
     142,   143,    -1,   145,   146,   147,    -1,   149,   150,   151,
     152,    -1,   154,   155,   156,   157,   158,    -1,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,    -1,   177,   178,    -1,   180,    -1,
      -1,    -1,    -1,    -1,    -1,   187,    -1,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,    -1,   210,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,    -1,    -1,   237,   238,   239,   240,    -1,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,    -1,    -1,   278,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,   288,    -1,   290,   291,
      -1,    -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,
     322,    -1,   324,   325,   326,    -1,   328,   329,   330,    -1,
     332,   333,   334,   335,   336,    -1,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,    -1,   398,   399,   400,    -1,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,   418,    -1,   420,   421,
      -1,   423,   424,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,    -1,    -1,   436,   437,    -1,   439,    -1,    -1,
     442,   443,   444,   445,   446,   447,   448,   449,   450,    -1,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,    -1,   467,    -1,   469,   470,   471,
      -1,   473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,   484,   485,   486,   487,   488,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,   503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      -1,    27,    28,    29,    30,    -1,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      46,    -1,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      66,    -1,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
      -1,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,
     146,   147,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,    -1,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,    -1,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,    -1,   210,    -1,   212,   213,   214,   215,
     216,   217,   218,   219,    -1,   221,    -1,   223,    -1,    -1,
     226,    -1,   228,    -1,   230,   231,   232,   233,   234,    -1,
      -1,   237,    -1,   239,    -1,    -1,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,   287,   288,    -1,   290,   291,    -1,    -1,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,   325,
     326,   327,   328,   329,   330,    -1,   332,   333,   334,   335,
     336,    -1,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,    -1,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,    -1,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,    -1,   471,    -1,   473,   474,   475,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    -1,    27,    28,    29,    30,    -1,    32,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,    44,
      45,    46,    -1,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    66,    -1,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,    -1,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,    -1,    -1,   141,   142,   143,    -1,
     145,   146,   147,    -1,   149,   150,   151,   152,    -1,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,    -1,   177,   178,    -1,   180,    -1,    -1,    -1,    -1,
      -1,    -1,   187,    -1,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,    -1,   210,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,    -1,   237,   238,   239,   240,    -1,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,    -1,    -1,   278,   279,   280,   281,    -1,    -1,   284,
     285,   286,   287,   288,    -1,   290,   291,    -1,    -1,   294,
     295,   296,    -1,    -1,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,    -1,    -1,    -1,    -1,   321,   322,    -1,   324,
     325,   326,    -1,   328,   329,   330,    -1,   332,   333,   334,
     335,   336,    -1,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,    -1,   398,   399,   400,    -1,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,   418,    -1,   420,   421,    -1,   423,   424,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,    -1,
      -1,   436,   437,    -1,   439,    -1,    -1,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,    -1,   467,    -1,   469,   470,   471,    -1,   473,   474,
     475,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,   484,
     485,   486,   487,   488,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,   503,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    -1,    27,    28,
      29,    30,    -1,    32,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    44,    45,    46,    -1,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    66,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      -1,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,    -1,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,   151,   152,    -1,   154,   155,   156,   157,   158,
      -1,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,    -1,   177,   178,
      -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
      -1,   210,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,    -1,    -1,   237,   238,
     239,   240,    -1,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,    -1,    -1,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
      -1,   290,   291,    -1,    -1,   294,   295,   296,    -1,    -1,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,   321,   322,    -1,   324,   325,   326,    -1,   328,
     329,   330,    -1,   332,   333,   334,   335,   336,    -1,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,   398,
     399,   400,    -1,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,   418,
      -1,   420,   421,    -1,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,    -1,    -1,   436,   437,    -1,
     439,    -1,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,    -1,   467,    -1,
     469,   470,   471,    -1,   473,   474,   475,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,   484,   485,   486,   487,   488,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,   503,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    -1,    32,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    44,    45,    46,    -1,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    66,    -1,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,    -1,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,   146,   147,    -1,   149,   150,   151,   152,
      -1,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
      -1,    -1,    -1,    -1,   187,    -1,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,    -1,   210,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,    -1,    -1,   237,   238,   239,   240,    -1,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,    -1,    -1,   278,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,    -1,   290,   291,    -1,
      -1,   294,   295,   296,    -1,    -1,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,    -1,    -1,    -1,    -1,   321,   322,
      -1,   324,   325,   326,    -1,   328,   329,   330,    -1,   332,
     333,   334,   335,   336,    -1,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,    -1,   395,   396,    -1,   398,   399,   400,    -1,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,   418,    -1,   420,   421,    -1,
     423,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,    -1,    -1,   436,   437,    -1,   439,    -1,    -1,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,    -1,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,    -1,   467,    -1,   469,   470,   471,    -1,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,   485,   486,   487,   488,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
     503,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    -1,
      27,    28,    29,    30,    -1,    32,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
      -1,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    66,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,    -1,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,   151,   152,    -1,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,    -1,
     177,   178,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,
     187,    -1,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,    -1,   210,   211,    -1,   213,   214,   215,   216,
     217,   218,   219,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,   230,   231,   232,   233,   234,    -1,    -1,
     237,   238,   239,   240,    -1,   242,   243,   244,   245,   246,
     247,   248,   249,    -1,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,    -1,
      -1,   278,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,    -1,   290,   291,    -1,    -1,   294,   295,   296,
      -1,    -1,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,   321,   322,    -1,   324,   325,   326,
      -1,   328,   329,   330,    -1,   332,   333,   334,   335,   336,
      -1,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,   368,   369,   370,    -1,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,    -1,   392,   393,    -1,   395,   396,
      -1,   398,   399,   400,    -1,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
      -1,   418,    -1,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,    -1,    -1,   436,
     437,    -1,   439,    -1,    -1,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,    -1,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,    -1,   469,   470,   471,    -1,   473,   474,   475,   476,
      -1,    22,    -1,   480,    -1,    -1,   483,   484,   485,   486,
     487,   488,    33,    -1,    35,    36,    -1,    -1,    22,    -1,
      -1,    -1,    -1,   500,   501,   502,   503,    -1,    -1,    33,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    63,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    -1,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   125,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     144,    -1,    -1,    -1,    -1,    -1,    -1,   168,   152,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,    -1,
      -1,    -1,    -1,    -1,   325,    -1,    -1,   328,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,    -1,    -1,    -1,    -1,
      -1,   325,    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   360,    -1,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   369,    -1,    -1,    -1,   390,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,    -1,   406,   390,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,   418,    -1,    -1,
      -1,   422,   406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,   422,    -1,
      -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,    -1,    -1,   442,    -1,
     461,    -1,    -1,    -1,    -1,   466,    -1,    -1,    -1,   470,
      -1,   455,    -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   482,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,
      -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    33,    35,    36,    49,    54,    63,    75,    86,
      98,   100,   111,   125,   127,   136,   144,   152,   154,   155,
     168,   172,   200,   216,   243,   317,   318,   319,   325,   328,
     360,   369,   383,   390,   395,   406,   418,   422,   442,   455,
     458,   461,   466,   482,   506,   520,   535,   536,   537,   538,
     539,   546,   557,   558,   559,   562,   563,   565,   582,   630,
     642,   644,   647,   650,   652,   655,   656,   660,   667,   669,
     676,   680,   681,   682,   689,   693,   709,   712,   715,   733,
     770,   771,   774,   776,   777,   778,   779,   781,   783,   784,
     788,   840,   841,  1005,  1007,  1008,  1009,  1014,  1017,  1023,
    1024,  1027,   436,   485,  1006,   205,   376,   385,   422,   473,
     108,   560,  1006,     3,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    32,    33,    34,    40,    44,    45,    46,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    61,    62,    63,    64,    65,    66,    69,    70,
      71,    72,    73,    75,    76,    77,    78,    79,    81,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    94,
      95,    96,    97,    98,    99,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   116,
     118,   119,   120,   121,   122,   123,   125,   126,   127,   128,
     129,   130,   133,   134,   135,   136,   137,   138,   139,   141,
     142,   143,   145,   146,   147,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   161,   163,   164,   165,
     166,   168,   170,   171,   173,   174,   175,   176,   177,   178,
     180,   181,   184,   185,   186,   187,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   202,   203,
     204,   205,   206,   207,   208,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   221,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   237,   238,
     239,   240,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   278,   279,   280,
     281,   283,   284,   285,   286,   287,   288,   290,   291,   294,
     295,   296,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     332,   333,   334,   335,   336,   337,   338,   339,   341,   342,
     343,   344,   345,   346,   347,   348,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   420,   421,   423,   424,   425,   426,   427,   428,   429,
     431,   432,   434,   436,   437,   438,   439,   440,   442,   443,
     444,   445,   446,   447,   448,   449,   452,   453,   454,   456,
     457,   458,   459,   461,   462,   463,   464,   465,   466,   467,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   480,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   633,   634,   635,   640,   910,   989,   993,   996,     3,
     176,   250,   415,   564,   633,   993,  1006,    57,   520,   577,
       5,   108,   178,   244,   297,   338,   376,   426,   428,   445,
     451,   454,   628,   643,   688,   992,     5,    31,   328,   987,
     993,   994,   108,   560,    24,    81,    97,   108,   147,   157,
     169,   174,   205,   249,   253,   322,   338,   339,   373,   376,
     385,   388,   408,   422,   429,   439,   445,   473,   661,   662,
     665,  1006,   987,   100,   136,   470,   520,   538,   539,   546,
     562,   563,   565,   582,   630,   644,   647,   650,   652,   655,
     656,   660,   667,   672,   676,   682,   689,   709,   770,   771,
     774,   776,  1005,  1007,  1009,  1014,  1017,  1023,  1027,   108,
      75,   216,    68,    79,    81,   159,   182,   235,   283,   293,
     304,   323,   372,   417,   438,   440,   444,   466,   520,   777,
     841,   843,   845,   855,   862,   863,   910,   912,   913,   983,
     993,   994,   108,   710,   992,   993,   710,   993,   987,    31,
     431,   436,   993,  1015,  1016,  1025,  1006,    31,   131,   796,
     797,   178,   244,   376,   389,   431,  1018,  1019,  1025,  1006,
     520,   776,   788,   993,  1026,   862,   993,   422,   793,   983,
     173,   520,  1011,   520,   347,   789,   790,   987,   789,     3,
      55,    56,    58,    59,    71,    72,    79,   112,   113,   153,
     159,   165,   176,   184,   185,   212,   218,   219,   221,   250,
     269,   271,   276,   283,   285,   300,   304,   323,   327,   344,
     371,   391,   399,   415,   417,   431,   432,   438,   440,   444,
     466,   467,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   633,   641,   711,   777,   778,     0,   523,
     470,   670,   120,   215,   457,   148,   220,   298,   450,   799,
     800,   845,   845,   777,   779,   781,   524,    31,   431,   436,
     776,  1026,   194,   983,   987,   194,   983,   194,   862,   194,
     983,   992,   520,   518,   522,   964,   966,   776,   983,   194,
     983,   426,   428,   426,   428,   358,   181,   194,   983,   983,
     174,   249,   347,   385,   422,   473,   645,   108,   205,    31,
     987,   194,     3,   255,   439,   107,   422,   422,   473,   181,
     379,     3,    38,    44,    51,    56,    57,    58,    59,    71,
      72,    81,    83,    89,   101,   112,   113,   135,   165,   171,
     173,   177,   194,   196,   211,   218,   219,   221,   224,   225,
     227,   238,   240,   250,   269,   270,   271,   280,   285,   301,
     303,   324,   344,   367,   371,   384,   391,   396,   399,   415,
     424,   431,   432,   444,   450,   467,   470,   633,   636,   666,
     873,   875,   877,   879,   881,   883,   885,   886,   887,   889,
     890,   891,   893,   894,   997,   194,   663,   993,   998,   194,
     984,   987,   194,   987,   520,   668,   297,   672,     3,    38,
      44,    51,    55,    56,    57,    58,    59,    71,    72,    79,
      81,    83,    89,   101,   112,   113,   153,   159,   165,   171,
     173,   176,   177,   184,   185,   196,   211,   212,   218,   219,
     221,   224,   225,   227,   238,   240,   250,   269,   270,   271,
     276,   280,   283,   285,   300,   301,   303,   304,   323,   324,
     327,   344,   367,   371,   384,   391,   396,   399,   415,   417,
     424,   431,   432,   438,   440,   444,   466,   467,   470,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     633,   637,   673,   675,   676,   678,   679,   670,   992,   993,
     564,   710,   520,   520,   167,   520,   520,   733,   777,   863,
     520,   520,   983,   520,   520,   172,   520,   520,   520,   520,
     777,   841,   845,   855,    42,   856,   857,   993,   856,   383,
     524,   780,    38,    44,   101,   173,   211,   227,   238,   270,
     317,   324,   367,   384,   455,   859,   857,    42,   856,   858,
     993,   506,   867,   513,   966,   992,   509,   520,   520,   772,
     503,   226,   522,   292,     4,     6,     7,     8,     9,    10,
      41,    56,    58,    59,    67,    71,    72,    83,   112,   113,
     115,   153,   160,   165,   184,   185,   218,   219,   221,   269,
     271,   277,   282,   285,   294,   344,   371,   399,   431,   432,
     441,   467,   504,   511,   512,   513,   518,   520,   526,   527,
     532,   533,   777,   830,   878,   881,   884,   885,   886,   888,
     889,   890,   893,   894,   905,   907,   908,   909,   910,   911,
     913,   914,   928,   929,   936,   958,   963,   973,   974,   975,
     989,   990,   991,   992,   993,   972,   974,  1018,  1018,   992,
    1018,   503,   172,   433,   509,   522,   966,   657,   862,     3,
     171,   173,   470,   676,  1010,  1012,   171,  1013,   905,   942,
     943,   789,   524,   520,  1000,   252,   521,   521,   537,   983,
     172,   297,   696,   657,    31,   131,   794,   794,    61,   794,
     162,   167,   241,   289,   805,   807,   808,   833,   835,   836,
     837,   183,   292,   460,   292,   799,   800,   520,   503,   226,
     153,    27,    33,   136,   296,   356,   360,   390,   463,   551,
     554,   555,   356,   153,    42,    62,   106,   204,   254,   262,
     274,   306,   356,   362,   385,   390,   406,   540,   543,   554,
     153,   356,   390,   554,   153,   356,   390,   554,    42,   561,
       3,    31,    38,    44,    51,    57,    81,    83,    89,   101,
     131,   171,   173,   176,   177,   196,   211,   224,   225,   227,
     238,   240,   250,   270,   280,   301,   303,   324,   367,   384,
     396,   415,   424,   444,   468,   470,   521,   633,   638,   905,
     945,   946,   995,  1001,   905,   965,     3,    31,    35,    36,
      37,    39,    41,    42,    43,    47,    60,    67,    68,    74,
      80,    82,    93,   100,   115,   117,   124,   131,   132,   140,
     144,   148,   160,   162,   167,   169,   172,   179,   182,   183,
     188,   201,   209,   220,   222,   235,   236,   241,   277,   282,
     289,   292,   293,   297,   298,   317,   318,   319,   320,   331,
     340,   349,   364,   383,   401,   419,   422,   430,   433,   435,
     441,   450,   451,   455,   460,   466,   468,   478,   479,   481,
     482,   633,   637,   639,   988,  1002,   964,   521,   520,   617,
     277,   172,   108,   376,   628,   983,   277,   648,    42,   473,
     194,   983,   194,   632,   983,   194,   983,   194,   983,   983,
      89,   685,   153,   486,   983,    90,   128,   309,   427,   469,
     892,   892,   892,   520,   880,   880,   327,   520,   882,   153,
     520,    71,    72,   892,   880,   877,   484,   506,   520,   895,
     520,   895,   520,    65,   363,   524,   664,   520,    41,   876,
     520,   109,   110,   191,   192,   256,   257,   258,   259,   260,
     261,   264,   265,   380,   381,   500,   501,   520,   896,   897,
     898,   899,   900,   901,   902,   903,   904,   880,   153,   524,
     664,   522,   999,   153,   524,   664,   153,   292,   943,   358,
     521,   524,     4,   160,   292,   441,   511,   512,   542,   545,
     671,   673,   674,   677,   991,   992,   672,   520,   572,   576,
     433,   905,   943,   520,     3,   896,   897,   898,   899,   900,
     901,   902,   903,   948,   949,   992,   466,   857,   858,   905,
     983,   905,   950,   511,   512,   906,   907,   929,   936,   952,
     993,   520,   905,   942,   953,   905,    60,   172,   236,   435,
     905,   943,   956,   905,   521,   994,   424,   813,   814,   520,
     814,   796,   797,   845,   222,   791,    38,   227,   384,   859,
     227,   301,   860,   845,   860,   227,   859,   520,   227,   860,
     149,   202,   847,   227,   814,   520,   994,   814,   520,   299,
     542,   677,  1020,  1022,   945,   875,   947,    42,   239,   993,
     520,   518,   777,   905,   962,   520,   777,   905,   520,   520,
     905,   905,   905,   149,   976,   977,   905,   943,   944,   777,
     905,   942,   930,   931,   932,   994,     9,     3,  1004,   966,
     520,   992,   520,   991,   992,     3,     8,    11,    15,    16,
      17,    18,    19,    20,    21,    37,    42,    48,    55,    80,
     177,   196,   201,   224,   225,   240,   277,   280,   294,   297,
     396,   504,   507,   508,   509,   511,   512,   513,   514,   515,
     516,   934,   935,   936,   938,   970,   483,   915,   303,   905,
     524,   791,   520,   992,   967,   522,   966,   791,     3,   115,
     244,   542,   894,   992,  1021,   104,   115,  1022,   115,  1022,
     993,    42,   993,   521,   524,   670,   524,   521,   790,   984,
     985,    42,   711,   739,   743,   744,  1000,   657,   195,   358,
     222,   390,   779,   779,    31,   801,   802,   905,    61,   779,
     795,   164,   273,   821,   230,   274,   343,   393,   457,     4,
       9,    31,   816,   905,   511,   512,   817,   818,   905,   907,
     833,   834,   808,   807,   805,   806,   167,   836,   287,   838,
      61,   785,   786,   787,   848,   906,   974,   974,   805,   833,
     943,   239,   983,    74,    82,    93,   169,   194,   331,   451,
     599,   609,   624,   993,    82,    93,   775,    93,   775,   520,
     433,   520,   597,   248,   454,   597,    93,   524,   433,   983,
     877,   542,    61,   544,   542,   542,   106,   254,   262,    61,
     433,   482,   506,   541,   267,   376,   541,   543,   862,    93,
     433,   775,   376,   983,   433,   376,   993,   572,   945,   945,
     946,   524,   799,   800,    13,    14,   519,   531,   433,   616,
     621,   993,   482,   575,   153,   992,   983,   983,   347,   385,
     422,   473,   645,   275,   472,   713,   153,   100,   582,   649,
     650,   682,  1027,   145,   875,   983,   277,   540,   651,   277,
      42,   520,   617,   277,   617,   277,   520,   646,   194,   611,
     686,   993,     3,   664,   520,   944,   991,   666,   947,   892,
     892,    41,   876,   431,   431,   991,   991,   872,   993,   875,
     872,   518,   518,   991,   991,   433,   433,   433,   433,   663,
     998,   988,   522,   984,   987,   987,   998,   521,   672,   678,
       4,   991,     4,   991,   574,   581,  1002,    57,   102,   121,
     142,   146,   168,   171,   189,   282,   290,   311,   341,   578,
     992,    42,   521,   905,   521,   172,   524,   521,   320,   951,
     521,   906,   906,    11,    15,    16,    19,    20,    21,   201,
     224,   294,   507,   508,   509,   511,   512,   513,   514,   515,
     516,   936,   906,   521,   864,   865,   912,   167,   172,   954,
     955,   524,   521,    42,   956,   943,   956,   956,   172,   521,
      42,   856,   520,     4,     9,   809,   811,   812,   993,   985,
     974,   972,   178,   244,   422,   426,   428,   454,   792,   983,
     479,   868,   845,   227,   845,   292,   460,   861,   845,   227,
     974,   845,   284,   284,   520,   845,   869,   870,   994,   520,
     869,   994,   524,   521,   524,   521,   524,   656,   689,   773,
     776,  1007,   943,   944,   478,   959,   960,   905,     8,    15,
      16,    19,    20,    21,   507,   508,   509,   511,   512,   513,
     514,   515,   516,   934,   939,   993,   521,   943,   520,   993,
     358,   981,   167,   519,   521,   524,   524,   528,   531,   943,
     905,   904,   904,   875,   905,   905,   905,   905,   905,   905,
     905,   905,     5,  1002,  1003,   431,    47,   419,   971,   998,
     905,   905,   520,   777,   957,   131,   160,   277,   282,   287,
     441,   452,   905,   282,   520,   905,   433,    55,   177,   196,
     201,   240,   396,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,    31,    39,   401,   933,   518,   522,   969,
     183,   163,   916,   371,   520,   929,   975,   172,   842,   945,
     964,   513,   842,   520,   992,   993,   983,  1010,   557,   983,
     905,   524,   521,   520,   509,    31,    39,   394,   742,   229,
     524,   736,   460,   659,   691,   983,   520,   695,   705,   706,
     708,   993,    43,   124,   803,   524,   460,   803,   267,   779,
     371,   372,   511,   512,   818,   820,   907,   393,   230,   293,
     316,   316,   524,   515,     4,   819,   991,   819,   371,   372,
     820,   982,   983,   281,   398,   839,   520,   985,   986,   524,
     183,   460,   201,   183,   222,   834,   806,   521,   356,   554,
     520,   194,   609,   987,   230,   277,   230,   460,   520,   602,
     874,   875,   987,   993,   194,   987,   194,   993,    27,   136,
     390,   550,   553,   593,   607,  1002,   987,   601,   620,  1002,
     987,   551,   987,   356,   390,   540,   554,   542,   998,   987,
     542,   998,   987,   542,   356,   390,   554,   987,   987,   987,
     987,   356,   390,   554,   987,   987,   799,   799,   799,   468,
     946,   195,   361,   798,   905,   905,   905,   965,   336,   571,
     521,   524,   290,   172,   433,   566,   983,   172,   648,   473,
     983,   632,   983,   983,   983,   423,   983,   297,   628,   520,
     777,   520,   153,   153,   152,   776,   240,   599,   609,   612,
     615,   625,   627,   993,   482,   484,   604,   153,   482,   687,
     153,   521,   945,    42,   277,   292,   943,   521,   521,   664,
     521,   518,   503,   503,   521,   521,   521,   524,   875,   521,
     991,   519,   991,   521,   521,   897,   899,   900,   901,   900,
     901,   901,   664,   988,   664,   292,   664,   521,   524,   513,
     520,   542,   573,   677,    42,   570,   992,   570,   277,   282,
     341,   570,    61,   570,   572,   875,   521,   905,   905,   905,
     954,   875,   906,   906,   906,   906,   906,   906,   131,   277,
     287,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   521,   524,    42,   866,   905,   905,   955,   954,   875,
     521,   521,   521,   943,   875,   985,   316,   515,   316,   372,
     515,   520,   520,   521,   791,   426,   428,   426,   428,   983,
     793,   793,   793,   905,   183,   822,   861,   845,   905,   520,
     845,   167,   520,   852,   994,   861,   521,   524,   875,   869,
     521,  1020,   875,   521,   519,   905,   140,   960,   961,   521,
     521,   522,   521,   985,   520,   905,   978,   993,   905,   930,
     905,   521,   521,   503,   906,   906,   146,   943,   172,   131,
     160,   282,   287,   441,   452,   520,   146,   939,   905,   419,
     971,   905,   957,   905,   433,   520,   777,   905,   965,   988,
     520,   520,   156,   917,   843,   844,   868,   799,   977,   868,
     991,   904,  1000,  1000,   773,    26,   314,   315,   394,   397,
     434,   477,   737,   740,     9,   394,   741,     9,    17,   507,
     512,   518,   520,   752,   753,   754,   755,   762,   763,   764,
     767,   768,   742,   744,   479,   732,   844,   479,   658,   115,
     305,   520,   690,   776,    42,   701,   708,   524,   842,   509,
     967,   505,   804,   802,   294,   934,   937,   804,     4,   991,
     820,   293,   457,   817,   524,   247,   985,   785,    61,   974,
     520,   994,    61,   267,   433,   905,   277,   624,   520,   153,
     520,   602,   205,   621,   622,   583,    42,   176,   592,   618,
     583,    27,   136,   360,   362,   390,   547,   548,   549,   555,
     556,   153,   664,   153,   664,   593,   607,   593,   521,   524,
     586,   992,   521,   524,   509,   522,   433,   376,    93,   433,
     775,   376,   433,   433,   433,   376,   798,   798,   798,   946,
     284,   284,   521,   519,   409,   410,   580,   992,   616,   571,
     172,   992,   983,   651,    42,   520,   617,   646,   520,   648,
     358,   422,   653,   654,   992,   621,   983,   632,   983,   987,
     482,   631,   983,   521,   524,   290,   597,   290,   292,   596,
     983,   597,    42,   983,   521,   422,   905,   153,   983,   521,
     876,   991,   895,   895,   876,   993,   876,   519,   519,   998,
     574,   568,   579,   677,   992,   992,   282,   621,   513,   621,
     992,   513,   621,   992,   521,   521,   955,   172,   131,   287,
     520,   867,   864,   520,   521,   521,   521,   993,   809,   868,
     793,   793,   793,   793,   983,   983,   983,    61,   188,   831,
     861,   985,   520,   849,   850,   851,   908,   989,   985,   167,
     870,    80,   871,   521,   430,   905,   144,   939,   521,   905,
     978,   979,   980,    42,   201,   521,   904,   905,    37,    37,
     905,   521,   905,   172,   520,   947,   905,   521,   146,   906,
     906,   146,   146,   905,   905,   519,   531,   520,   968,   800,
     479,   905,   302,   921,   524,   822,   798,   981,   822,   521,
     521,   737,   740,   737,   737,   737,   740,   740,   740,   512,
     762,   508,   518,   739,   751,   711,   765,   766,   754,   754,
     525,   745,   766,   511,   513,   526,   527,   747,   277,   504,
     511,   512,   769,   907,   929,    83,   905,   364,   699,   466,
     421,   459,   700,   694,   704,   993,   292,   697,   993,   521,
     524,   695,   658,   905,   164,   234,   520,   804,   293,   983,
     521,   986,   183,   974,   986,   987,   987,   521,   153,   622,
     609,   622,   583,   611,   524,   521,   117,   209,   274,   277,
     608,   520,    34,    61,   629,   618,    74,    80,    93,   115,
     117,   209,   277,   282,   331,   349,   451,   460,   588,   589,
     603,   176,   115,   193,   277,   597,   541,   107,   115,   176,
     277,   408,   411,   543,   597,   390,   549,   445,   987,   993,
     553,   620,     3,    38,    44,    51,    57,    81,    83,    89,
     101,   171,   173,   176,   177,   196,   211,   224,   225,   227,
     238,   240,   250,   270,   276,   280,   294,   301,   303,   324,
     367,   384,   391,   396,   415,   424,   444,   450,   470,   511,
     512,   542,   584,   623,   633,   639,   875,   937,   992,   995,
    1002,   987,   987,   987,   987,   987,   987,   987,   987,   987,
     987,   521,   521,   521,   799,   541,   580,   992,   520,   776,
     615,   687,    42,   722,   727,   983,   628,   194,   983,   521,
     524,   521,   651,    42,   520,   668,   107,   274,   606,   604,
     612,    86,   617,   776,   646,   776,   611,   460,   684,   519,
     875,   664,   521,   524,   621,   906,   172,   520,   947,   869,
     521,   524,   521,   822,   983,   983,   983,   983,    31,   103,
     184,   370,   520,   823,   824,   825,   826,   827,   828,   829,
     905,   905,   481,   918,   521,   907,   940,   941,   201,   183,
     846,   850,   520,   521,   852,   853,   854,   998,   905,   524,
     521,   993,   905,   907,   905,   905,   905,   947,   521,   905,
      37,    37,   905,   905,   146,   521,   965,   521,   945,   521,
     905,   521,   520,   922,   993,   831,   521,   831,   992,   183,
     186,   738,   518,   740,   519,   224,   531,   760,   761,   521,
     511,   754,   519,     9,   746,   769,   769,   769,   769,    11,
      16,    17,    18,    19,    20,    21,    37,    48,    55,    80,
     177,   196,   201,   224,   225,   240,   277,   280,   297,   396,
     504,   507,   508,   509,   511,   512,   513,   514,   515,   516,
     936,   303,   520,   973,   465,   521,   524,   967,    91,   699,
     509,   708,   699,   939,    61,   521,   465,   466,   782,   583,
     609,   521,   521,   482,   614,   118,   197,   207,   117,   462,
     905,   115,    42,   520,   998,   987,   906,   118,   197,   117,
     282,   230,   983,   614,    88,   629,   194,   282,   542,   905,
     629,   282,   511,   512,   545,   993,   875,   664,   664,   250,
     415,   995,   999,   509,   433,   433,   798,   572,   460,   567,
     569,   621,   631,   521,    42,   422,   905,   524,   716,   274,
     337,   731,    42,   422,   277,   520,   992,   687,   152,   776,
     615,   631,   107,   150,   203,   596,   120,   136,   330,   687,
     482,  1028,    42,   292,   683,   993,   520,   579,   906,   947,
     521,   521,     9,   357,   815,   831,   520,   392,   520,   521,
     524,   919,   920,   993,   340,   832,   524,   521,   520,   994,
      61,   521,   945,   201,   521,   853,   978,   519,   194,   521,
     905,   905,   905,   519,   521,   521,   923,   993,   918,   992,
     918,   755,   747,   732,   520,   530,   711,   759,   525,   512,
     762,   524,   875,   769,   769,   769,   769,   769,   769,   769,
     431,   419,   971,   998,   769,   769,   957,   131,   160,   277,
     282,   287,   441,   452,   769,   282,   769,   433,    55,   196,
     201,   240,   396,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   929,   734,   735,   975,   524,   776,   305,
     776,   694,   292,   520,   692,   905,   521,   986,   986,   349,
     614,   520,   605,   583,   521,   193,   520,   905,   277,   589,
     614,   617,   987,    42,   153,   871,   999,   515,   584,   987,
     987,   521,   541,   122,   521,   604,   776,   776,   722,   521,
     337,    40,   520,   725,   730,   231,   711,   983,   153,    42,
     987,   631,   521,    31,    85,    94,   116,   193,   206,   408,
     411,   600,   600,   372,   372,    42,    66,    74,   244,   422,
     905,   983,   520,   698,   707,   912,   993,   521,   521,   520,
     918,   943,   520,   943,   825,   524,    42,   905,   460,   810,
     907,   974,   985,   857,   799,   520,   857,   905,   311,   924,
     832,   832,   732,    99,   750,   758,   759,   759,   747,   746,
     503,   906,   906,   146,   172,   131,   160,   282,   287,   441,
     452,   520,   146,   769,   419,   971,   769,   957,   769,   433,
     521,   524,   700,    93,   707,   132,   983,   583,   610,   613,
    1002,   412,   475,   590,   591,   520,   585,   905,   521,   252,
     626,   193,   460,   552,   515,   445,   572,   992,   687,   596,
    1028,   716,   138,   353,   714,   711,   726,   728,    31,   711,
     520,   983,   776,   668,   604,   776,    74,   295,    74,   776,
     684,   905,   521,   524,    80,   702,   702,     9,   832,   521,
     824,   521,   920,   922,   374,   521,   798,   974,   519,    61,
     799,   810,   810,   750,   906,   521,   525,   529,   528,   769,
      37,    37,   769,   769,   172,   520,   947,   769,   146,   906,
     906,   146,   146,   769,   521,   734,   465,   987,   521,   278,
     457,   617,   521,   524,   509,   540,   521,   274,   598,   173,
     310,   397,   292,   594,   595,   619,   585,   905,   445,    42,
     423,    42,   521,   524,    83,   201,   721,   520,  1028,   631,
     596,  1028,   295,   295,   520,   521,   687,   698,   998,   703,
     998,   703,   521,   810,   521,   812,   521,   521,   942,   342,
     372,   925,   115,   749,   756,   759,   757,   759,   769,   769,
     769,   947,   521,   769,    37,    37,   769,   769,   146,   983,
     776,   868,   390,   626,   613,   584,   521,   591,   207,   120,
     457,   292,   619,   292,   594,   776,   520,   711,   726,   148,
     729,   983,   707,   702,   868,   803,   803,    55,   104,   447,
     905,   926,   927,   926,   521,     4,     9,   748,   525,   529,
     521,   769,   769,   769,   706,   595,    65,   274,   363,   390,
     587,   587,  1028,   724,   727,   520,   520,   521,   703,   804,
     804,   927,   371,   166,   326,   166,   326,   756,   757,   868,
     583,    25,   115,   282,   524,   723,   402,   728,   711,   720,
     687,   803,    37,   724,   521,   230,   718,   719,   521,   521,
     524,   868,   804,   927,   723,   520,   717,   349,   983,   711,
     984,   717,   521,   126,   719,   983,   717,   731,   231,   711,
     721
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   534,   535,   536,   536,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   546,   546,   546,
     546,   546,   546,   546,   546,   547,   547,   548,   548,   549,
     549,   549,   549,   550,   550,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   551,   551,   551,   551,   551,   551,
     551,   551,   551,   551,   552,   552,   553,   553,   553,   553,
     554,   554,   555,   556,   556,   556,   655,   655,   655,   655,
     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,
     774,   774,   774,   775,   775,   689,   690,   690,   690,   690,
     690,   691,   691,   692,   692,   692,   693,   693,   694,   695,
     695,   696,   696,   696,   697,   697,   697,   698,   698,   698,
     699,   699,   700,   700,   701,   701,   702,   702,   703,   703,
     704,   704,   705,   705,   706,   706,   707,   707,   708,   652,
     652,   652,   653,   653,   654,   654,   770,   770,   770,   642,
     642,   642,   642,   642,   642,   642,   643,   650,   650,   650,
     651,   651,   667,   667,   667,   668,   668,   539,   539,   540,
     540,   541,   541,   541,   542,   542,   542,   542,   543,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,   543,
     543,   543,   544,   544,   545,   545,   545,  1005,  1005,  1005,
    1005,  1005,  1005,  1006,  1006,  1006,  1008,   711,   711,   711,
     712,   713,   713,   714,   714,   715,   716,   716,   717,   718,
     719,   720,   720,   721,   721,   722,   723,   723,   724,   725,
     725,   726,   726,   727,   727,   728,   728,   729,   729,   730,
     730,   731,   731,   731,   732,   732,   733,   734,   735,   735,
     736,   736,   737,   737,   737,   738,   738,   738,   739,   739,
     740,   740,   740,   740,   740,   741,   741,   742,   742,   742,
     742,   742,   742,   743,   743,   744,   745,   745,   746,   746,
     747,   747,   747,   747,   747,   748,   748,   749,   749,   750,
     750,   751,   752,   753,   753,   754,   754,   754,   755,   755,
     756,   756,   757,   757,   758,   758,   758,   759,   759,   759,
     760,   760,   761,   761,   762,   762,   762,   763,   763,   764,
     764,   765,   765,   766,   767,   767,   768,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   769,   769,   769,   769,   582,   582,
     582,   583,   583,   584,   584,   584,   584,   584,   584,   585,
     585,   586,   587,   587,   587,   587,   587,   588,   588,   588,
     588,   589,   589,   589,   589,   589,   589,   589,   589,   590,
     590,   591,   591,   592,   592,   592,   593,   594,   595,   595,
     595,   595,   595,   596,   596,   596,   596,   597,   598,   598,
     599,   599,   600,   600,   600,   600,   600,   600,   600,   600,
     601,   601,   602,   603,   603,   603,   603,   604,   604,   604,
     604,   605,   606,   606,   606,   607,   608,   608,   608,   608,
     608,   608,   609,   609,   610,   610,   611,   612,   612,   612,
     613,   613,   614,   614,   615,   615,   615,   616,   617,   617,
     618,   618,   619,   620,   620,   620,   620,   621,   621,   622,
     622,   623,   623,   623,   624,   624,   624,   624,   624,   624,
     625,   625,   626,   626,   626,   626,   627,   628,   628,   628,
     628,   628,   628,   628,   628,   629,   629,   660,   660,   660,
     660,   660,   660,   660,   660,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   662,   662,   662,   662,   662,   662,   663,
     663,   664,   664,   664,   665,   665,   665,   666,   666,   644,
     644,   644,   644,   644,   644,   645,   645,   646,   646,  1007,
     565,   565,   566,   566,   567,   567,   568,   568,   569,   569,
     570,   570,   571,   571,   572,   572,   573,   573,   573,   573,
     573,   574,   575,   575,   576,   576,   577,   577,   578,   578,
     578,   578,   578,   578,   578,   578,   578,   578,   578,   578,
     578,   578,   578,   578,   579,   580,   580,   580,   581,   581,
     776,   776,   777,   777,   778,   778,   778,   778,   778,   778,
     778,   778,   779,   779,   780,   780,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   781,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   782,   782,   783,   783,   784,
     784,   785,   785,   786,   786,   787,   787,   788,   788,   788,
     789,   789,   790,   791,   791,   792,   792,   792,   792,   792,
     792,   792,   792,   792,   793,   793,   794,   794,   794,   795,
     796,   796,   797,   797,   798,   798,   798,   799,   799,   800,
     800,   801,   801,   802,   802,   803,   803,   803,   804,   804,
     804,   805,   805,   805,   805,   806,   806,   807,   807,   807,
     807,   808,   808,   809,   809,   809,   809,   809,   809,   810,
     810,   811,   811,   812,   812,   812,   812,   813,   814,   814,
     815,   815,   816,   816,   816,   816,   816,   817,   818,   818,
     818,   819,   819,   820,   820,   821,   821,   822,   822,   822,
     823,   823,   824,   824,   825,   825,   825,   825,   825,   826,
     827,   828,   829,   830,   830,   831,   831,   832,   832,   833,
     833,   834,   834,   835,   835,   836,   837,   837,   837,   837,
     838,   838,   839,   839,   839,   840,   840,   841,   841,   842,
     842,   843,   843,   844,   844,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   846,   846,   847,   847,
     847,   848,   848,   849,   849,   850,   850,   851,   851,   852,
     852,   853,   854,   854,   855,   855,   855,   855,   855,   855,
     855,   855,   855,   855,   855,   856,   856,   856,   856,   857,
     857,   858,   858,   858,   858,   858,   859,   859,   859,   859,
     859,   859,   860,   860,   861,   861,   862,   862,   862,   862,
     863,   863,   864,   865,   865,   866,   866,   867,   867,   868,
     868,   869,   869,   870,   871,   871,   872,   872,   873,   873,
     874,   874,   875,   875,   875,   875,   875,   875,   875,   875,
     875,   876,   876,   876,   877,   877,   877,   877,   877,   877,
     877,   878,   878,   878,   878,   879,   880,   880,   881,   881,
     881,   881,   881,   881,   881,   881,   881,   881,   881,   882,
     882,   883,   883,   884,   884,   885,   886,   887,   887,   888,
     888,   889,   890,   891,   891,   891,   891,   891,   891,   892,
     892,   893,   893,   893,   893,   894,   895,   895,   895,   896,
     896,   897,   897,   898,   898,   899,   899,   900,   900,   901,
     901,   902,   902,   903,   903,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   905,   905,   905,   905,   905,   905,   905,   905,   905,
     905,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   906,   906,   906,   906,   906,   907,   907,   907,   908,
     908,   908,   908,   908,   908,   908,   908,   908,   908,   908,
     908,   908,   909,   909,   909,   909,   909,   910,   910,   910,
     910,   910,   910,   911,   911,   912,   912,   913,   913,   913,
     913,   913,   913,   913,   913,   913,   913,   913,   913,   913,
     913,   914,   914,   915,   915,   916,   916,   916,   917,   917,
     918,   918,   919,   919,   920,   921,   921,   921,   922,   923,
     923,   924,   924,   925,   925,   925,   926,   926,   927,   927,
     927,   927,   927,   928,   928,   929,   929,   930,   931,   931,
     932,   932,   933,   933,   933,   934,   934,   935,   935,   935,
     935,   935,   935,   935,   935,   935,   935,   935,   935,   935,
     935,   936,   936,   937,   937,   938,   938,   938,   938,   938,
     938,   938,   938,   939,   939,   940,   940,   941,   941,   942,
     942,   943,   943,   944,   944,   945,   945,   946,   946,   946,
     947,   947,   948,   948,   949,   949,   949,   949,   949,   949,
     949,   949,   949,   949,   950,   950,   951,   952,   952,   953,
     953,   953,   953,   953,   953,   954,   955,   956,   956,   956,
     957,   957,   958,   959,   959,   960,   961,   961,   962,   962,
     963,   963,   964,   964,   964,   965,   965,   966,   966,   967,
     967,   968,   968,   968,   969,   969,   969,   970,   970,   971,
     971,   972,   972,   973,   973,   974,   974,   975,   975,   975,
     976,   976,   977,   977,   978,   979,   979,   980,   980,   981,
     981,   981,   982,   982,   983,   983,   984,   984,   985,   985,
     986,   986,   987,   988,   989,   989,   990,   990,   990,   990,
     990,   990,   990,   990,   990,   990,   990,   990,   990,   990,
     991,   992,   993,   993,   993,   993,   994,   994,   995,   995,
     995,   996,   996,   996,   997,   997,   997,   998,   998,   999,
     999,  1000,  1000,  1001,  1002,  1002,  1002,  1002,  1003,  1003,
    1004,   771,   772,   772,   773,   773,   773,   773,   647,   647,
     647,   648,   648,   649,   649,   649,   649,   682,   682,   683,
     684,   684,   685,   685,   686,   686,   687,   687,   688,   688,
     538,   538,   538,   538,   538,   538,   563,   563,   564,   564,
     680,   680,   681,   669,   669,   669,   669,   670,   670,   671,
     671,   671,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   673,   673,   673,   674,   674,   675,   675,   676,
     676,   677,   677,   677,   677,   678,   679,   679,  1017,  1017,
    1017,  1017,  1018,  1018,  1018,  1018,  1019,  1019,  1019,  1019,
    1020,  1020,  1021,  1021,  1021,  1021,  1021,  1021,  1021,  1022,
    1022,   709,   709,   709,   710,   710,  1009,  1009,  1009,  1009,
    1009,  1010,  1010,  1010,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,   656,   656,   657,   657,   657,   658,   658,   659,
     659,   557,   557,   558,   559,   559,   560,   560,   561,   561,
    1014,  1015,  1015,  1016,  1016,  1016,  1023,  1023,  1023,  1023,
    1023,  1023,  1023,  1023,  1024,  1024,  1025,  1025,  1026,  1026,
     562,  1027,  1027,  1027,  1027,  1027,  1028,  1028,  1028,  1028,
     630,   630,   630,   631,   631,   631,   632,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   634,   634,
     634,   634,   634,   634,   634,   634,   634,   634,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   637,   637,   637,   637,
     637,   637,   637,   637,   637,   637,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   638,   638,
     638,   638,   638,   638,   638,   638,   638,   638,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   639,   639,   639,   639,   639,   639,   639,   639,   639,
     639,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
     640,   640,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,
     641,   641,   641,   641,   641
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     4,
       6,     6,     6,     5,     5,     6,     9,     4,     5,     7,
       6,     4,     8,     4,     2,     4,     3,     6,     4,     2,
       2,     2,     2,     1,     2,     0,     1,     2,     2,     2,
       1,     3,     4,     2,     1,     0,     2,     3,     2,     3,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     8,     1,     4,     4,     7,
       2,     1,     3,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,
       4,     6,     5,     5,     8,     7,     1,     5,     8,     7,
       1,     0,     3,     9,    12,     3,     0,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     1,     1,     1,
       5,     1,     1,     1,     1,    16,     3,     0,     3,     2,
       2,     1,     3,     5,     0,     5,     3,     0,    13,     1,
       0,     1,     3,     1,     3,     1,     3,     4,     0,     4,
       3,     2,     2,     0,     2,     0,    12,     1,     1,     3,
       2,     0,     1,     1,     0,     1,     1,     0,     2,     0,
       2,     2,     2,     2,     1,     1,     0,     3,     4,     3,
       2,     3,     0,     1,     3,     3,     1,     3,     1,     0,
       1,     1,     1,     5,     0,     1,     1,     2,     0,     3,
       0,     5,     4,     1,     1,     2,     2,     0,     1,     3,
       1,     3,     1,     3,     1,     3,     3,     1,     2,     3,
       2,     0,     1,     1,     1,     2,     1,     2,     3,     2,
       1,     1,     0,     4,     2,     5,     3,     1,     3,     3,
       5,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     3,
       3,     3,     3,     4,     3,     4,     3,     4,     5,     6,
       6,     7,     6,     7,     6,     7,     3,     4,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     4,     6,     1,     1,     1,     1,     1,
       2,     1,     2,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     2,     2,     1,     3,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     1,     3,     8,
      11,    10,     7,    10,     9,     1,     1,     2,     3,     8,
      11,     9,     1,     1,     3,     0,     1,     3,     1,     0,
       1,     0,     1,     0,     1,     3,     1,     1,     1,     3,
       0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
       1,     3,     3,     1,     1,     3,     3,     3,     3,     3,
       3,     4,     3,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     3,     3,     1,     2,     4,     4,     2,     3,
       5,     5,     1,     1,     3,     0,    11,    11,    10,    12,
       1,     2,     5,     4,     4,     4,     4,     7,     5,     4,
       7,     6,     9,     9,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     2,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,
       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     0,
       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     1,     4,     2,     9,     9,     3,     0,     2,     2,
       0,     5,     3,     1,     3,     5,     3,     1,     2,     1,
       3,     5,     1,     2,     3,     4,     5,     4,     5,     4,
       6,     5,     4,     5,     5,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       1,     0,     2,     3,     5,     6,     2,     3,     5,     5,
       5,     3,     4,     0,     1,     1,     1,     1,     1,     2,
       4,     1,     1,     1,     1,     2,     3,     0,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     1,     3,
       0,     1,     1,     1,     1,     5,     2,     1,     1,     1,
       1,     4,     1,     2,     2,     1,     3,     3,     2,     1,
       0,     5,     2,     5,     2,     1,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       0,     1,     3,     3,     5,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     3,     2,     2,     3,     3,
       5,     4,     6,     3,     5,     4,     6,     4,     6,     5,
       7,     3,     2,     4,     3,     2,     3,     3,     3,     3,
       4,     3,     4,     3,     4,     5,     6,     6,     7,     6,
       7,     6,     7,     3,     4,     4,     6,     1,     4,     3,
       5,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     5,     6,     6,     7,     1,     1,     2,     1,
       1,     2,     2,     3,     1,     2,     4,     1,     1,     2,
       2,     4,     1,     1,     3,     3,     1,     3,     6,     7,
       9,     7,     7,     5,     1,     1,     1,     5,     6,     6,
       4,     4,     4,     4,     6,     5,     5,     5,     4,     6,
       4,     7,     9,     5,     0,     5,     4,     0,     1,     0,
       2,     0,     1,     3,     3,     2,     2,     0,     6,     1,
       0,     3,     0,     2,     2,     0,     1,     4,     2,     2,
       2,     2,     2,     4,     3,     1,     5,     3,     1,     3,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     4,     1,     4,     1,     2,     1,
       2,     1,     2,     1,     3,     1,     3,     1,     2,     1,
       3,     1,     2,     1,     0,     1,     3,     1,     3,     3,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     3,     2,     3,     0,     3,
       3,     2,     2,     1,     0,     2,     2,     3,     2,     1,
       1,     3,     5,     1,     2,     4,     2,     0,     1,     0,
       1,     2,     2,     3,     5,     1,     0,     1,     2,     0,
       2,     0,     2,     3,     3,     3,     5,     0,     2,     1,
       0,     1,     0,     1,     3,     1,     2,     3,     2,     1,
       4,     2,     1,     0,     3,     1,     3,     1,     2,     4,
       2,     0,     1,     3,     1,     2,     1,     3,     1,     2,
       1,     3,     1,     1,     1,     2,     1,     1,     2,     1,
       1,     2,     7,     2,     5,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     5,     3,     0,     1,     1,     1,     1,     4,     7,
       6,     2,     0,     1,     1,     1,     1,    13,    16,     1,
       2,     0,     1,     0,     1,     0,     2,     0,     1,     0,
       6,     8,     6,     8,     6,     8,     3,     2,     1,     0,
       4,     6,     3,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     3,
       3,     3,     1,     3,     3,     2,     3,     3,     3,     3,
       1,     1,     1,     1,     3,     5,     1,     1,     1,     1,
       3,     2,     2,     3,     1,     1,     4,     6,     5,     4,
       6,     1,     1,     1,     1,     1,     1,     0,     1,     3,
       1,     0,     7,     3,     1,     2,     3,     2,     0,     2,
       0,     2,     4,     5,     3,     5,     1,     0,     2,     0,
       2,     1,     1,     1,     2,     3,     2,     2,     2,     2,
       3,     4,     2,     1,     1,     1,     1,     3,     1,     3,
       2,     9,    12,    11,    12,    14,     3,     4,     4,     0,
       7,    10,     9,     2,     3,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 545 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 561 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 573 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 623 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 19606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 19766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 19807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 19819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 19859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-5].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_conf_expr: ON CONSTRAINT name  */
#line 82 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_conf_expr: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_with_clause: with_clause  */
#line 97 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_with_clause: %empty  */
#line 98 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* insert_column_item: ColId opt_indirection  */
#line 104 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* set_clause: set_target '=' a_expr  */
#line 116 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_or_action: OR REPLACE  */
#line 146 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* opt_or_action: OR IGNORE_P  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_or_action: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 162 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 172 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_on_conflict: %empty  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 188 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 199 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 210 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* returning_clause: RETURNING target_list  */
#line 224 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* returning_clause: %empty  */
#line 225 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* override_kind: USER  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* override_kind: SYSTEM_P  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* set_target_list: set_target  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_target_list: set_target_list ',' set_target  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_collate: COLLATE any_name  */
#line 244 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_collate: %empty  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_class: any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_class: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* insert_column_list: insert_column_item  */
#line 256 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 258 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause_list: set_clause  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause_list: set_clause_list ',' set_clause  */
#line 264 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* set_clause_list_opt_comma: set_clause_list  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_params: index_elem  */
#line 272 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* index_params: index_params ',' index_elem  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* set_target: ColId opt_indirection  */
#line 279 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 20494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 20500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 20506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 20522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name  */
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* CreateDatabaseStmt: CREATE_P opt_extension_name DATABASE qualified_name  */
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[-2].str);
                    n->name = (yyvsp[0].range);
                    (yyval.node) = (PGNode *)n;
				}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name  */
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *)n;
				}
#line 20598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* CreateDatabaseStmt: CREATE_P DATABASE qualified_name FROM Sconst  */
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
                {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[-2].range);
                    n->path = (yyvsp[0].str);
                    (yyval.node) = (PGNode *)n;
                }
#line 20609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* CreateDatabaseStmt: CREATE_P DATABASE IF_P NOT EXISTS qualified_name FROM Sconst  */
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateDatabaseStmt: CREATE_P OR REPLACE DATABASE qualified_name FROM Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
                                {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[-2].range);
					n->path = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* opt_extension_name: Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 20691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 20742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 21009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* PGQ_IDENT: IDENT  */
#line 40 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* PGQ_IDENT: unreserved_keyword  */
#line 41 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* PGQ_IDENT: pgq_col_name_keyword  */
#line 42 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 21088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* DropPropertyGraphStmt: DROP PROPERTY GRAPH qualified_name opt_drop_behavior  */
#line 51 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGDropPropertyGraphStmt *n = makeNode(PGDropPropertyGraphStmt);
				n->name = (yyvsp[-1].range);
				n->behavior = (yyvsp[0].dbehavior);
				(yyval.node) = (PGNode *)n;
			}
#line 21099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* CreatePropertyGraphStmt: CREATE_P PROPERTY GRAPH qualified_name VertexOrNode TABLES '(' VertexTableDefinition VertexTableDefinitionList ')' EdgeOrRelationship TABLES '(' EdgeTableDefinition EdgeTableDefinitionList ')'  */
#line 79 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGCreatePropertyGraphStmt *n = makeNode(PGCreatePropertyGraphStmt);
				n->name = (yyvsp[-12].range);
				n->vertex_tables = (yyvsp[-7].list)?lappend((yyvsp[-7].list),(yyvsp[-8].node)):list_make1((yyvsp[-8].node));
				n->edge_tables = (yyvsp[-1].list)?lappend((yyvsp[-1].list),(yyvsp[-2].node)):list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode *)n;
			}
#line 21111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* VertexTableDefinitionList: ',' VertexTableDefinition VertexTableDefinitionList  */
#line 90 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* VertexTableDefinitionList: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* KeySpecification: '(' name_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* KeyDefinition: KEY KeySpecification  */
#line 100 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 21135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* KeyReference: KeyDefinition REFERENCES  */
#line 104 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* LabelList: PGQ_IDENT  */
#line 108 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* LabelList: LabelList ',' PGQ_IDENT  */
#line 109 "third_party/libpg_query/grammar/statements/pgq.y"
                                    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* Discriminator: IN_P qualified_name '(' LabelList ')'  */
#line 114 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = (yyvsp[-3].range); /* a BIGINT column with 64 bits to set detailed label membership */
				n->labels = (yyvsp[-1].list); /* there is a list of up to 64 labels */
				(yyval.node) = (PGNode*) n;
			}
#line 21164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* Discriminator: %empty  */
#line 122 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				PGPropertyGraphTable *n = makeNode(PGPropertyGraphTable);
				n->discriminator = NULL; /* no discriminator */
				n->labels = NULL; /* no list, just the single staring PGQ_IDENT */
				(yyval.node) = (PGNode*) n;
			}
#line 21175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* VertexTableDefinition: QualifiednameOptionalAs PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 133 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				n->is_vertex_table = true;
				(yyval.node) = (PGNode *) n;
			}
#line 21190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* EdgeTableDefinitionList: ',' EdgeTableDefinition EdgeTableDefinitionList  */
#line 147 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.list) = (yyvsp[0].list)?lappend((yyvsp[0].list),(yyvsp[-1].node)):list_make1((yyvsp[-1].node)); }
#line 21196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* EdgeTableDefinitionList: %empty  */
#line 149 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* EdgeTableDefinition: QualifiednameOptionalAs SOURCE KeyReference qualified_name KeySpecification DESTINATION KeyReference qualified_name KeySpecification PropertiesClause LABEL PGQ_IDENT Discriminator  */
#line 157 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPropertyGraphTable *n = (PGPropertyGraphTable*) (yyvsp[0].node);
				n->table = (yyvsp[-12].list);
				n->is_vertex_table = false;
				n->src_fk = (yyvsp[-10].list);
				n->src_name = (yyvsp[-9].range);
				n->src_pk = (yyvsp[-8].list);
				n->dst_fk = (yyvsp[-6].list);
				n->dst_name = (yyvsp[-5].range);
				n->dst_pk = (yyvsp[-4].list);
				n->properties = (yyvsp[-3].list);
				/* Xth label in list is set iff discriminator Xth-bit==1 */
				if (n->labels) n->labels = lappend(n->labels,makeString((yyvsp[-1].str)));
				else n->labels = list_make1(makeString((yyvsp[-1].str)));
				(yyval.node) = (PGNode *) n;
			}
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* IdentOptionalAs: PGQ_IDENT  */
#line 182 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                    { (yyval.list) = list_make2(makeString((yyvsp[0].str)), makeString((yyvsp[0].str))); }
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* IdentOptionalAs: PGQ_IDENT AS PGQ_IDENT  */
#line 184 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* QualifiednameOptionalAs: qualified_name  */
#line 188 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[0].range), makeString("")); }
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* QualifiednameOptionalAs: qualified_name AS PGQ_IDENT  */
#line 190 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = list_make2((yyvsp[-2].range), makeString((yyvsp[0].str))); }
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* PropertiesList: IdentOptionalAs  */
#line 194 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* PropertiesList: PropertiesList ',' IdentOptionalAs  */
#line 197 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* ExceptOptional: EXCEPT '(' PropertiesList ')'  */
#line 202 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* ExceptOptional: %empty  */
#line 204 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = NULL; }
#line 21271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* PropertiesSpec: AreOptional ALL COLUMNS ExceptOptional  */
#line 209 "third_party/libpg_query/grammar/statements/pgq.y"
                        { 
				(yyval.list) = list_make1(list_make2(makeString("*"), makeString("*")));
				if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list)); 
			}
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* PropertiesSpec: '(' PropertiesList ')'  */
#line 214 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* PropertiesClause: NO PROPERTIES  */
#line 218 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = NULL; }
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* PropertiesClause: PROPERTIES PropertiesSpec  */
#line 221 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* PropertiesClause: %empty  */
#line 223 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1(list_make2(makeString("*"), makeString("*"))); }
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* GraphTableWhereOptional: WHERE pgq_expr  */
#line 232 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* GraphTableWhereOptional: %empty  */
#line 234 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = NULL; }
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* GraphTableStmt: '(' PGQ_IDENT MATCH PathPatternList KeepOptional GraphTableWhereOptional COLUMNS '(' ColumnList ')' ')' qualified_name  */
#line 240 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGMatchClause *n = makeNode(PGMatchClause);
				n->pg_name = (yyvsp[-10].str);
				n->paths = (yyvsp[-8].list);
				if ((yyvsp[-7].node)) {
					/* we massage away 'keep' functionality immediately */
					PGPathPattern *keep = (PGPathPattern*) (yyvsp[-7].node);
					PGListCell *list = list_head(n->paths);
					while(list) {
						PGPathPattern *p = (PGPathPattern*) lfirst(list);
						PGList *backup = p->path;
						*p = *keep; /* copy path spec into all paths */
						p->path = backup; /* restore */
						list = lnext(list);
					}
				}
				n->where_clause = (yyvsp[-6].node);
				n->columns = (yyvsp[-3].list);
				n->graph_table = (yyvsp[0].range);
				(yyval.node) = (PGNode *) n;
			}
#line 21342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ColumnSpec: target_el  */
#line 264 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make2(makeInteger(PG_COLUMNSPEC_EXPR), (yyvsp[0].target)); }
#line 21348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ColumnList: ColumnSpec  */
#line 268 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* ColumnList: ColumnList ',' ColumnSpec  */
#line 270 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* KeepOptional: KEEP PathPrefix  */
#line 274 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* KeepOptional: %empty  */
#line 276 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* GroupOrGroupsOptional: GROUP_P  */
#line 284 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* GroupOrGroupsOptional: GROUPS  */
#line 286 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* GroupOrGroupsOptional: %empty  */
#line 288 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* PathVariableOptional: PGQ_IDENT '='  */
#line 292 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = (yyvsp[-1].str); }
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* PathVariableOptional: %empty  */
#line 294 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.keyword) = NULL;}
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* PathModeOptional: WALK PathOrPathsOptional  */
#line 298 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* PathModeOptional: TRAIL PathOrPathsOptional  */
#line 300 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_TRAIL; }
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* PathModeOptional: SIMPLE PathOrPathsOptional  */
#line 302 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_SIMPLE; }
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* PathModeOptional: ACYCLIC PathOrPathsOptional  */
#line 304 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.ival) = PG_PATHMODE_ACYCLIC; }
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* PathModeOptional: PathOrPathsOptional  */
#line 306 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = PG_PATHMODE_WALK; }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* TopKOptional: ICONST  */
#line 310 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* TopKOptional: %empty  */
#line 312 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 0; }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* PathPrefix: ANY SHORTEST PathModeOptional  */
#line 317 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* PathPrefix: SHORTEST ICONST PathModeOptional GroupOrGroupsOptional  */
#line 329 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = (yyvsp[0].ival);
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[-1].ival);
				n->topk = (yyvsp[-2].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* PathPrefix: ALL SHORTEST PathModeOptional  */
#line 341 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = true;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* PathPrefix: ALL PathModeOptional  */
#line 353 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* PathPrefix: ANY TopKOptional PathModeOptional  */
#line 365 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = false;
				n->group = false;
				n->shortest = false;
				n->mode = (PGPathMode) (yyvsp[0].ival);
				n->topk = (yyvsp[-1].ival);
				(yyval.node) = (PGNode*) n;
			}
#line 21519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* PathPrefix: %empty  */
#line 377 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = makeNode(PGPathPattern);
				n->path = NULL;
				n->all = true;
				n->group = false;
				n->shortest = false;
				n->mode = PG_PATHMODE_WALK;
				n->topk = 0;
				(yyval.node) = (PGNode*) n;
			}
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* PathPatternList: PathPattern  */
#line 391 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* PathPatternList: PathPatternList ',' PathPattern  */
#line 394 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* PathPattern: PathVariableOptional PathPrefix PathConcatenation  */
#line 399 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathPattern *n = (PGPathPattern*) (yyvsp[-1].node);
				PGList *l = (PGList *) (yyvsp[0].list);
				PGSubPath *p = (PGSubPath *) lfirst(list_head(l));

				(yyval.node) = (PGNode*) n;
				if ((yyvsp[-2].keyword) == NULL) {
					n->path = (yyvsp[0].list);
				} else if (list_length(l)==1 && p->type==T_PGSubPath && !p->path_var)  {
					p->path_var = (yyvsp[-2].keyword);
					(yyval.node) = (PGNode*) p;
				} else {
					/* generate a named subpath because of the variable */
					p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->path_var = (yyvsp[-2].keyword);
					p->path = (yyvsp[0].list);
					n->path = list_make1(p);
				}
			}
#line 21572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* PatternUnion: '|'  */
#line 423 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.ival) = 0; }
#line 21578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* PatternUnion: '|' '+' '|'  */
#line 425 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = 1; }
#line 21584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* KleeneQuantifierOptional: ICONST  */
#line 429 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* KleeneQuantifierOptional: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = -1; }
#line 21596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* KleeneOptional: '*'  */
#line 437 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 0;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* KleeneOptional: '+'  */
#line 446 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = 1;
				n->upper = (1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* KleeneOptional: '?'  */
#line 455 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 0;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* KleeneOptional: '{' KleeneQuantifierOptional ',' KleeneQuantifierOptional '}'  */
#line 464 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 0;
				n->lower = ((yyvsp[-3].ival)>=0)?(yyvsp[-3].ival):0;
				n->upper = ((yyvsp[-1].ival)>=0)?(yyvsp[-1].ival):(1<<30);
				(yyval.node) = (PGNode*) n;
			}
#line 21644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* KleeneOptional: %empty  */
#line 473 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = makeNode(PGSubPath);
				n->single_bind = 1;
				n->lower = 1;
				n->upper = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* CostNum: ICONST  */
#line 483 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* CostNum: FCONST  */
#line 485 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.ival) = atof((yyvsp[0].str)); }
#line 21668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* CostDefault: DEFAULT CostNum  */
#line 489 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 21674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* CostDefault: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.ival) = NULL; }
#line 21680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* CostOptional: COST b_expr CostDefault  */
#line 496 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				PGAConst *d = (PGAConst*) (yyvsp[0].ival);
				n->cost_expr = (yyvsp[-1].node);
				n->default_value = d?((d->val.type == T_PGInteger)?
					((double) d->val.val.ival):strtod(d->val.val.str,NULL)):1;
				(yyval.node) = (PGNode*) n;
			}
#line 21693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* CostOptional: %empty  */
#line 506 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = makeNode(PGPathInfo);
				n->cost_expr = NULL;
				n->default_value = 1;
				(yyval.node) = (PGNode*) n;
			}
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* SubPath: PathVariableOptional PathModeOptional PathConcatenation GraphTableWhereOptional CostOptional  */
#line 516 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-4].keyword);
				n->mode = (PGPathMode) (yyvsp[-3].ival);
				n->path = (yyvsp[-2].list);
				n->where_clause = (yyvsp[-1].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* EnclosedSubPath: '[' SubPath ']' KleeneOptional  */
#line 528 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				p->path = list_make1((yyvsp[-2].node));
				(yyval.node) = (PGNode*) p;
			}
#line 21727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* PathElement: VertexPattern  */
#line 536 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* PathElement: EdgePattern  */
#line 538 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* PathSequence: EnclosedSubPath PathSequence  */
#line 543 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *n = (PGSubPath*) (yyvsp[-1].node);
				PGPathInfo *i = (PGPathInfo*) n->path;
				PGList* p = (PGList*) i->path;

				if (i->var_name == NULL && i->mode <= PG_PATHMODE_WALK &&
					i->where_clause == NULL && i->cost_expr == NULL)
				{
					/* there is no need for a SubPath */
					(yyval.list) = (yyvsp[0].list)?list_concat(p,(yyvsp[0].list)):p;
				} else {
        			n->path_var = i->var_name;
					n->mode = i->mode;
					n->path = p;
					n->where_clause = i->where_clause;
					n->cost_expr = i->cost_expr;
					n->default_value = i->default_value;
					(yyval.list) = list_make1(n);
					if ((yyvsp[0].list)) (yyval.list) = list_concat((yyval.list),(yyvsp[0].list));
				}
			}
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* PathSequence: PathElement PathSequence  */
#line 565 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.list) = (yyvsp[-1].list)?list_concat((yyvsp[-1].list),(yyvsp[0].list)):(yyvsp[0].list); }
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* PathSequence: %empty  */
#line 567 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.list) = NULL; }
#line 21777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* PathConcatenation: PathSequence  */
#line 571 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* PathConcatenation: PathSequence PatternUnion PathSequence  */
#line 574 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathUnion *n = makeNode(PGPathUnion);
				n->multiset = (yyvsp[-1].ival);
				n->path1 = (yyvsp[-2].list);
				n->path2 = (yyvsp[0].list);
				(yyval.list) = list_make1(n);
			}
#line 21795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* OrLabelExpression: LabelExpression  */
#line 584 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* OrLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 587 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* AndLabelExpression: LabelExpression  */
#line 597 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* AndLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 600 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ComposedLabelExpression: LabelExpression  */
#line 610 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ComposedLabelExpression: LabelExpression '|' OrLabelExpression  */
#line 613 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "|";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ComposedLabelExpression: LabelExpression '&' AndLabelExpression  */
#line 622 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "&";
				n->left = (PGLabelTest*) (yyvsp[-2].node);
				n->right = (PGLabelTest*) (yyvsp[0].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* LabelExpression: PGQ_IDENT  */
#line 633 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = (yyvsp[0].str);
				n->left = n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 21872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* LabelExpression: '!' LabelExpression  */
#line 641 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLabelTest *n = makeNode(PGLabelTest);
				n->name = "!";
				n->left = (PGLabelTest*) (yyvsp[0].node);
				n->right = NULL;
				(yyval.node) = (PGNode*) n;
			}
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* LabelExpression: '(' ComposedLabelExpression ')'  */
#line 649 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[-1].node); }
#line 21890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* LabelExpressionOptional: IsOrColon LabelExpression  */
#line 653 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.node) = (yyvsp[0].node); }
#line 21896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* LabelExpressionOptional: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.node) = NULL; }
#line 21902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ArrowRight: '-'  */
#line 667 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 21908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ArrowRight: '-' '>'  */
#line 669 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "->"; }
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ArrowRight: LAMBDA_ARROW  */
#line 671 "third_party/libpg_query/grammar/statements/pgq.y"
                                                        { (yyval.str) = "->"; }
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ArrowLeftBracket: '-' '['  */
#line 675 "third_party/libpg_query/grammar/statements/pgq.y"
                                                { (yyval.str) = "-"; }
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ArrowLeftBracket: '<' '-' '['  */
#line 677 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = "<-"; }
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* AbbreviatedEdge: '<' ArrowRight  */
#line 682 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_LEFT;
			}
#line 21941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* AbbreviatedEdge: ArrowRight  */
#line 688 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char* dir = (yyvsp[0].str);
				(yyval.ival) = (dir[1] == '>')?PG_MATCH_EDGE_RIGHT:PG_MATCH_EDGE_ANY;
			}
#line 21950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* VariableOptional: PGQ_IDENT  */
#line 695 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* VariableOptional: %empty  */
#line 697 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                { (yyval.str) = NULL;}
#line 21962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* FullElementSpec: VariableOptional LabelExpressionOptional GraphTableWhereOptional CostOptional  */
#line 702 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathInfo *n = (PGPathInfo*) (yyvsp[0].node);
				n->var_name = (yyvsp[-3].str);
				n->where_clause = (yyvsp[-1].node);
				n->label_expr = (PGLabelTest*) (yyvsp[-2].node);
				(yyval.node) = (PGNode*) n;
			}
#line 21974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* EdgePattern: AbbreviatedEdge KleeneOptional  */
#line 713 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);
				n->label_expr = NULL;
				n->element_var = NULL;
				n->match_type = (PGMatchType) (yyvsp[-1].ival);
				(yyval.list) = list_make1(n);
				if (p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 21993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* EdgePattern: ArrowLeftBracket FullElementSpec ']' ArrowRight KleeneOptional  */
#line 729 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				char *left = (yyvsp[-4].str), *right = (yyvsp[-1].str);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-3].node);
				PGSubPath *p = (PGSubPath*) (yyvsp[0].node);
				PGPathElement *n = makeNode(PGPathElement);

				n->match_type =
					(right[1] == '>')?
						((left[0] == '<')?PG_MATCH_EDGE_LEFT_RIGHT:PG_MATCH_EDGE_RIGHT):
						((left[0] == '<')?PG_MATCH_EDGE_LEFT:PG_MATCH_EDGE_ANY);
				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr || p->lower != 1 || !p->single_bind) {
					/* return a subpath consisting of one edge (element) */
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* VertexPattern: '(' FullElementSpec ')'  */
#line 756 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGPathElement *n = makeNode(PGPathElement);
				PGPathInfo* i = (PGPathInfo*) (yyvsp[-1].node);

				n->element_var = i->var_name;
				n->label_expr = i->label_expr;
				n->match_type = PG_MATCH_VERTEX;
				(yyval.list) = list_make1(n);
				if (i->where_clause || i->cost_expr) {
					PGSubPath *p = makeNode(PGSubPath);
					p->mode = PG_PATHMODE_NONE;
					p->lower = p->upper = p->single_bind = 1;
					p->where_clause = i->where_clause;
					p->cost_expr = i->cost_expr;
					p->default_value = i->default_value;
					p->path = (yyval.list);
					p->path_var = NULL;
					(yyval.list) = list_make1(p);
				}
			}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* pgq_expr: c_expr  */
#line 788 "third_party/libpg_query/grammar/statements/pgq.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* pgq_expr: pgq_expr TYPECAST Typename  */
#line 790 "third_party/libpg_query/grammar/statements/pgq.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* pgq_expr: pgq_expr COLLATE any_name  */
#line 792 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* pgq_expr: pgq_expr AT TIME ZONE pgq_expr  */
#line 800 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 22080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* pgq_expr: '+' pgq_expr  */
#line 815 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* pgq_expr: '-' pgq_expr  */
#line 817 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 22092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* pgq_expr: pgq_expr '+' pgq_expr  */
#line 819 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* pgq_expr: pgq_expr '-' pgq_expr  */
#line 821 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* pgq_expr: pgq_expr '*' pgq_expr  */
#line 823 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* pgq_expr: pgq_expr '/' pgq_expr  */
#line 825 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* pgq_expr: pgq_expr '%' pgq_expr  */
#line 827 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* pgq_expr: pgq_expr '^' pgq_expr  */
#line 829 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* pgq_expr: pgq_expr POWER_OF pgq_expr  */
#line 831 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* pgq_expr: pgq_expr '<' pgq_expr  */
#line 833 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* pgq_expr: pgq_expr '>' pgq_expr  */
#line 835 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* pgq_expr: pgq_expr '=' pgq_expr  */
#line 837 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* pgq_expr: pgq_expr LESS_EQUALS pgq_expr  */
#line 839 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* pgq_expr: pgq_expr GREATER_EQUALS pgq_expr  */
#line 841 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* pgq_expr: pgq_expr NOT_EQUALS pgq_expr  */
#line 843 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* pgq_expr: pgq_expr qual_Op pgq_expr  */
#line 846 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* pgq_expr: pgq_expr AND pgq_expr  */
#line 848 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* pgq_expr: pgq_expr OR pgq_expr  */
#line 850 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* pgq_expr: NOT pgq_expr  */
#line 852 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* pgq_expr: NOT_LA pgq_expr  */
#line 854 "third_party/libpg_query/grammar/statements/pgq.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* pgq_expr: pgq_expr GLOB pgq_expr  */
#line 856 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* pgq_expr: pgq_expr LIKE pgq_expr  */
#line 861 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* pgq_expr: pgq_expr LIKE pgq_expr ESCAPE pgq_expr  */
#line 866 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr  */
#line 873 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* pgq_expr: pgq_expr NOT_LA LIKE pgq_expr ESCAPE pgq_expr  */
#line 878 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* pgq_expr: pgq_expr ILIKE pgq_expr  */
#line 885 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* pgq_expr: pgq_expr ILIKE pgq_expr ESCAPE pgq_expr  */
#line 890 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr  */
#line 897 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* pgq_expr: pgq_expr NOT_LA ILIKE pgq_expr ESCAPE pgq_expr  */
#line 902 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr  */
#line 910 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* pgq_expr: pgq_expr SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 918 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 22313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr  */
#line 926 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 22325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* pgq_expr: pgq_expr NOT_LA SIMILAR TO pgq_expr ESCAPE pgq_expr  */
#line 934 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 22337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* pgq_expr: pgq_expr IS NULL_P  */
#line 952 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* pgq_expr: pgq_expr ISNULL  */
#line 960 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* pgq_expr: pgq_expr IS NOT NULL_P  */
#line 968 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* pgq_expr: pgq_expr NOT NULL_P  */
#line 976 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* pgq_expr: pgq_expr NOTNULL  */
#line 984 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* pgq_expr: pgq_expr LAMBDA_ARROW pgq_expr  */
#line 992 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 22409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* pgq_expr: pgq_expr DOUBLE_ARROW pgq_expr  */
#line 1000 "third_party/libpg_query/grammar/statements/pgq.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 22417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* pgq_expr: row OVERLAPS row  */
#line 1004 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* pgq_expr: pgq_expr IS TRUE_P  */
#line 1020 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* pgq_expr: pgq_expr IS NOT TRUE_P  */
#line 1028 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* pgq_expr: pgq_expr IS FALSE_P  */
#line 1036 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* pgq_expr: pgq_expr IS NOT FALSE_P  */
#line 1044 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* pgq_expr: pgq_expr IS UNKNOWN  */
#line 1052 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 22497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* pgq_expr: pgq_expr IS NOT UNKNOWN  */
#line 1060 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 22509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* pgq_expr: pgq_expr IS DISTINCT FROM pgq_expr  */
#line 1068 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 22517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* pgq_expr: pgq_expr IS NOT DISTINCT FROM pgq_expr  */
#line 1072 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* pgq_expr: pgq_expr IS OF '(' type_list ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* pgq_expr: pgq_expr IS NOT OF '(' type_list ')'  */
#line 1080 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 22541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* pgq_expr: pgq_expr BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1084 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* pgq_expr: pgq_expr NOT_LA BETWEEN opt_asymmetric b_expr AND pgq_expr  */
#line 1092 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* pgq_expr: pgq_expr BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1100 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* pgq_expr: pgq_expr NOT_LA BETWEEN SYMMETRIC b_expr AND pgq_expr  */
#line 1108 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* pgq_expr: pgq_expr IN_P in_expr  */
#line 1116 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* pgq_expr: pgq_expr NOT_LA IN_P in_expr  */
#line 1136 "third_party/libpg_query/grammar/statements/pgq.y"
                                {
					/* in_expr returns a PGSubLink or a list of pgq_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 22639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 22690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 22696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 22724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 22742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 22748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 22754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 22760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 22784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 22790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 22796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 22802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 22808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 23036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 23122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 23133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 23163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 23169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 23175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 23187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 23285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 23291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 23309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 23315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 23327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 23362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 23398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 23404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 23506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 23512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 23520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 23575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 23596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 23683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 23705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 23729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 23741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 23757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 23814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 23820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 23826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 23832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 23838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 23962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 24004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 24010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 24016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 24022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 24028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 24034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 24040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 24046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 24052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 24058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 24064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 24070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 24076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 24082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 24088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 24112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 24118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 24124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 24130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 24136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 24142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 24169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 24216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 24254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 24262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 24309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 24332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 24344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 24392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 24398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 24410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 24440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 24452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 24468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 24480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 24486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 24508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 24556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 24572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 24612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 24620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 24628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 24652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 24680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 24733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 25065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 25075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* pivot_column_entry: single_pivot_value  */
#line 388 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* pivot_column_list_internal: pivot_column_entry  */
#line 392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* pivot_column_list: pivot_column_list_internal  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* pivot_column_list: pivot_column_list_internal ','  */
#line 398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* with_clause: WITH cte_list  */
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* with_clause: WITH_LA cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 25127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* with_clause: WITH RECURSIVE cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 25138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* cte_list: common_table_expr  */
#line 436 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* cte_list: cte_list ',' common_table_expr  */
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 25163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* into_clause: INTO OptTempTableName  */
#line 453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* into_clause: %empty  */
#line 463 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 25183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 25252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* OptTempTableName: TABLE qualified_name  */
#line 513 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* OptTempTableName: qualified_name  */
#line 518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 25270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_table: TABLE  */
#line 524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 25276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_table: %empty  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 25282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* all_or_distinct: ALL  */
#line 529 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 25288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* all_or_distinct: DISTINCT  */
#line 530 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* all_or_distinct: %empty  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* by_name: BY NAME_P  */
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 25306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* distinct_clause: DISTINCT  */
#line 542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 25312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* opt_all_clause: ALL  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 25324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* opt_all_clause: %empty  */
#line 548 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 25336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 25342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* opt_ignore_nulls: %empty  */
#line 554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* opt_sort_clause: sort_clause  */
#line 558 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 25354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* opt_sort_clause: %empty  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* sort_clause: ORDER BY sortby_list  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 565 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* sortby_list: sortby  */
#line 580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* sortby_list: sortby_list ',' sortby  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 585 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 25421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_asc_desc: ASC_P  */
#line 604 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 25427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_asc_desc: DESC_P  */
#line 605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_asc_desc: %empty  */
#line 606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 25439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 25445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 610 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_nulls_order: %empty  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* select_limit: limit_clause offset_clause  */
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* select_limit: offset_clause limit_clause  */
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* select_limit: limit_clause  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* select_limit: offset_clause  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 25481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* opt_select_limit: select_limit  */
#line 622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* opt_select_limit: %empty  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 25493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* limit_clause: LIMIT select_limit_value  */
#line 628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 25512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* offset_clause: OFFSET select_offset_value  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 656 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 25536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* sample_count: FCONST '%'  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* sample_count: ICONST '%'  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* sample_count: FCONST PERCENT  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 25560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* sample_count: ICONST PERCENT  */
#line 676 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 25568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* sample_count: ICONST  */
#line 680 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 25576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* sample_count: ICONST ROWS  */
#line 684 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 25584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 691 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* sample_clause: %empty  */
#line 695 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 25598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_sample_func: ColId  */
#line 702 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_sample_func: %empty  */
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 25610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 708 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 25619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* tablesample_entry: sample_count  */
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 25627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 25635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 721 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 25644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 25652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_tablesample_clause: tablesample_clause  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_tablesample_clause: %empty  */
#line 736 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 25664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 741 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_repeatable_clause: %empty  */
#line 742 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* select_limit_value: a_expr  */
#line 746 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* select_limit_value: ALL  */
#line 748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* select_limit_value: a_expr '%'  */
#line 753 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* select_limit_value: FCONST PERCENT  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* select_limit_value: ICONST PERCENT  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* select_offset_value: a_expr  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* select_fetch_first_value: c_expr  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* select_fetch_first_value: '+' I_or_F_const  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* select_fetch_first_value: '-' I_or_F_const  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* I_or_F_const: Iconst  */
#line 789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* I_or_F_const: FCONST  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* row_or_rows: ROW  */
#line 794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* row_or_rows: ROWS  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* first_or_next: FIRST_P  */
#line 798 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* first_or_next: NEXT  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* group_clause: GROUP_P BY ALL  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* group_clause: %empty  */
#line 830 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* group_by_list: group_by_item  */
#line 834 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* group_by_list: group_by_list ',' group_by_item  */
#line 835 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* group_by_list_opt_comma: group_by_list  */
#line 839 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* group_by_list_opt_comma: group_by_list ','  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* group_by_item: a_expr  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* group_by_item: empty_grouping_set  */
#line 845 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* group_by_item: cube_clause  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* group_by_item: rollup_clause  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* group_by_item: grouping_sets_clause  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* empty_grouping_set: '(' ')'  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* grouping_or_grouping_id: GROUPING  */
#line 886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* grouping_or_grouping_id: GROUPING_ID  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* having_clause: HAVING a_expr  */
#line 891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* having_clause: %empty  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* qualify_clause: QUALIFY a_expr  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* qualify_clause: %empty  */
#line 897 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* for_locking_clause: for_locking_items  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* for_locking_clause: FOR READ_P ONLY  */
#line 902 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* opt_for_locking_clause: for_locking_clause  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* opt_for_locking_clause: %empty  */
#line 907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* for_locking_items: for_locking_item  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* for_locking_items: for_locking_items for_locking_item  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* for_locking_strength: FOR UPDATE  */
#line 927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* for_locking_strength: FOR SHARE  */
#line 929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* for_locking_strength: FOR KEY SHARE  */
#line 930 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* locked_rels_list: OF qualified_name_list  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* locked_rels_list: %empty  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* opt_nowait_or_skip: NOWAIT  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 26002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 26008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* opt_nowait_or_skip: %empty  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 26014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* values_clause_opt_comma: values_clause  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* values_clause_opt_comma: values_clause ','  */
#line 967 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* from_clause: FROM from_list_opt_comma  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* from_clause: %empty  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* from_list: table_ref  */
#line 985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* from_list: from_list ',' table_ref  */
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* from_list_opt_comma: from_list  */
#line 990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 26076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* from_list_opt_comma: from_list ','  */
#line 991 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 998 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 26117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 26129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1029 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 26142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 26155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* table_ref: joined_table  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 26163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 26172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* table_ref: GRAPH_TABLE GraphTableStmt  */
#line 1056 "third_party/libpg_query/grammar/statements/select.y"
                    {
                            (yyval.node) = (PGNode *) (yyvsp[0].node);
                    }
#line 26180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1060 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 26214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* opt_pivot_group_by: %empty  */
#line 1083 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 26220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 26226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1087 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_include_nulls: %empty  */
#line 1088 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 26238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* pivot_header: d_expr  */
#line 1109 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1122 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 26294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* pivot_value_list: pivot_value  */
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* unpivot_header: ColIdOrString  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 26322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1147 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 26333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* unpivot_value_list: unpivot_value  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* joined_table: '(' joined_table ')'  */
#line 1185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 26357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 26462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 26480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 26497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1297 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 26516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1312 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 26536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* alias_clause: AS ColIdOrString  */
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1342 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 26565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* alias_clause: ColId  */
#line 1348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* opt_alias_clause: alias_clause  */
#line 1354 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 26580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_alias_clause: %empty  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* func_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1368 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 26622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* func_alias_clause: %empty  */
#line 1384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 26630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* join_type: FULL join_outer  */
#line 1389 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* join_type: LEFT join_outer  */
#line 1390 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* join_type: RIGHT join_outer  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* join_type: SEMI  */
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* join_type: ANTI  */
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* join_type: INNER_P  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* join_outer: OUTER_P  */
#line 1398 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* join_outer: %empty  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1411 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* join_qual: ON a_expr  */
#line 1412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* relation_expr: qualified_name  */
#line 1418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* relation_expr: qualified_name '*'  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* relation_expr: ONLY qualified_name  */
#line 1432 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* func_table: func_expr_windowless opt_ordinality  */
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1482 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1495 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* rowsfrom_list: rowsfrom_item  */
#line 1499 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1500 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* opt_col_def_list: %empty  */
#line 1504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* opt_ordinality: %empty  */
#line 1508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* where_clause: WHERE a_expr  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* where_clause: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* TableFuncElementList: TableFuncElement  */
#line 1520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_collate_clause: COLLATE any_name  */
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_collate_clause: %empty  */
#line 1558 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* colid_type_list: ColId Typename  */
#line 1571 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1574 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* opt_Typename: Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* opt_Typename: %empty  */
#line 1582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* Typename: SimpleTypename opt_array_bounds  */
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1602 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* Typename: SimpleTypename ARRAY  */
#line 1608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1613 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 26981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1630 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 26992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 26998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1642 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* opt_array_bounds: %empty  */
#line 1644 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 27010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* SimpleTypename: GenericType  */
#line 1648 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* SimpleTypename: Numeric  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* SimpleTypename: Bit  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* SimpleTypename: Character  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* SimpleTypename: ConstDatetime  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* SimpleTypename: ConstInterval opt_interval  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 27049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* ConstTypename: Numeric  */
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* ConstTypename: ConstBit  */
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* ConstTypename: ConstCharacter  */
#line 1680 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* ConstTypename: ConstDatetime  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 27083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* GenericType: type_name_token opt_type_modifiers  */
#line 1693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* opt_type_modifiers: %empty  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* Numeric: INT_P  */
#line 1714 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* Numeric: INTEGER  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* Numeric: SMALLINT  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* Numeric: BIGINT  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* Numeric: REAL  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* Numeric: FLOAT_P opt_float  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* Numeric: DOUBLE_P PRECISION  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* Numeric: DEC opt_type_modifiers  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* Numeric: BOOLEAN_P  */
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* opt_float: '(' Iconst ')'  */
#line 1774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 27232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* opt_float: %empty  */
#line 1795 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* Bit: BitWithLength  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* Bit: BitWithoutLength  */
#line 1809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* ConstBit: BitWithLength  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* ConstBit: BitWithoutLength  */
#line 1821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* BitWithoutLength: BIT opt_varying  */
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* Character: CharacterWithLength  */
#line 1862 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* Character: CharacterWithoutLength  */
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* ConstCharacter: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 27328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* ConstCharacter: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 27343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1889 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 27353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* CharacterWithoutLength: character  */
#line 1897 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* character: CHARACTER opt_varying  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* character: CHAR_P opt_varying  */
#line 1909 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* character: VARCHAR  */
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 27383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* character: NATIONAL CHARACTER opt_varying  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* character: NATIONAL CHAR_P opt_varying  */
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* character: NCHAR opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 27401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* opt_varying: VARYING  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 27407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* opt_varying: %empty  */
#line 1922 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1947 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* ConstDatetime: TIME opt_timezone  */
#line 1956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* ConstInterval: INTERVAL  */
#line 1967 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 27472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 27478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 27484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* opt_timezone: %empty  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 27490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* opt_interval: year_keyword  */
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 27496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* opt_interval: month_keyword  */
#line 2007 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 27502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* opt_interval: day_keyword  */
#line 2009 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 27508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* opt_interval: hour_keyword  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 27514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* opt_interval: minute_keyword  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 27520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* opt_interval: second_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 27526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* opt_interval: millisecond_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* opt_interval: microsecond_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 27538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* opt_interval: year_keyword TO month_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 27547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* opt_interval: day_keyword TO hour_keyword  */
#line 2026 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 27556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* opt_interval: day_keyword TO minute_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* opt_interval: day_keyword TO second_keyword  */
#line 2037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2044 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* opt_interval: hour_keyword TO second_keyword  */
#line 2049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_interval: minute_keyword TO second_keyword  */
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_interval: %empty  */
#line 2060 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* a_expr: c_expr  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* a_expr: a_expr TYPECAST Typename  */
#line 2094 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* a_expr: a_expr COLLATE any_name  */
#line 2096 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* a_expr: '+' a_expr  */
#line 2119 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* a_expr: '-' a_expr  */
#line 2121 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* a_expr: a_expr '+' a_expr  */
#line 2123 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* a_expr: a_expr '-' a_expr  */
#line 2125 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* a_expr: a_expr '*' a_expr  */
#line 2127 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* a_expr: a_expr '/' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* a_expr: a_expr '%' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* a_expr: a_expr '^' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* a_expr: a_expr POWER_OF a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* a_expr: a_expr '<' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* a_expr: a_expr '>' a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* a_expr: a_expr '=' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* a_expr: a_expr qual_Op a_expr  */
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* a_expr: qual_Op a_expr  */
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* a_expr: a_expr qual_Op  */
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* a_expr: a_expr AND a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* a_expr: a_expr OR a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* a_expr: NOT a_expr  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* a_expr: NOT_LA a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* a_expr: a_expr GLOB a_expr  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* a_expr: a_expr LIKE a_expr  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* a_expr: a_expr ILIKE a_expr  */
#line 2196 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* a_expr: a_expr IS NULL_P  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* a_expr: a_expr ISNULL  */
#line 2271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* a_expr: a_expr IS NOT NULL_P  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* a_expr: a_expr NOT NULL_P  */
#line 2287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27968 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* a_expr: a_expr NOTNULL  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2303 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 27992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2311 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 28000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* a_expr: row OVERLAPS row  */
#line 2315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* a_expr: a_expr IS TRUE_P  */
#line 2331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* a_expr: a_expr IS FALSE_P  */
#line 2347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* a_expr: a_expr IS UNKNOWN  */
#line 2363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 28080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2371 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 28092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2403 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 28160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 28172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* a_expr: a_expr IN_P in_expr  */
#line 2427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 28196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 28222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 28237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 28248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* a_expr: DEFAULT  */
#line 2487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 28278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 28290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* b_expr: c_expr  */
#line 2537 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* b_expr: b_expr TYPECAST Typename  */
#line 2539 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 28315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* b_expr: '+' b_expr  */
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* b_expr: '-' b_expr  */
#line 2543 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* b_expr: b_expr '+' b_expr  */
#line 2545 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* b_expr: b_expr '-' b_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* b_expr: b_expr '*' b_expr  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* b_expr: b_expr '/' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* b_expr: b_expr '%' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* b_expr: b_expr '^' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* b_expr: b_expr POWER_OF b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* b_expr: b_expr '<' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* b_expr: b_expr '>' b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* b_expr: b_expr '=' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* b_expr: b_expr qual_Op b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* b_expr: qual_Op b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* b_expr: b_expr qual_Op  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 28437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 28445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 28461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* c_expr: row  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 28486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* d_expr: columnref  */
#line 2623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* d_expr: AexprConst  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* d_expr: '#' ICONST  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* d_expr: '$' named_param  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 28526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* d_expr: list_comprehension  */
#line 2640 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 28534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* d_expr: ARRAY select_with_parens  */
#line 2644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* d_expr: case_expr  */
#line 2660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* d_expr: select_with_parens  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* d_expr: select_with_parens indirection  */
#line 2673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 28608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* d_expr: EXISTS select_with_parens  */
#line 2697 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2708 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* indirection_expr: '?'  */
#line 2719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* indirection_expr: PARAM  */
#line 2723 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* indirection_expr: '(' a_expr ')'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* indirection_expr: func_expr  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* func_application: func_name '(' ')'  */
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 28721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2772 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2783 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2803 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* func_expr: func_expr_common_subexpr  */
#line 2839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* func_expr_windowless: func_application  */
#line 2849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2864 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2866 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2868 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2881 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 28888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 28931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 28942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 28955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 28974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* within_group_clause: %empty  */
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* filter_clause: %empty  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* export_clause: EXPORT_STATE  */
#line 2982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 29010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* export_clause: %empty  */
#line 2983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 29016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* window_clause: WINDOW window_definition_list  */
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* window_clause: %empty  */
#line 2991 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* window_definition_list: window_definition  */
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 29034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 29040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* window_definition: ColId AS window_specification  */
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 29050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* over_clause: OVER window_specification  */
#line 3010 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 29056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* over_clause: OVER ColId  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 29073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* over_clause: %empty  */
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 29097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* opt_existing_window_name: ColId  */
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_existing_window_name: %empty  */
#line 3056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 29109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* opt_partition_clause: %empty  */
#line 3060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* opt_frame_clause: RANGE frame_extent  */
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 29131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_frame_clause: ROWS frame_extent  */
#line 3078 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 29141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_frame_clause: %empty  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* frame_extent: frame_bound  */
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 29174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 29215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* frame_bound: CURRENT_P ROW  */
#line 3172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* frame_bound: a_expr PRECEDING  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* frame_bound: a_expr FOLLOWING  */
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 29275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* qualified_row: ROW '(' ')'  */
#line 3209 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* row: qualified_row  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 29293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* row: '(' expr_list ',' a_expr ')'  */
#line 3213 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 29299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3217 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 29312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* dict_arguments: dict_arg  */
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3228 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* dict_arguments_opt_comma: dict_arguments  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* sub_type: ANY  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* sub_type: SOME  */
#line 3238 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 29348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* sub_type: ALL  */
#line 3239 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 29354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* all_Op: Op  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* all_Op: MathOp  */
#line 3243 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 29366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* MathOp: '+'  */
#line 3246 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 29372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* MathOp: '-'  */
#line 3247 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 29378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* MathOp: '*'  */
#line 3248 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 29384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* MathOp: '/'  */
#line 3249 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 29390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* MathOp: INTEGER_DIVISION  */
#line 3250 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 29396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* MathOp: '%'  */
#line 3251 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 29402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* MathOp: '^'  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 29408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* MathOp: POWER_OF  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 29414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* MathOp: '<'  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 29420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* MathOp: '>'  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 29426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* MathOp: '='  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* MathOp: LESS_EQUALS  */
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* MathOp: GREATER_EQUALS  */
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* MathOp: NOT_EQUALS  */
#line 3259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* qual_Op: Op  */
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* qual_all_Op: all_Op  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3272 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* subquery_Op: all_Op  */
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* subquery_Op: LIKE  */
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* subquery_Op: NOT_LA LIKE  */
#line 3283 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* subquery_Op: GLOB  */
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* subquery_Op: NOT_LA GLOB  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* subquery_Op: ILIKE  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* subquery_Op: NOT_LA ILIKE  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* any_operator: all_Op  */
#line 3305 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* any_operator: ColId '.' any_operator  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* c_expr_list: c_expr  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* c_expr_list_opt_comma: c_expr_list  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* expr_list: a_expr  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* expr_list: expr_list ',' a_expr  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* expr_list_opt_comma: expr_list  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* expr_list_opt_comma: expr_list ','  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* opt_expr_list_opt_comma: %empty  */
#line 3361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* func_arg_list: func_arg_expr  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* func_arg_expr: a_expr  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* type_list: Typename  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* type_list: type_list ',' Typename  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* extract_list: extract_arg FROM a_expr  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* extract_list: %empty  */
#line 3412 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* extract_arg: IDENT  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* extract_arg: year_keyword  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* extract_arg: month_keyword  */
#line 3421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* extract_arg: day_keyword  */
#line 3422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* extract_arg: hour_keyword  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* extract_arg: minute_keyword  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* extract_arg: second_keyword  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* extract_arg: millisecond_keyword  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* extract_arg: microsecond_keyword  */
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* extract_arg: Sconst  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* overlay_placing: PLACING a_expr  */
#line 3450 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* position_list: b_expr IN_P b_expr  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 29778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* position_list: %empty  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* substr_list: a_expr substr_from substr_for  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* substr_list: a_expr substr_for substr_from  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 29801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* substr_list: a_expr substr_from  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* substr_list: a_expr substr_for  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 29828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* substr_list: expr_list  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* substr_list: %empty  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* substr_from: FROM a_expr  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* substr_for: FOR a_expr  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 29860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* trim_list: FROM expr_list_opt_comma  */
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* trim_list: expr_list_opt_comma  */
#line 3518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* in_expr: select_with_parens  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 29883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 29889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 29903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* when_clause_list: when_clause  */
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* when_clause_list: when_clause_list when_clause  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 29927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* case_default: ELSE a_expr  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* case_default: %empty  */
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* case_arg: a_expr  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* case_arg: %empty  */
#line 3573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* columnref: ColId  */
#line 3577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 29959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* columnref: ColId indirection  */
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 29967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* indirection_el: '.' attr_name  */
#line 3588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 29975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* indirection_el: '[' a_expr ']'  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* opt_slice_bound: a_expr  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 30005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_slice_bound: %empty  */
#line 3611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 30011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* indirection: indirection_el  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 30017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* indirection: indirection indirection_el  */
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* opt_indirection: %empty  */
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_indirection: opt_indirection indirection_el  */
#line 3621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* opt_func_arguments: %empty  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 30041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* opt_func_arguments: '(' ')'  */
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 30047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 30066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* extended_indirection_el: '[' a_expr ']'  */
#line 3641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3649 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 30090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* opt_extended_indirection: %empty  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 30096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* opt_target_list_opt_comma: %empty  */
#line 3682 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 30114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* target_list: target_el  */
#line 3686 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 30120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* target_list: target_list ',' target_el  */
#line 3687 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 30126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* target_list_opt_comma: target_list  */
#line 3691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* target_list_opt_comma: target_list ','  */
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* target_el: a_expr AS ColLabelOrString  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 30150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* target_el: a_expr IDENT  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 30162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* target_el: a_expr  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 30174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* except_list: EXCLUDE ColId  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* opt_except_list: except_list  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* opt_except_list: %empty  */
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* replace_list_el: a_expr AS ColId  */
#line 3737 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 30204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* replace_list: replace_list_el  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* replace_list: replace_list ',' replace_list_el  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 30216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* replace_list_opt_comma: replace_list  */
#line 3746 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* replace_list_opt_comma: replace_list ','  */
#line 3747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_replace_list: REPLACE replace_list_el  */
#line 3751 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 30240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* opt_replace_list: %empty  */
#line 3752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 30246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* qualified_name_list: qualified_name  */
#line 3762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* qualified_name: ColIdOrString  */
#line 3775 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 30266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* qualified_name: ColId indirection  */
#line 3779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 30296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* name_list: name  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* name_list: name_list ',' name  */
#line 3809 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* name_list_opt_comma: name_list  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* name_list_opt_comma: name_list ','  */
#line 3815 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* name: ColIdOrString  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* attr_name: ColLabel  */
#line 3825 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* func_name: function_name_token  */
#line 3836 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* func_name: ColId indirection  */
#line 3839 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* AexprConst: Iconst  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* AexprConst: FCONST  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* AexprConst: Sconst opt_indirection  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* AexprConst: BCONST  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* AexprConst: XCONST  */
#line 3874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* AexprConst: func_name Sconst  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3890 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* AexprConst: ConstTypename Sconst  */
#line 3928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3932 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3936 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* AexprConst: TRUE_P  */
#line 3944 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* AexprConst: FALSE_P  */
#line 3948 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* AexprConst: NULL_P  */
#line 3952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* Iconst: ICONST  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* Sconst: SCONST  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* ColId: IDENT  */
#line 3974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* ColId: pgq_unreserved_keyword  */
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
                                                    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* ColId: unreserved_keyword  */
#line 3976 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* ColId: col_name_keyword  */
#line 3977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* ColIdOrString: ColId  */
#line 3980 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* ColIdOrString: SCONST  */
#line 3981 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* type_function_name: IDENT  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* type_function_name: unreserved_keyword  */
#line 3988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* type_function_name: type_func_name_keyword  */
#line 3989 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* function_name_token: IDENT  */
#line 3992 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* function_name_token: unreserved_keyword  */
#line 3993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* function_name_token: func_name_keyword  */
#line 3994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* type_name_token: IDENT  */
#line 3997 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* type_name_token: unreserved_keyword  */
#line 3998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* type_name_token: type_name_keyword  */
#line 3999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* any_name: ColId  */
#line 4002 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* any_name: ColId attrs  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* attrs: '.' attr_name  */
#line 4007 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* attrs: attrs '.' attr_name  */
#line 4009 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* opt_name_list: %empty  */
#line 4014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* ColLabel: IDENT  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* ColLabel: other_keyword  */
#line 4026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* ColLabel: unreserved_keyword  */
#line 4027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* ColLabel: reserved_keyword  */
#line 4028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* ColLabelOrString: ColLabel  */
#line 4031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* ColLabelOrString: SCONST  */
#line 4032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* named_param: IDENT  */
#line 4035 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 30701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 30725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 30809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 30815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 30887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 30893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 30923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 30929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 31000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 31013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 31047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 31077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 31123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 31134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 31140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 31146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 31152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 31158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 31164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 31182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 31202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 31210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 31216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 31222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 31228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 31234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 31240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 31254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 31402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 31506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 31517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 31581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 31607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 31613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 31619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 31625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 31631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 31645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 31669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 31709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1545: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 31728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1546: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1547: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1548: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 31751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1549: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1550: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 31763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 31831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 31837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 31849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 31855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 31867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 31878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 31884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 31895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 31906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1570: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1571: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1572: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1573: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1576: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 32002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1577: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1578: /* table_id: ColId  */
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 32014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1579: /* table_id: table_id '.' ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 32020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1580: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 32030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1581: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1582: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1583: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 32078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1584: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1585: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 32120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1586: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1587: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 32132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1588: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 32138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1589: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 32144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1590: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1591: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1592: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1593: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1594: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1595: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1596: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32231 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 85 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
