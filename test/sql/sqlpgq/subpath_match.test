# name: test/sql/sqlpgq/basic_match.test
# group: [sqlpgq]

require sqlpgq

statement ok
CREATE TABLE Student(id BIGINT, name VARCHAR);

statement ok
CREATE TABLE know(src BIGINT, dst BIGINT, id BIGINT);

statement ok
CREATE TABLE School(school_name VARCHAR, school_id BIGINT, school_kind BIGINT);

statement ok
INSERT INTO Student VALUES (0, 'Daniel'), (1, 'Tavneet'), (2, 'Gabor'), (3, 'Peter'), (4, 'David');

statement ok
INSERT INTO know VALUES (0,1, 10), (0,2, 11), (0,3, 12), (3,0, 13), (1,2, 14), (1,3, 15), (2,3, 16), (4,3, 17);

statement ok
CREATE PROPERTY GRAPH pg
VERTEX TABLES (
    Student PROPERTIES ( id, name ) LABEL Person
    )
EDGE TABLES (
    know    SOURCE KEY ( src ) REFERENCES Student ( id )
            DESTINATION KEY ( dst ) REFERENCES Student ( id )
            PROPERTIES ( id ) LABEL Knows
    );

#query II
#SELECT study.a_id, study.name
#FROM GRAPH_TABLE (pg,
#    MATCH
#    (a:Person WHERE a.id = 0)
#    COLUMNS (a.id as a_id, a.name)
#    ) study
#----
#0	Daniel

#query II
#SELECT study.a_id, study.b_id
#FROM GRAPH_TABLE (pg,
#    MATCH
#    (a:Person)-[k:Knows WHERE k.id = 10]->(b:Person)
#    COLUMNS (a.id as a_id, b.id as b_id)
#    ) study
#----
#0	1

#query II
#WITH cte1 AS (
#    SELECT  CREATE_CSR_EDGE(
#            0,
#            (SELECT count(c.id) as vcount FROM Student c),
#            CAST (
#                (SELECT sum(CREATE_CSR_VERTEX(
#                            0,
#                            (SELECT count(c.id) as vcount FROM Student c),
#                            sub.dense_id,
#                            sub.cnt)
#                            )
#                FROM (
#                    SELECT c.rowid as dense_id, count(t.src) as cnt
#                    FROM Student c
#                    LEFT JOIN  Know t ON t.src = c.id
#                    GROUP BY c.rowid) sub
#                )
#            AS BIGINT),
#            src.rowid,
#            dst.rowid,
#            t.rowid) as temp,
#            src.rowid as src_row,
#            dst.rowid as dst_row
#    FROM Know t
#    JOIN Student src ON t.src = src.id
#    JOIN Student dst ON t.dst = dst.id
#) SELECT a.id AS c1id, b.id AS c2id
#FROM cte1, Know t
#  JOIN Student a ON t.src = a.id
#  JOIN Student b ON t.dst = b.id
#WHERE
#    a.rowid = cte1.src_row
#    AND b.rowid = cte1.dst_row
#    AND cte1.temp >= iterativelength(0, (SELECT count(c.id) FROM Student c), cte1.src_row, cte1.dst_row) ;
#----
#0	1
#0	2
#0	3
#3	0
#1	2
#1	3
#2	3
#4	3

#    AND cte1.temp >= reachability(0, true, (SELECT count(cte1.temp) FROM cte1) + (SELECT count(c.id) FROM Student c), cte1.src_row, cte1.dst_row);



query II
SELECT study.srcid, study.dstid
FROM GRAPH_TABLE (pg,
    MATCH
    (a:Person)-[k:Knows]-> *(b:Person)
    COLUMNS (a.id as a_id, b.id as b_id)
    ) study
----
0	1
