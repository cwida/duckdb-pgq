require sqlpgq

statement ok
CREATE TABLE Nodes(cid bigint not null);

statement ok
CREATE TABLE Edges(from_id bigint, to_id bigint);

statement ok
INSERT INTO Nodes VALUES (0), (1), (2), (3), (4);

statement ok 
INSERT INTO Edges VALUES (0,1), (1,2), (1,3), (3,2), (3,4);

statement ok
INSERT INTO Edges SELECT to_id, from_id FROM Edges;

statement ok
CREATE TABLE src_dst(id int, v_size bigint, src bigint, dst bigint);

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Nodes c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Nodes c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Nodes c
    LEFT JOIN  Edges t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid))
FROM
  Edges t
  JOIN Nodes src ON t.from_id = src.cid
  JOIN Nodes dst ON t.to_id = dst.cid

statement ok
INSERT INTO src_dst VALUES (0, 5, 0, 4), (0, 5, 2, 1), (0, 5, 0, 3), (0, 5, 4, 2), (0, 5, NULL, 0), (0, 5, 0, 0);


query T
SELECT iterativelengthbidirectional(0, v_size, src, dst) FROM src_dst;
----
3
1
2
2
NULL
0

#statement ok
#INSERT INTO src_dst VALUES (0, 5, 0, 10);

#statement error
#SELECT iterativelengthbidirectional(0, v_size, src, dst) FROM src_dst;

statement ok
pragma delete_csr=0;

statement ok
CREATE TABLE person(id BIGINT PRIMARY KEY);

statement ok
CREATE TABLE person_knows_person(person1id BIGINT NOT NULL, person2id BIGINT NOT NULL, weight bigint);

statement ok
COPY person_knows_person FROM 'data/sqlpgq-testing/snb/sf1/person_knows_person.csv' (FORMAT 'csv', DELIMITER ',');

statement ok
insert into person_knows_person select person2id, person1id, weight from person_knows_person

statement ok
COPY person FROM 'data/sqlpgq-testing/snb/sf1/person.csv' (FORMAT 'csv', DELIMITER ',');

statement ok
create table parameters (src bigint, dst bigint);

statement ok
create temp table all_options
(
    Person1id bigint,
    Person1rowid bigint,
    Person2id bigint,
    Person2rowid bigint
);

statement ok
copy parameters from 'data/sqlpgq-testing/parameters/q13.csv' (DELIMITER '|', HEADER);


statement ok
INSERT INTO all_options(
      SELECT
        s1.id AS person1id, s1.rowid as person1rowid,
        s2.id AS person2id, s2.rowid as person2rowid
      FROM parameters
      JOIN Person s1 ON s1.id = parameters.src
      JOIN Person s2 ON s2.id = parameters.dst
      LIMIT 10
);

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(p.id) as vcount FROM person p),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.id) as vcount FROM person p),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT p.rowid as dense_id, count(k.person1id) as cnt
    FROM person p
    LEFT JOIN  person_knows_person k ON k.person1id = p.id
    GROUP BY p.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid))
FROM
  person_knows_person k
  JOIN person src ON k.person1id = src.id
  JOIN person dst ON k.person2id = dst.id;



query III nosort r43
SELECT s.person1id, s.person2id, iterativelength(0, (select count(*) from person), s.person1rowid, s.person2rowid)
FROM all_options s
order by s.person1id, s.person2id;

query III nosort r43
SELECT s.person1id, s.person2id, iterativelength2(0, (select count(*) from person), s.person1rowid, s.person2rowid)
FROM all_options s
order by s.person1id, s.person2id;


query III nosort r43
SELECT s.person1id, s.person2id, iterativelengthbidirectional(0, (select count(*) from person), s.person1rowid, s.person2rowid)
FROM all_options s
order by s.person1id, s.person2id;

query III nosort r43
SELECT s.person1id, s.person2id, bidirectionaliterativelength(0, (select count(*) from person), s.person1rowid, s.person2rowid)
FROM all_options s
order by s.person1id, s.person2id;

