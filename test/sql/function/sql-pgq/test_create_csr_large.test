require sqlpgq

statement ok
create table person as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person/part-00000-d1080d9d-1782-43d9-9819-774e8996b943-c000.csv');

statement ok
create table comment as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Comment/part-00001-47198ecc-269c-4c7f-99e0-26f1f3a15edd-c000.csv');

statement ok
create table post as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Post/part-00000-38b0ed70-f437-427a-9ddf-96c4c609a6ee-c000.csv');

statement ok
create table person_knows_person as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00000-ec450818-55f1-47df-90a7-b73b5c67649c-c000.csv');

statement ok
insert into person_knows_person (select creationdate, person2id, person1id from person_knows_person);

statement ok
CREATE TEMP TABLE Message as (SELECT p.id as messageid, NULL as ParentMessageId, p.CreatorPersonId
     FROM Post p
     UNION ALL
     SELECT c.id                                    as messageid,
            coalesce(ParentPostId, ParentCommentId) as ParentMessageId,
            c.CreatorPersonid
     FROM comment c);



statement ok
CREATE TEMP TABLE interactions as (select least(m1.creatorpersonid, m2.creatorpersonid) as src,
                                         greatest(m1.creatorpersonid, m2.creatorpersonid) as dst,
                                         count(*) as c
                                  from Person_knows_person pp, Message m1, Message m2
                                  where pp.person1id = m1.creatorpersonid and pp.person2id = m2.creatorpersonid and m1.parentmessageid = m2.messageid and m1.creatorpersonid <> m2.creatorpersonid
                                  group by src, dst
                                  order by src, dst);

statement ok
CREATE TEMP TABLE weights as (select src as person1id, dst as person2id, weight from (
                            select src, dst, 1.0::double precision / c as weight from interactions
                            union all
                            select dst, src, 1.0::double precision / c as weight from interactions)
                        order by src, dst);

statement ok
CREATE TEMP TABLE PersonInteractions AS (SELECT DISTINCT Person1id as id
                                    FROM ((SELECT Person1id
                                           FROM weights)
                                          UNION ALL
                                          (SELECT Person2id AS Person1id
                                           FROM weights))
                                    ORDER BY id);

query II
select e.ecount, v.vcount
FROM
  (select count(w.Person1id) as ecount FROM weights w) e,
 (SELECT count(p.id) as vcount FROM PersonInteractions p) v;
----
26062	1412

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM PersonInteractions c
    LEFT JOIN  weights t ON t.person1id = c.id
    GROUP BY c.rowid
) sub, (SELECT count(c.id) as vcount FROM PersonInteractions c) v


statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM PersonInteractions c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM PersonInteractions c),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM PersonInteractions c
    LEFT JOIN  weights t ON t.person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.weight))
FROM
  weights t
  JOIN PersonInteractions src ON t.person1id = src.id
  JOIN PersonInteractions dst ON t.person2id = dst.id



#query I
#SELECT DISTINCT CREATE_CSR(
#               0,
#               v.vcount,
#               r.ecount,
#               r.src,
#               r.dst,
#               r.weight
#           ) AS numEdges
#FROM (SELECT count(p.id) as vcount FROM PersonInteractions p) v,
#     (SELECT src.rowid as src, dst.rowid as dst, t.weight as weight, count(src.rowid) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as ecount
#      FROM weights t
#           JOIN PersonInteractions src ON t.Person1id = src.id
#           JOIN PersonInteractions dst ON t.Person2id = dst.id) r;
#----
#{'id': 0, 'vertices': 1412, 'edges': 26062, 'weighted': 1}

statement ok
pragma set_lane_limit=32;

statement ok
pragma threads=1;

query IIIII
select s.id, s.locationcityid, s2.id, s2.locationcityid, cheapest_path(0, (select count(*) from PersonInteractions), s.rowid, s2.rowid) as weight from
    (select pi.id, pi.rowid, p.locationcityid from personinteractions pi JOIN person p on p.id = pi.id where p.locationcityid = 117) s,
    (select pi.id, pi.rowid, p.locationcityid from personinteractions pi JOIN person p on p.id = pi.id where p.locationcityid = 659) s2;
----
2199023257136	117	6597069767597	659	0.298723
15393162789031	117	6597069767597	659	0.214939
2199023257136	117	32985348834574	659	0.369066
15393162789031	117	32985348834574	659	0.254167
24189255811413	117	6597069767597	659	0.242857
24189255811413	117	32985348834574	659	0.320489