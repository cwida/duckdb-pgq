require sqlpgq

statement ok
pragma enable_verification

statement ok
CREATE TABLE person (id bigint);

statement ok
CREATE TABLE knows (source bigint, target bigint, weight bigint DEFAULT 1);

statement ok
copy knows from '/home/daniel/Documents/Programming/duckdb-pgq/data/csv/sf0.1/Person_knows_Person_weighted.csv' (HEADER, DELIMITER '|');

statement ok
insert into knows select target, source, weight from knows;

statement ok
copy person from '/home/daniel/Documents/Programming/duckdb-pgq/data/csv/sf0.1/Person.csv' (HEADER);

statement ok
create table hops (source bigint, target bigint, hops int);

statement ok
copy hops from '/home/daniel/Documents/Programming/duckdb-pgq/data/csv/sf0.1/shortest_unweighted_pathsf0.1_comma.csv' (DELIMITER ',', HEADER);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT p.rowid as dense_id, count(k.source) as cnt
    FROM person p
    LEFT JOIN  knows k ON k.source = p.id
    GROUP BY p.rowid
) sub,  (SELECT count(p.id) as vcount FROM person p) v;

statement ok
SELECT min(CREATE_CSR_EDGE_AND_WEIGHT(0, (SELECT count(p.id) as vcount FROM person p),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.id) as vcount FROM person p),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT p.rowid as dense_id, count(k.source) as cnt
    FROM person p
    LEFT JOIN  knows k ON k.source = p.id
    GROUP BY p.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, k.weight ))
FROM
  knows k
  JOIN person src ON k.source = src.id
  JOIN person dst ON k.target = dst.id;


statement ok
CREATE TABLE src_dest(id int default 0, v_size bigint, src bigint, dst bigint);

statement ok
create table hops_rowid as select p.rowid as src_rowid, p2.rowid as dest_rowid, h.hops as hops from hops h JOIN person p on p.id = h.source JOIN person p2 on p2.id = h.target;

statement ok
insert into src_dest (src, dst) select src_rowid, dest_rowid from hops_rowid h;

statement ok
update src_dest s set v_size = (select count(*) from person p) where v_size is NULL;

#statement ok
#SELECT min(CREATE_CSR_WEIGHT(0, (SELECT count(p.id) as vcount FROM person p),
#CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.id) as vcount FROM person p),
#sub.dense_id, sub.cnt )) AS numEdges
#FROM (
#    SELECT p.rowid as dense_id, count(k.source) as cnt
#    FROM person p
#    LEFT JOIN  knows k ON k.source = p.id
#    GROUP BY p.rowid
#) sub) AS BIGINT),
#src.rowid, k.weight))
#FROM
#  knows k
#  JOIN person src ON k.source = src.id
#  JOIN person dst ON k.target = dst.id;


query III
SELECT p.id, p2.id, cheapest_path(s.id, v_size, s.src, s.dst) FROM src_dest s
LEFT JOIN person p ON s.src = p.rowid
LEFT JOIN person p2 ON s.dst = p2.rowid
order by p.id, p2.id;
----
772	2199023257212	2
772	6597069767744	3
772	6597069768352	2
772	10995116277916	2
772	15393162790380	3
772	17592186045248	3
772	19791209301288	3
772	28587302322876	2
772	28587302323188	3
772	28587302323208	3
2199023256472	2199023257212	2
2199023256472	6597069767744	2
2199023256472	6597069768352	2
2199023256472	10995116277916	3
2199023256472	15393162790380	2
2199023256472	17592186045248	3
2199023256472	19791209301288	3
2199023256472	28587302322876	2
2199023256472	28587302323188	3
2199023256472	28587302323208	3
2199023257100	2199023257212	3
2199023257100	6597069767744	3
2199023257100	6597069768352	3
2199023257100	10995116277916	3
2199023257100	15393162790380	4
2199023257100	17592186045248	2
2199023257100	19791209301288	3
2199023257100	28587302322876	3
2199023257100	28587302323188	3
2199023257100	28587302323208	3
8796093023616	2199023257212	2
8796093023616	6597069767744	3
8796093023616	6597069768352	3
8796093023616	10995116277916	2
8796093023616	15393162790380	3
8796093023616	17592186045248	2
8796093023616	19791209301288	3
8796093023616	28587302322876	3
8796093023616	28587302323188	3
8796093023616	28587302323208	3
13194139534592	2199023257212	3
13194139534592	6597069767744	3
13194139534592	6597069768352	2
13194139534592	10995116277916	2
13194139534592	15393162790380	3
13194139534592	17592186045248	2
13194139534592	19791209301288	3
13194139534592	28587302322876	2
13194139534592	28587302323188	3
13194139534592	28587302323208	3
17592186045004	2199023257212	3
17592186045004	6597069767744	3
17592186045004	6597069768352	3
17592186045004	10995116277916	3
17592186045004	15393162790380	3
17592186045004	17592186045248	2
17592186045004	19791209301288	2
17592186045004	28587302322876	2
17592186045004	28587302323188	3
17592186045004	28587302323208	3
26388279067664	2199023257212	3
26388279067664	6597069767744	3
26388279067664	6597069768352	2
26388279067664	10995116277916	3
26388279067664	15393162790380	3
26388279067664	17592186045248	2
26388279067664	19791209301288	3
26388279067664	28587302322876	3
26388279067664	28587302323188	3
26388279067664	28587302323208	3
28587302322668	2199023257212	2
28587302322668	6597069767744	2
28587302322668	6597069768352	2
28587302322668	10995116277916	3
28587302322668	15393162790380	3
28587302322668	17592186045248	2
28587302322668	19791209301288	3
28587302322668	28587302322876	3
28587302322668	28587302323188	3
28587302322668	28587302323208	3
35184372089012	2199023257212	2
35184372089012	6597069767744	3
35184372089012	6597069768352	2
35184372089012	10995116277916	3
35184372089012	15393162790380	3
35184372089012	17592186045248	3
35184372089012	19791209301288	3
35184372089012	28587302322876	3
35184372089012	28587302323188	2
35184372089012	28587302323208	3

statement ok
1=2