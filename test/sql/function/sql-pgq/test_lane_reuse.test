# name: test/sql/function/sql-pgq/test_lane_reuse.test
# description: Test lane reusing optimization
# group: [sql-pgq]

require sqlpgq

statement ok
create table node (id bigint);

statement ok
insert into node(select * from generate_series(6));

statement ok
create table edge(source bigint, target bigint);

#[0]-->[1]-->[4]--\
#/.\    |    /.\  |
# |     |     |   |
#\./   \./    |   |
#[3]<--[6]---/   [5]
# |    /.\       /.\
# |     |         |
#  \--->[2]<------/

statement ok
insert into edge values
  (0, 1),
  (0, 3),
  (1, 4),
  (1, 6),
  (2, 5),
  (3, 0),
  (3, 2),
  (4, 5),
  (5, 2),
  (6, 2),
  (6, 3),
  (6, 4);


statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(n.id) as vcount FROM node n),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(n.id) as vcount FROM node n),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT n.rowid as dense_id, count(e.source) as cnt
    FROM node n
    LEFT JOIN edge e ON e.source = n.id
    GROUP BY n.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, e.rowid))
FROM
  edge e
  JOIN node src ON e.source = src.id
  JOIN node dst ON e.target = dst.id

statement ok
CREATE TABLE src_dst(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dst VALUES(0, 7, 0, 5), (0, 7, 1, 5), (0, 7, 1, 6), (0, 7, 1, 1), (0, 7, 1, 0), (0, 7, 3, 0), (0, 7, 0, 2), (0, 7, 0, 6);

query IIII
SELECT s.src, s.dst, iterativelength(0, v_size, s.src, s.dst), iterativelengthlanereuse(0, v_size, s.src, s.dst) FROM src_dst s
----
0	5	3	3
1	5	2	2
1	6	1	1
1	1	0	0
1	0	3	3
3	0	1	1
0	2	2	2
0	6	2	2

