
require sqlpgq

statement ok
create table person as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person/part-00001-354b330a-be7e-4581-99ab-dfe73df59470-c000.csv');

statement ok
insert into person (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person/part-00000-354b330a-be7e-4581-99ab-dfe73df59470-c000.csv');

statement ok
create table person_knows_person as select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00001-97235d24-1e63-44da-a16e-fbec913d8097-c000.csv') ;

statement ok
insert into person_knows_person (select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00000-97235d24-1e63-44da-a16e-fbec913d8097-c000.csv', SAMPLE_SIZE=-1));

statement ok
create table person_studyat_university as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_studyAt_University/part-00001-a7960d43-e786-49e2-b86e-f47edafde7fb-c000.csv');

statement ok
insert into person_studyat_university (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_studyAt_University/part-00000-a7960d43-e786-49e2-b86e-f47edafde7fb-c000.csv');

statement ok
CREATE TABLE Person_UniversityKnows_Person AS (SELECT p.id                                     as Person1id,
                                                      p2.id                                    as Person2id,
                                                      min(abs(u.classYear - u2.classYear) + 1) as weight --
                                               FROM Person p
                                                        JOIN Person_knows_Person k on p.id = k.Person1id
                                                        JOIN Person p2 on p2.id = k.Person2id
                                                        JOIN Person_studyAt_University u on p.id = u.PersonId
                                                        JOIN Person_studyAt_University u2 on p2.id = u2.PersonId
                                               WHERE u.UniversityId = u2.UniversityId
                                               GROUP BY p.id, p2.id
                                               ORDER BY p.id, p2.id);

statement ok
CREATE TABLE PersonUniversity AS (SELECT DISTINCT Person1id as id
                                 FROM ((SELECT Person1id
                                        FROM Person_UniversityKnows_Person)
                                       UNION ALL
                                       (SELECT Person2id AS Person1id
                                        FROM Person_UniversityKnows_Person))
                                 ORDER BY id);


statement ok
SELECT DISTINCT CREATE_CSR(
               0,
               v.vcount,
               e.ecount,
               r.src,
               r.dst,
               r.weight
           )
FROM (SELECT count(p.id) as vcount FROM PersonUniversity p) v,
     (select count(t.Person1id) as ecount FROM Person_UniversityKnows_Person t) e,
     (SELECT src.rowid as src, dst.rowid as dst, t.weight as weight
      FROM Person_UniversityKnows_Person t
       JOIN PersonUniversity src ON t.Person1id = src.id
       JOIN PersonUniversity dst ON t.Person2id = dst.id) r;


statement ok
SELECT DISTINCT CREATE_CSR(
               0,
               v.vcount,
               r.ecount,
               r.src,
               r.dst,
               r.weight
           )
FROM (SELECT count(p.id) as vcount FROM PersonUniversity p) v,
     (SELECT src.rowid as src, dst.rowid as dst, t.weight as weight, count(src.rowid) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as ecount
      FROM Person_UniversityKnows_Person t
       JOIN PersonUniversity src ON t.Person1id = src.id
       JOIN PersonUniversity dst ON t.Person2id = dst.id) r;

statement ok
SELECT DISTINCT CREATE_CSR(
               0,
               v.vcount,
               e.ecount,
               r.src,
               r.dst,
               r.weight
           )
FROM (SELECT count(p.id) as vcount FROM PersonUniversity p) v,
     (SELECT count(t.Person1id) as ecount from Person_UniversityKnows_Person t) e,
     (SELECT src.rowid as src, dst.rowid as dst, t.weight as weight
      FROM Person_UniversityKnows_Person t
       JOIN PersonUniversity src ON t.Person1id = src.id
       JOIN PersonUniversity dst ON t.Person2id = dst.id) r;


SELECT sum(CREATE_CSR_VERTEX(
           0,
           v.vcount,
           sub.dense_id,
           sub.cnt
           ))
FROM (SELECT p.rowid as dense_id, count(k.Person1id) as cnt
      FROM PersonUniversity p
       LEFT JOIN Person_UniversityKnows_Person k ON k.Person1id = p.id
      GROUP BY p.rowid) sub,
     (SELECT count(p.id) as vcount FROM PersonUniversity p) v;


SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM PersonUniversity c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM PersonUniversity c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.Person1id) as cnt
    FROM PersonUniversity c
    LEFT JOIN  Person_UniversityKnows_Person t ON t.Person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.weight ))
FROM
  Person_UniversityKnows_Person t
  JOIN PersonUniversity src ON t.Person1id = src.id
  JOIN PersonUniversity dst ON t.Person2id = dst.id;