# name: test/sql/function/sql-pgq/test_msbfs_src_dst.test
# description: Test msbfs threads 
# group: [sql-pgq]

require sqlpgq

# statement ok
# PRAGMA enable_verification;
# statement ok
# PRAGMA threads=2;

# statement ok
# CREATE TABLE Customer(cid bigint not null, name string);

# statement ok
# CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

# # statement ok
# # INSERT INTO Customer SELECT range FROM range(0, 1000);

# statement ok
# INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D'), (202, 'E'), (598, 'F');

# statement ok
# INSERT INTO Transfers VALUES
#   (955, 173, 869, 150),
#   (769, 173, 297, 50),
#   (607, 478, 297, 250),
#   (507, 478, 869, 250),
#   (111, 297, 173, 10),
#   (121, 297, 478, 20),
#   (131, 297, 202, 30),
#   (211, 869, 173, 10),
#   (321, 869, 478, 20),
#   (431, 869, 598, 30),
#   (184, 202, 297, 350),
#   (757, 598, 869, 50);


statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D');

statement ok
INSERT INTO Transfers VALUES
  (955, 173, 478, 150),
  (769, 173, 297, 50),
  (607, 478, 297, 250),
  (184, 297, 869, 350);

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 1), (0, 4, 0, 2), (0, 4, 0, 3),(0, 4, 1, 0), (0, 4, 1, 2), (0, 4, 1, 3), (0, 4, 2, 0),
(0, 4, 2, 1), (0, 4, 2, 3), (0, 4, 3, 0), (0, 4, 3, 1), (0, 4, 3, 2);

statement ok
SELECT DISTINCT CREATE_CSR(
0,
v.vcount,
r.ecount,
r.src,
r.dst
)
FROM
    (SELECT count(c.cid) as vcount FROM Customer c) v,
    (SELECT src.rowid as src, dst.rowid as dst, count(src.rowid) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as ecount
        FROM Transfers t
        JOIN Customer src ON t.from_id = src.cid
        JOIN Customer dst ON t.to_id = dst.cid
        GROUP BY src.rowid, dst.rowid, t.amount) r

statement ok
SELECT DISTINCT CREATE_CSR(
1,
v.vcount,
r.ecount,
r.src,
r.dst
)
FROM
    (SELECT count(c.cid) as vcount FROM Customer c) v,
    (SELECT src.rowid as src, dst.rowid as dst, count(src.rowid) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as ecount
        FROM Transfers t
        JOIN Customer src ON t.from_id = src.cid
        JOIN Customer dst ON t.to_id = dst.cid
        GROUP BY src.rowid, dst.rowid, t.amount) r



query T
SELECT reachability(id, false, v_size, src, dst) FROM src_dest;
----
1
1
1
0
1
1
0
0
1
0
0
0


query T
SELECT shortest_path(0, false, v_size, src, dst) FROM src_dest;
----
1
1
2
NULL
1
2
NULL
NULL
1
NULL
NULL
NULL


statement ok
pragma delete_csr=1

statement ok
pragma delete_csr=0


# statement ok
# CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);


# statement ok
# INSERT INTO Transfers (from_id, to_id, amount) SELECT c1.cid  , c2.cid, 10 FROM Customer c1, Customer c2 ;

# statement ok
# INSERT INTO src_dest (id, v_size, src, dst) VALUES 
#   (0, 6, 0, 3 ),
#   (0, 6, 0, 2),
#   (0, 6, 1, 2),
#   (0, 6, 1, 3),
#   (0, 6, 2, 0),
#   (0, 6, 2, 1),
#   (0, 6, 2, 4),
#   (0, 6, 3, 0),
#   (0, 6, 3, 1),
#   (0, 6, 3, 5),
#   (0, 6, 4, 2),
#   (0, 6, 5, 3);


# query I
# SELECT max(reachability(id, v_size, src, dst)) FROM src_dest ;
# ----
# 1








