# name: test/sql/function/sql-pgq/test_shortest_path.test
# description: Test shortest path function
# group: [sql-pgq]

require sqlpgq

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (353, 'D');

statement ok
INSERT INTO Transfers VALUES
    (955, 197, 201, 100),
    (124, 201, 343, 500),
    (124, 343, 197, 500);

statement ok
insert into transfers select tid, to_id, from_id, amount from transfers;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 2), (0, 4, 1, 2), (0, 4, 3, 0), (0, 4, 0, 1), (0, 4, 0, 0);

query T
SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
----
[0, 2, 2]
[1, 12, 2]
NULL
[0, 1, 1]
[0]

statement ok
INSERT INTO Transfers VALUES
    (123, 343, 353, 100),
    (123, 353, 343, 100);

statement ok
DELETE FROM src_dest;

statement ok
INSERT INTO src_dest VALUES (0, 4, 0, 3);

statement ok
PRAGMA delete_csr=0;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

query T
SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
----
[0, 2, 2, 23, 3]

statement ok
PRAGMA delete_csr=0;

statement ok
DELETE FROM src_dest;

statement ok
DELETE FROM Transfers;

statement ok
INSERT INTO Transfers VALUES
    (124, 197, 343, 500),
    (124, 201, 343, 500),
    (124, 343, 353, 500),

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
INSERT INTO src_dest VALUES
    (0, 4, 0, 3),
    (0, 4, 1, 3)

query T
SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
----
[0, 2, 2, 23, 3]
[1, 12, 2, 23, 3]

statement ok
pragma delete_csr=0;

statement ok
DELETE FROM src_dest;

statement ok
CREATE TABLE person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person.csv') LIMIT 200;

statement ok
CREATE TABLE person_knows_person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person_knows_person.csv')
    WHERE   person1id IN (FROM person)
        AND person2id IN (FROM person);

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM person c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM person c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM person c
    LEFT JOIN person_knows_person t ON t.person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT)))
FROM
  person_knows_person t
  JOIN person src ON t.person1id = src.id
  JOIN person dst ON t.person2id = dst.id


statement ok
CREATE TABLE all_options(   person1id BIGINT,
                            person1rowid BIGINT,
                            person2id BIGINT,
                            person2rowid BIGINT);

statement ok
INSERT INTO all_options (SELECT p.id as person1id, p.rowid as person1rowid, p2.id as person2id, p2.rowid as person2rowid
                            FROM person p
                            CROSS JOIN person p2);

query IIIIII
SELECT p.person1id, p.person1rowid, p.person2id, p.person2rowid,
    shortestpath(0, (select count(*) from person), p.person1rowid, p.person2rowid) AS weight
    FROM all_options p
    WHERE weight IS NOT NULL;
----
1	1	1	1	1


