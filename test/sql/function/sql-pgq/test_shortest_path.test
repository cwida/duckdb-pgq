# name: test/sql/function/sql-pgq/test_shortest_path.test
# description: Test shortest path function
# group: [sql-pgq]

require sqlpgq

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (353, 'D');

statement ok
INSERT INTO Transfers VALUES
    (955, 197, 201, 100),
    (124, 201, 343, 500),
    (124, 343, 197, 500);

statement ok
insert into transfers select tid, to_id, from_id, amount from transfers;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 2), (0, 4, 1, 2), (0, 4, 3, 0), (0, 4, 0, 1), (0, 4, 0, 0);

#query T
#SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
#----
#[0, 2, 2]
#[1, 12, 2]
#NULL
#[0, 1, 1]
#[0]

statement ok
INSERT INTO Transfers VALUES
    (123, 343, 353, 100),
    (123, 353, 343, 100);

statement ok
DELETE FROM src_dest;

statement ok
INSERT INTO src_dest VALUES (0, 4, 0, 3);

statement ok
PRAGMA delete_csr=0;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

#-- CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT),

#query T
#SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
#----
#[0, 2, 2, 23, 3]

#-- [0, 2, 2, 23, 3]

statement ok
PRAGMA delete_csr=0;

statement ok
DELETE FROM src_dest;

statement ok
DELETE FROM Transfers;

statement ok
INSERT INTO Transfers VALUES
    (124, 197, 343, 500),
    (124, 201, 343, 500),
    (124, 343, 353, 500),

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, CAST(CAST(src.rowid AS VARCHAR) || CAST(dst.rowid AS VARCHAR) AS BIGINT), t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
INSERT INTO src_dest VALUES
    (0, 4, 0, 3),
    (0, 4, 1, 3)
#
#query T
#SELECT shortestpath(0, v_size, src, dst) FROM src_dest;
#----
#[0, 2, 2, 23, 3]
#[1, 12, 2, 23, 3]

statement ok
pragma delete_csr=0;

statement ok
DELETE FROM src_dest;

statement ok
CREATE TABLE person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person.csv');

statement ok
CREATE TABLE person_knows_person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person_knows_person.csv');

statement ok
CREATE TABLE parameters AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/parameters/q13-subset.csv');

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM person c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM person c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM person c
    LEFT JOIN person_knows_person t ON t.person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, dst.id))
FROM
  person_knows_person t
  JOIN person src ON t.person1id = src.id
  JOIN person dst ON t.person2id = dst.id


statement ok
CREATE TABLE all_options(   person1id BIGINT,
                            person1rowid BIGINT,
                            person2id BIGINT,
                            person2rowid BIGINT);

statement ok
insert into all_options VALUES (13194139540172,3760,17592186048824,4761),
                               (13194139539662,3735,17592186049334,4785),
                               (15393162794033,4211,17592186050725,4863),
                               (13194139536821,3560,17592186052175,4932),
                               (24189255820950,6702,17592186054199,5021),
                               (21990232565211,6138,19791209300877,5114),
                               (10995116284623,3163,19791209304373,5294),
                               (21990232565065,6130,19791209301023,5124),
                               (21990232565065,6130,19791209301023,5124),
                               (10995116283463,3092,19791209305533,5351);


#13194139539662,3735,17592186049334,4785
#statement ok
#INSERT INTO all_options (
#    select p.person1id as person1id, pe.rowid as person1rowid, p.person2id as person2id, pe2.rowid as person2rowid
#    from parameters p
#    join person pe on p.person1id = pe.id
#    join person pe2 on p.person2id = pe2.id)

query IIIIII
SELECT p.person1id, p.person1rowid, p.person2id, p.person2rowid,
    shortestpath(0, (select count(*) from person), p.person1rowid, p.person2rowid) AS path,
    iterativelength(0, (select count(*) from person), p.person1rowid, p.person2rowid) AS length
    FROM all_options p

