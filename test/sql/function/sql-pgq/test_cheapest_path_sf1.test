require sqlpgq

statement ok
CREATE TABLE person(id BIGINT PRIMARY KEY);

statement ok
CREATE TABLE person_knows_person(source BIGINT NOT NULL, target BIGINT NOT NULL, weight decimal(17,0));

statement ok
COPY person_knows_person FROM 'data/sqlpgq-testing/sf1/person_knows_person.csv' (FORMAT 'csv', DELIMITER ',');

statement ok
COPY person FROM 'data/sqlpgq-testing/sf1/person.csv' (FORMAT 'csv', DELIMITER ',');

statement ok
create table parameters (person1Id bigint, person2Id bigint);

statement ok
copy parameters from 'data/sqlpgq-testing/parameters/interactive-13.csv' (DELIMITER '|', HEADER);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT p.rowid as dense_id, count(k.source) as cnt
    FROM person p
    LEFT JOIN  person_knows_person k ON k.source = p.id
    GROUP BY p.rowid
) sub,  (SELECT count(p.id) as vcount FROM person p) v;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(p.id) as vcount FROM person p),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(p.id) as vcount FROM person p),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT p.rowid as dense_id, count(k.source) as cnt
    FROM person p
    LEFT JOIN  person_knows_person k ON k.source = p.id
    GROUP BY p.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, k.weight))
FROM
  person_knows_person k
  JOIN person src ON k.source = src.id
  JOIN person dst ON k.target = dst.id;

statement ok
create table parameters_rowid as select p.rowid as src_rowid, p2.rowid as dst_rowid
FROM parameters h
JOIN person p on p.id = h.person1id
JOIN person p2 on p2.id = h.person2id;

query I
SELECT p.id, p2.id, cheapest_path(0, (select count(*) from person), s.src_rowid, s.dst_rowid) FROM parameters_rowid s
LEFT JOIN person p ON s.src_rowid = p.rowid
LEFT JOIN person p2 ON s.dst_rowid = p2.rowid
order by p.id, p2.id;
----
495	3791	12