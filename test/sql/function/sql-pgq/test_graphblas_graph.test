# name: test/sql/function/sql-pgq/test_graphblas_graph.test
# group: [sql-pgq]
require sqlpgq

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E'), (5, 'F'), (6, 'G');

statement ok
INSERT INTO Transfers VALUES
  (955, 0, 1, 150),
  (769, 0, 3, 50),
  (607, 1, 4, 250),
  (184, 1, 6, 350),
  (955, 2, 5, 150),
  (769, 3, 0, 100),
  (769, 3, 2, 50),
  (607, 4, 5, 250),
  (955, 5, 2, 150),
  (769, 6, 2, 50),
  (769, 6, 3, 50),
  (769, 6, 4, 50);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub,  (SELECT count(c.cid) as vcount FROM Customer c) v

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);


statement ok
INSERT INTO src_dest VALUES(0, 7, 0, 5), (0, 7, 1, 5), (0, 7, 1, 6), (0, 7, 1, 1), (0, 7, 1, 0), (0, 7, 3, 0), (0, 7, 0, 2), (0, 7, 0, 6);

#csr will be deleted after calling reachability.
query III
SELECT s.src, s.dst, any_shortest_path(s.id, false, v_size, s.src, s.dst) FROM src_dest s
----
0	5	[0, 3, 2, 5]
1	5	[1, 4, 5]
1	6	[1, 6]
1	1	[1]
1	0	[1, 6, 3, 0]
3	0	[3, 0]
0	2	[0, 3, 2]
0	6	[0, 1, 6]

#SELECT c.id, c2.id, shortest_path(s.id, false, v_size, s.src, s.dst) FROM src_dest s
#LEFT JOIN Customer c ON s.src = c.rowid
#LEFT JOIN Customer p2 ON s.dst = c2.rowid
#order by c.id, c2.id;