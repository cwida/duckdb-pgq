# name: test/sql/function/sql-pgq/snb_interactive_13_1.test
# group: [sql-pgq]
require sqlpgq

statement ok
create table person as select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person/part-00000-354b330a-be7e-4581-99ab-dfe73df59470-c000.csv', SAMPLE_SIZE=-1);

statement ok
insert into person select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person/part-00001-354b330a-be7e-4581-99ab-dfe73df59470-c000.csv', SAMPLE_SIZE=-1);

statement ok
create table person_knows_person as select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00001-97235d24-1e63-44da-a16e-fbec913d8097-c000.csv', SAMPLE_SIZE=-1);

statement ok
insert into person_knows_person select * from read_csv_auto('/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00000-97235d24-1e63-44da-a16e-fbec913d8097-c000.csv', SAMPLE_SIZE=-1);

statement ok
insert into person_knows_person (select creationdate, Person2id, Person1id from person_knows_person);

statement ok
CREATE TEMP TABLE PersonKnows AS (SELECT DISTINCT r.Person1id as id
                                    FROM ((SELECT Person1id
                                           FROM person_knows_person)
                                          UNION ALL
                                          (SELECT Person2id AS Person1id
                                           FROM person_knows_person)) r
                                    ORDER BY id);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM PersonKnows c
    LEFT JOIN  Person_knows_Person t ON t.person1id = c.id
    GROUP BY c.rowid
) sub, (SELECT count(c.id) as vcount FROM PersonKnows c) v;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM PersonKnows c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM PersonKnows c),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM PersonKnows c
    LEFT JOIN  Person_knows_Person t ON t.person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid))
FROM
  Person_knows_Person t
  JOIN PersonKnows src ON t.person1id = src.id
  JOIN PersonKnows dst ON t.person2id = dst.id;

statement ok
create table all_options as select * from read_csv_auto('/home/daniel/Desktop/outputq13.csv');

statement ok
create temp table results
(
    Person1id bigint,
    Person2id bigint,
    weight bigint
);




statement ok
INSERT INTO results (SELECT p.person1id, p.person2id, any_shortest_path(0, true, (select count(*) from PersonKnows), p.person1rowid, p.person2rowid) as weight from all_options p);


#query III
#SELECT s.id AS person1id, s2.id AS person2id, any_shortest_path(0, false, (SELECT count(*) FROM PersonKnows), s.rowid, s2.rowid) AS weight FROM
#(SELECT p.id, p.rowid FROM PersonKnows p WHERE p.id = 332) s,
#(SELECT p.id, p.rowid FROM PersonKnows p WHERE p.id = 2866) s2
#----
#332	2866	1