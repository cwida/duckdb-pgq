# name: test/sql/function/sql-pgq/test_outer_sql.test
# description: Test create csr function 
# group: [sql-pgq]

# statement ok
# PRAGMA enable_verification;
# statement ok
# PRAGMA threads=2;

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D');

statement ok
INSERT INTO Transfers VALUES
  (955, 173, 478, 150),
  (769, 173, 297, 50),
  (607, 478, 297, 250),
  (184, 297, 869, 350);

# CREATE TABLE Customer(cid bigint not null, name string);
# CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);
# INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D');
# INSERT INTO Transfers VALUES
#   (955, 173, 478, 150),
#   (769, 173, 297, 50),
#   (607, 478, 297, 250),
#   (184, 297, 869, 350);


query II rowsort
WITH cte1 AS (
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
sub.dense_id , sub.cnt )) as numEdges 
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c  
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT), 
src.rowid, dst.rowid ) ) as temp, (SELECT count(c.cid) FROM Customer c) as vcount
FROM 
  Transfers t 
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid
)
SELECT src.cid AS c1id, dst.cid AS c2id
FROM cte1, Customer src, Customer dst 
WHERE  
( reachability(0, true, cte1.vcount, src.rowid, dst.rowid) = cte1.temp)
----
173	173			
173	297
173	478
173	869
297	297
297	869
478	297
478	478
478	869
869	869

# statement ok
# CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

# statement ok
# INSERT INTO src_dest VALUES(0, 4, 0, 1), (0, 4, 0, 2), (0, 4, 0, 3),(0, 4, 1, 0), (0, 4, 1, 2), (0, 4, 1, 3), (0, 4, 2, 0),
# (0, 4, 2, 1), (0, 4, 2, 3), (0, 4, 3, 0), (0, 4, 3, 1), (0, 4, 3, 2);

# query T
# SELECT reachability(id, v_size, src, dst) FROM src_dest;


# ----
# 1
# 1
# 1
# 0
# 1
# 1
# 0
# 0
# 1
# 0
# 0
# 0

# SELECT src.cid AS c1id, dst.cid AS c2id 
# FROM cte1, Customer src, Customer dst
# WHERE src.rowid = cte1.src_row AND dst.rowid = cte1.dst_row  AND 
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), cte1.src_row, cte1.dst_row) = cte1.temp);


# WITH cte1 AS (
# SELECT CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# sub.dense_id , sub.cnt )) as numEdges 
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ) as temp, src.rowid as src_row, dst.rowid as dst_row
# FROM 
#   Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# )
# SELECT src.cid AS c1id cte1.temp 
# FROM cte1, Customer src, Customer dst 
# order by c1id;
#  AND 
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), cte1.src_row, cte1.dst_row) = cte1.temp);

# SELECT src.cid AS c1id, dst.cid AS c2id 
# FROM Customer src, Customer dst
# WHERE  
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), src.rowid, dst.rowid) = true)
# ORDER by c1id;

# SELECT src.rowid AS c1id, dst.rowid AS c2id 
# FROM Customer src, Customer dst
# WHERE  
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), src.rowid, dst.rowid) = true)
# ORDER by c1id;

# WITH cte1 AS (
# SELECT CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# sub.dense_id , sub.cnt )) as numEdges 
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ) as temp, src.rowid as src_row, dst.rowid as dst_row
# FROM 
#   Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# )
# SELECT src.cid AS c1id, dst.cid AS c2id 
# FROM cte1, Customer src, Customer dst
# WHERE src.rowid = cte1.src_row AND dst.rowid = cte1.dst_row  AND 
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), cte1.src_row, cte1.dst_row) = cte1.temp)

# WITH cte1 AS (
# SELECT CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# sub.dense_id , sub.cnt )) as numEdges 
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ) as temp, src.rowid as src_row, dst.rowid as dst_row
# FROM 
#   Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# )
# SELECT src.cid AS c1id, dst.cid AS c2id, cte1.temp 
# FROM cte1, Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# WHERE src.rowid = cte1.src_row AND dst.rowid = cte1.dst_row ;

# Erroring query
# EXPLAIN SELECT c1id, c2id FROM
# (WITH cte1 AS (
# SELECT CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# sub.dense_id , sub.cnt )) as numEdges 
# FROM (
#\t SELECT c.rowid as dense_id, count(t.from_id) as cnt
#\t FROM Customer c  
#/\t LEFT JOIN  Transfers t ON t.from_id = c.cid
#"\t" GROUP BY c.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ) as temp, src.rowid as src_row, dst.rowid as dst_row
# FROM 
#   Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# )
# SELECT src.cid AS c1id, dst.cid AS c2id, cte1.temp AS csr
# FROM cte1, Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# WHERE src.rowid = cte1.src_row AND dst.rowid = cte1.dst_row  AND 
# ( reachability(0, (SELECT count(c.cid) FROM Customer c), cte1.src_row, cte1.dst_row) = 1)
# ) cte_from;

# statement ok
# WITH cte1 AS (
# SELECT count(c.cid) as vcount FROM Customer c
# )
# SELECT src.cid AS c1id, dst.cid AS c2id, cte1.vcount 
# FROM cte1, Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid;


# EXPLAIN WITH cte2 AS (
# SELECT CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c), 
# sub.dense_id , sub.cnt )) AS numEdges
# FROM (
#"\t" SELECT c.rowid as dense_id, count(t.from_id) as cnt
#"\t" FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub) AS BIGINT), 
# src.rowid, dst.rowid ) as temp, src.rowid as src_row, dst.rowid as dst_row
# FROM 
#   Transfers t 
#   JOIN Customer src ON t.from_id = src.cid
#   JOIN Customer dst ON t.to_id = dst.cid
# )
# SELECT cte2.temp, cte2.src_row, cte2.ds from cte2
# WHERE ( reachability(0, (SELECT count(c.cid) FROM Customer c), cte2.src_row, cte2.dst_row) = 1);
# SELECT 
# FROM 

# FROM cte1 
# )


# SELECT src.cid AS c1id, dst.cid AS c2id 
# FROM csr JOIN Customer src JOIN Customer dst 
# WHERE  
# ( greatest(src.rowid, dst.rowid) = csr.temp);