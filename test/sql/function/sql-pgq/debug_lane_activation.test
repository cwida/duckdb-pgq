# name: test/sql/function/sql-pgq/test_create_csr.test
# description: Debug lane activation
# group: [sql-pgq]

require sqlpgq

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (353, 'D');

statement ok
INSERT INTO Transfers VALUES
    (955, 197, 201, 100),
    (124, 201, 343, 500),
    (124, 343, 197, 500);

statement ok
insert into transfers select tid, to_id, from_id, amount from transfers;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid


statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 2), (0, 4, 1, 2), (0, 4, 0 ,3), (0, 4, 0, 1);

query T
SELECT iterativelength(0, v_size, src, dst) FROM src_dest;
----
1
1
NULL
1

statement ok
pragma delete_csr=0;

statement ok
CREATE TABLE person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person.csv');

statement ok
CREATE TABLE person_knows_person AS SELECT * FROM read_csv_auto('data/sqlpgq-testing/snb/sf1/person_knows_person.csv');

statement ok
CREATE TABLE parameters as SELECT * FROM read_csv_auto('/Users/dljtw/git/duckpgq-experiments/parameters/sf1/q13a.csv') LIMIT 64;

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM person c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM person c),
sub.dense_id, sub.cnt)) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.person1id) as cnt
    FROM person c
    LEFT JOIN person_knows_person t ON t.person1id = c.id
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.weight))
FROM
  person_knows_person t
  JOIN person src ON t.person1id = src.id
  JOIN person dst ON t.person2id = dst.id


statement ok
CREATE TABLE all_options(   person1id BIGINT,
                            person1rowid BIGINT,
                            person2id BIGINT,
                            person2rowid BIGINT);


statement ok
INSERT INTO all_options (
    SELECT p.person1id as person1id, p2.rowid as person1rowid, p.person2id as person2id, p3.rowid as person2rowid
    FROM parameters p
        JOIN person p2 on p.person1id = p2.id
        JOIN person p3 on p.person2id = p3.id
    )

query IIIII
SELECT p.person1id, p.person1rowid, p.person2id, p.person2rowid,
    iterativelength(0, (select count(*) from person), p.person1rowid, p.person2rowid) AS length
    FROM all_options p;
----
24189255820950	6702	17592186054199	5021	NULL
21990232555638	5620	24189255813043	6287	NULL
19791209300876	5113	26388279067805	6796	4
8796093032749	2814	32985348842400	8878	2
8796093032451	2803	32985348842698	8897	3
8796093031814	10163	32985348843335	8927	4
8796093031490	2743	32985348843659	8945	NULL
4398046520615	1648	37383395354534	9973	3
