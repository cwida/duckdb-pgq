require sqlpgq

statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (406, 'D'), (101, 'E'), (807, 'F');

statement ok
INSERT INTO Transfers VALUES
  (955, 197, 201, 100),
  (323, 197, 343, 300),
  (124, 197, 807, 200),
  (203, 201, 343, 50),
  (123, 343, 406, 10),
  (122, 343, 807, 50),
  (321, 406, 343, 200),
  (125, 406, 807, 20),
  (127, 101, 406, 150),
  (126, 807, 101, 100);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub,  (SELECT count(c.cid) as vcount FROM Customer c) v

statement ok
SELECT min(CREATE_CSR_EDGE_AND_WEIGHT(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id, sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.amount ))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

#statement ok
#SELECT min(CREATE_CSR_WEIGHT(0, (SELECT count(c.cid) as vcount FROM Customer c),
#CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
#sub.dense_id, sub.cnt )) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub) AS BIGINT),
#src.rowid, t.amount ))
#FROM
#  Transfers t
#  JOIN Customer src ON t.from_id = src.cid
#  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 6, 0, 5), (0, 6, 0, 4), (0, 6, 5, 3), (0, 6, 0, 2), (0, 6, 2, 3), (0, 6, 1, 5), (0, 6, 3, 2), (0, 6, 0, 1) ;

#csr will be deleted after calling cheapest_path.
query T
SELECT cheapest_path(id, v_size, src, dst) FROM src_dest;
----
180
280
250
150
10
80
200
100

statement ok
drop table src_dest

statement ok
drop table Customer

statement ok
drop table Transfers



