# name: test/sql/function/sql-pgq/test_create_csr.test
# description: Test create csr function
# group: [sql-pgq]

require sqlpgq


statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);


statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (353, 'D');

statement ok
INSERT INTO Transfers VALUES
    (955, 197, 201, 100),
    (124, 201, 343, 500),
    (124, 343, 197, 500);

#statement ok
#INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (406, 'D'), (101, 'E'), (807, 'F'), (404, 'G');

#statement ok
#INSERT INTO Transfers VALUES
#    (955, 197, 201, 100),
#    (323, 197, 343, 300),
#    (124, 197, 807, 500),
#    (203, 201, 343, 50),
#    (123, 343, 406, 10),
#    (122, 343, 807, 50),
#    (321, 406, 343, 200),
#    (125, 406, 807, 20),
#    (127, 101, 406, 150),
#    (126, 807, 101, 100),
#    (129, 404, 101, 150),
#    (124, 101, 404, 100);

statement ok
insert into transfers select tid, to_id, from_id, amount from transfers;

#statement ok
#SELECT CREATE_CSR_VERTEX(
#0,
#v.vcount,
#sub.dense_id,
#sub.cnt
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub, (SELECT count(c.cid) as vcount FROM Customer c) v


statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid


statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 2), (0, 4, 1, 2);
#, (0, 7, 1, 2), (0, 7, 5, 3), (0, 7, 0, 2), (0, 7, 0, 5), (0,7, 6, 4), (0,7, 6, 0);

query T
SELECT bidirectionaliterativelength(0, v_size, src, dst) FROM src_dest;
----
1
1

statement ok
DELETE FROM src_dest;

statement ok
INSERT INTO src_dest VALUES(0, 4, 0, 3);
#, (0, 7, 1, 2), (0, 7, 5, 3), (0, 7, 0, 2), (0, 7, 0, 5), (0,7, 6, 4), (0,7, 6, 0);

query T
SELECT bidirectionaliterativelength(0, v_size, src, dst) FROM src_dest;
----
3

statement ok
DELETE FROM src_dest;

statement ok
INSERT INTO src_dest VALUES(0, 3, 0, 1);

query T
SELECT bidirectionaliterativelength(0, v_size, src, dst) FROM src_dest;
----
1

#query T
#SELECT coalesce(cheapest_path(0, v_size, src, dst), -1) FROM src_dest;
#----
#160
#50
#-1
#150
#
#query T
#SELECT cheapest_path(0, v_size, src, dst) FROM src_dest;
#----
#160
#50
#NULL
#150


#query I
#SELECT c1id, c2id, weight
#FROM (
#    WITH cte1 AS (
#    SELECT sum( CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
#        CAST ((
#          SELECT sum(CREATE_CSR_VERTEX(0,
#            (SELECT count(c.cid) as vcount FROM Customer c),
#            sub.dense_id,
#            sub.cnt
#           )) as numEdges
#          FROM (
#            SELECT c.rowid as dense_id, count(t.from_id) as cnt
#            FROM Customer c
#            LEFT JOIN Transfers t ON t.from_id = c.cid
#            GROUP BY c.rowid
#          ) sub) AS BIGINT
#        ), src.rowid, dst.rowid
#    ) ) as temp,
#    (SELECT count(c.cid) FROM Customer c) as vcount
#    FROM
#      Transfers t
#      JOIN Customer src ON t.from_id = src.cid
#      JOIN Customer dst ON t.to_id = dst.cid
#    )
#    SELECT src_dest.src AS c1id, src_dest.dst AS c2id, shortest_path(0, true, cte1.vcount, src_dest.src, src_dest.dst) as weight
#    FROM cte1, src_dest
#    WHERE ( shortest_path(0, true, cte1.vcount, src_dest.src, src_dest.dst) <= cte1.temp )
#);
#----
#160
#50
#NULL
#150

#statement ok
#pragma set_lane_limit=256
#
#query T
#SELECT cheapest_path(0, v_size, src, dst) FROM src_dest;
#----
#160
#50
#100
#150
#180
#NULL
#
#
#statement ok
#pragma delete_csr=0
#
#statement ok
#CREATE TABLE Transfers_float(tid bigint, from_id bigint, to_id bigint, amount double);
#
#statement ok
#INSERT INTO Transfers_float VALUES
#  (955, 197, 201, 100.1),
#  (323, 197, 343, 300.5),
#  (124, 197, 807, 200.2),
#  (203, 201, 343, 50.3),
#  (123, 343, 406, 10.7),
#  (122, 343, 807, 50.2),
#  (321, 406, 343, 200.3),
#  (125, 406, 807, 20.1),
#  (127, 101, 406, 150.3),
#  (126, 807, 101, 100.5);
#
#
#statement ok
#SELECT CREATE_CSR_VERTEX(
#0,
#v.vcount,
#sub.dense_id,
#sub.cnt
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers_float t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub, (SELECT count(c.cid) as vcount FROM Customer c) v
#
#
#statement ok
#SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
#CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
#sub.dense_id, sub.cnt)) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers_float t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub) AS BIGINT),
#src.rowid, dst.rowid, t.amount))
#FROM
#  Transfers_float t
#  JOIN Customer src ON t.from_id = src.cid
#  JOIN Customer dst ON t.to_id = dst.cid

#
#query T
#SELECT cheapest_path(0, v_size, src, dst) FROM src_dest;
#----
#161.100000
#50.300000
#NULL
#150.400000
#181.200000
#NULL
#
#statement ok
#pragma delete_csr=0