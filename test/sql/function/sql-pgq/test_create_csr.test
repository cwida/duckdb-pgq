# name: test/sql/function/sql-pgq/test_create_csr.test
# description: Test create csr function
# group: [sql-pgq]
require sqlpgq


statement ok
CREATE TABLE Customer(cid bigint not null, name string);

statement ok
CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);

statement ok
INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (406, 'D'), (101, 'E'), (807, 'F'), (404, 'G');

statement ok
INSERT INTO Transfers VALUES
  (955, 197, 201, 100),
  (323, 197, 343, 300),
  (124, 197, 807, 200),
  (203, 201, 343, 50),
  (123, 343, 406, 10),
  (122, 343, 807, 50),
  (321, 406, 343, 200),
  (125, 406, 807, 20),
  (127, 101, 406, 150),
  (126, 807, 101, 100);


query I
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub, (SELECT count(c.cid) as vcount FROM Customer c) v
----
3
1
2
2
1
1
0

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.amount))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement ok
CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);

statement ok
INSERT INTO src_dest VALUES(0, 7, 0, 3), (0, 7, 1, 2), (0, 7, 1, 0), (0, 7, 0, 2);

query T
SELECT cheapest_path(0, v_size, src, dst) FROM src_dest;
----
160
50
NULL
150

statement ok
pragma delete_csr=0

statement error
pragma delete_csr=0

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub, (SELECT count(c.cid) as vcount FROM Customer c) v

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid))
FROM
  Transfers t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid


statement ok
pragma delete_csr=0

statement ok
CREATE TABLE Transfers_f(tid bigint, from_id bigint, to_id bigint, amount double);

statement ok
INSERT INTO Transfers_f VALUES
  (955, 197, 201, 100.0),
  (323, 197, 343, 300.1),
  (124, 197, 807, 200.2),
  (203, 201, 343, 50.3),
  (123, 343, 406, 10.4),
  (122, 343, 807, 50.5),
  (321, 406, 343, 200.7),
  (125, 406, 807, 20.6),
  (127, 101, 406, 150.8),
  (126, 807, 101, 100.9);

statement ok
SELECT CREATE_CSR_VERTEX(
0,
v.vcount,
sub.dense_id,
sub.cnt
) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers_f t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub, (SELECT count(c.cid) as vcount FROM Customer c) v

statement ok
SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
sub.dense_id , sub.cnt )) AS numEdges
FROM (
    SELECT c.rowid as dense_id, count(t.from_id) as cnt
    FROM Customer c
    LEFT JOIN  Transfers_f t ON t.from_id = c.cid
    GROUP BY c.rowid
) sub) AS BIGINT),
src.rowid, dst.rowid, t.amount))
FROM
  Transfers_f t
  JOIN Customer src ON t.from_id = src.cid
  JOIN Customer dst ON t.to_id = dst.cid

statement error
SELECT cheapest_path(0, v_size, src, dst) FROM src_dest;

statement ok
pragma delete_csr=0