# name: test/sql/function/sql-pgq/test_create_csr.test
# description: Test create csr function
# group: [sql-pgq]


require sqlpgq

statement ok
create table comment as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Comment/part-00001-47198ecc-269c-4c7f-99e0-26f1f3a15edd-c000.csv');

statement ok
select * from comment;

statement ok
create table post as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Post/part-00000-38b0ed70-f437-427a-9ddf-96c4c609a6ee-c000.csv');

statement ok
create table person_knows_person as (select * from '/home/daniel/Documents/ldbc_snb_datagen_spark/out-sf0.1/graphs/csv/bi/composite-merged-fk/initial_snapshot/dynamic/Person_knows_Person/part-00000-ec450818-55f1-47df-90a7-b73b5c67649c-c000.csv');

statement ok
CREATE TABLE Message as (SELECT p.id as messageid, NULL as ParentMessageId, p.CreatorPersonId
     FROM Post p
     UNION ALL
     SELECT c.id                                    as messageid,
            coalesce(ParentPostId, ParentCommentId) as ParentMessageId,
            c.CreatorPersonid
     FROM comment c);


statement ok
CREATE TABLE interactions as (select least(m1.creatorpersonid, m2.creatorpersonid) as src,
                                         greatest(m1.creatorpersonid, m2.creatorpersonid) as dst,
                                         count(*) as c
                                  from Person_knows_person pp, Message m1, Message m2
                                  where pp.person1id = m1.creatorpersonid and pp.person2id = m2.creatorpersonid and m1.parentmessageid = m2.messageid and m1.creatorpersonid <> m2.creatorpersonid
                                  group by src, dst);

statement ok
CREATE TABLE weights as (select src, dst, weight from (
                            select src, dst, 1.0::double precision / c as weight from interactions
                            union all
                            select dst, src, 1.0::double precision / c as weight from interactions)
                        order by src, dst);

statement ok
CREATE TABLE PersonInteractions AS (SELECT DISTINCT id
                                    FROM ((SELECT src as id
                                           FROM weights)
                                          UNION ALL
                                          (SELECT dst AS id
                                           FROM weights))
                                    ORDER BY id);


#statement ok
#SELECT sum(CREATE_CSR_VERTEX(
#           0,
#           v.vcount,
#           sub.dense_id,
#           sub.cnt
#           ))
#FROM (SELECT p.rowid as dense_id, count(k.src) as cnt
#      FROM PersonInteractions p
#               LEFT JOIN weights k ON k.src = p.id
#      GROUP BY p.rowid) sub,
#     (SELECT count(p.id) as vcount FROM PersonInteractions p) v;
#
#statement ok
#SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.id) as vcount FROM PersonInteractions c),
#CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.id) as vcount FROM PersonInteractions c),
#sub.dense_id , sub.cnt )) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.src) as cnt
#    FROM PersonInteractions c
#    LEFT JOIN  weights t ON t.src = c.id
#    GROUP BY c.rowid
#) sub) AS BIGINT),
#src.rowid, dst.rowid ))
#FROM
#  weights t
#  JOIN PersonInteractions src ON t.src = src.id
#  JOIN PersonInteractions dst ON t.dst = dst.id


statement ok
SELECT DISTINCT CREATE_CSR(
               0,
               v.vcount,
               e.ecount,
               sub.dense_id,
               sub.cnt,
               r.src,
               r.dst,
               r.weight
           )
FROM (SELECT p.rowid as dense_id, count(k.src) as cnt
      FROM PersonInteractions p
               LEFT JOIN weights k ON k.src = p.id
      GROUP BY p.rowid) sub,
      (select count(w.src) as ecount FROM weights w) e,
     (SELECT count(p.id) as vcount FROM PersonInteractions p) v,
     (SELECT src.rowid as src, dst.rowid as dst, t.weight as weight
      FROM weights t
               JOIN PersonInteractions src ON t.src = src.id
               JOIN PersonInteractions dst ON t.dst = dst.id) r
WHERE r.src = sub.dense_id;

#
#statement ok
#CREATE TABLE Customer(cid bigint not null, name string);
#
#statement ok
#CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);
#
#statement ok
#INSERT INTO Customer VALUES (197, 'A'), (201, 'B'), (343, 'C'), (406, 'D'), (101, 'E'), (807, 'F'), (404, 'G');
#
#statement ok
#INSERT INTO Transfers VALUES
#  (955, 197, 201, 100),
#  (323, 197, 343, 300),
#  (124, 197, 807, 200),
#  (203, 201, 343, 50),
#  (123, 343, 406, 10),
#  (122, 343, 807, 50),
#  (321, 406, 343, 200),
#  (125, 406, 807, 20),
#  (127, 101, 406, 150),
#  (126, 807, 101, 100);


#query I
#SELECT DISTINCT CREATE_CSR(
#0,
#v.vcount,
#sub.dense_id,
#sub.cnt,
#r.src,
#r.dst
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub, (SELECT count(c.cid) as vcount FROM Customer c) v, (SELECT src.rowid as src, dst.rowid as dst, t.amount as weight
#                                                            FROM Transfers t
#                                                            JOIN Customer src ON t.from_id = src.cid
#                                                            JOIN Customer dst ON t.to_id = dst.cid) r
#                                                            WHERE r.src = sub.dense_id;
#----
#{'id': 0, 'vertices': 7, 'edges': 10, 'weight': none}

#
#statement ok
#CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);
#
#statement ok
#INSERT INTO src_dest VALUES(0, 6, 0, 5), (0, 6, 0, 4), (0, 6, 5, 3), (0, 6, 0, 2), (0, 6, 2, 3), (0, 6, 1, 5), (0, 6, 3, 2), (0, 6, 0, 1) ;

#csr will be deleted after calling cheapest_path.
#query T
#SELECT cheapest_path(id, v_size, src, dst) FROM src_dest;
#----
#180
#280
#250
#150
#10
#80
#200
#100
#
#statement ok
#CREATE TABLE Transfers_float(tid bigint, from_id bigint, to_id bigint, amount double);
#
#
#statement ok
#INSERT INTO Transfers_float VALUES
#  (955, 197, 201, 100.1),
#  (323, 197, 343, 300.5),
#  (124, 197, 807, 200.2),
#  (203, 201, 343, 50.3),
#  (123, 343, 406, 10.7),
#  (122, 343, 807, 50.2),
#  (321, 406, 343, 200.3),
#  (125, 406, 807, 20.1),
#  (127, 101, 406, 150.3),
#  (126, 807, 101, 100.5);
#
#query I
#SELECT DISTINCT CREATE_CSR(
#0,
#v.vcount,
#sub.dense_id,
#sub.cnt,
#r.src,
#r.dst,
#r.weight
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers_float t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub,
#    (SELECT count(c.cid) as vcount FROM Customer c) v,
#    (SELECT src.rowid as src, dst.rowid as dst, t.amount as weight
#        FROM Transfers_float t
#        JOIN Customer src ON t.from_id = src.cid
#        JOIN Customer dst ON t.to_id = dst.cid) r
#    WHERE r.src = sub.dense_id;
#----
#{'id': 0, 'vertices': 7, 'edges': 10, 'weight': double}
#
#query I
#SELECT DISTINCT CREATE_CSR(
#1,
#v.vcount,
#sub.dense_id,
#sub.cnt,
#r.src,
#r.dst,
#r.weight
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers_float t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub,
#    (SELECT count(c.cid) as vcount FROM Customer c) v,
#    (SELECT src.rowid as src, dst.rowid as dst, t.amount as weight
#        FROM Transfers_float t
#        JOIN Customer src ON t.from_id = src.cid
#        JOIN Customer dst ON t.to_id = dst.cid) r
#    WHERE r.src = sub.dense_id;
#----
#{'id': 1, 'vertices': 7, 'edges': 10}

#SELECT
#0 as id,
#v.vcount,
#sub.dense_id,
#sub.cnt,
#r.src,
#r.dst,
#r.weight
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub, (SELECT count(c.cid) as vcount FROM Customer c) v, (SELECT src.rowid as src, dst.rowid as dst, t.amount as weight
#                                                            FROM Transfers t
#                                                            JOIN Customer src ON t.from_id = src.cid
#                                                            JOIN Customer dst ON t.to_id = dst.cid) r
#                                                            WHERE r.src = sub.dense_id;




# statement ok
# CREATE TABLE regex(s STRING, p STRING)

# statement ok
# INSERT INTO regex VALUES ('asdf', 'sd'), ('asdf', '^sd'), (NULL, '^sd'), ('asdf', NULL)

# statement ok
# CREATE SEQUENCE seq;

# query R
# SELECT AVG(nextval('seq'))
# ----
# 1


# query T
# SELECT regexp_matches(s, '.*') FROM regex
# ----
# 1
# 1
# NULL
# 1

# query T
# SELECT regexp_matches(s, p) FROM regex
# ----
# 1
# 0
# NULL
# NULL

#statement ok
#SELECT test_age(LIST_VALUE(25, 10)) t
# statement ok
# CREATE TABLE csr(a INTEGER, b INTEGER, c INTEGER)

# statement ok
# INSERT INTO csr VALUES (1,10, 0), (1,10, 2), (1,10, 3)
#
#statement ok
#CREATE TABLE Customer(cid bigint not null, name string);
#
#statement ok
#CREATE TABLE Transfers(tid bigint, from_id bigint, to_id bigint, amount bigint);
#
#statement ok
#INSERT INTO Customer VALUES (173, 'A'), (478, 'B'), (297, 'C'), (869, 'D');
#
#statement ok
#INSERT INTO Transfers VALUES
#  (955, 173, 478, 150),
#  (769, 173, 297, 50),
#  (607, 478, 297, 250),
#  (184, 297, 869, 350);
#
#statement ok
#CREATE TABLE TestSerial(tid int)
#
#statement ok
#INSERT INTO TestSerial VALUES(0), (1), (2)

# query T
# SELECT sum(CREATE_CSR_VERTEX(0, 3, tid)) 
# FROM 
# (SELECT tid from TestSerial) ts
# ----
# 3


#query T
#SELECT v.vcount FROM (SELECT count(c.cid) as vcount FROM Customer c) v
#----
#4


# query T
# SELECT sum(CREATE_CSR_VERTEX(0, 4, 
# CAST (sub.dense_id AS INT) , CAST (sub.cnt AS INT))) AS numEdges
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub
# ----
# 4

#query T
#SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
#sub.dense_id , sub.cnt)) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub
#----
#4


# (SELECT count(c.cid) as vcount FROM Customer c)


#statement ok
#SELECT CREATE_CSR_VERTEX(
#0,
#v.vcount,
#sub.dense_id,
#sub.cnt
#) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub,  (SELECT count(c.cid) as vcount FROM Customer c) v

# SELECT sin((SELECT count(cid) as vcount FROM Customer c)), 
# CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT)
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub

# SELECT CAST(v.vcount AS INT), 
# CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT)
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub, 
# (SELECT count(c.cid) as vcount FROM Customer c) v

# UNION SELECT v.vcount FROM (SELECT count(c.cid) as vcount FROM Customer c) v

#statement ok
#SELECT min(CREATE_CSR_EDGE(0, (SELECT count(c.cid) as vcount FROM Customer c),
#CAST ((SELECT sum(CREATE_CSR_VERTEX(0, (SELECT count(c.cid) as vcount FROM Customer c),
#sub.dense_id , sub.cnt )) AS numEdges
#FROM (
#    SELECT c.rowid as dense_id, count(t.from_id) as cnt
#    FROM Customer c
#    LEFT JOIN  Transfers t ON t.from_id = c.cid
#    GROUP BY c.rowid
#) sub) AS BIGINT),
#src.rowid, dst.rowid ))
#FROM
#  Transfers t
#  JOIN Customer src ON t.from_id = src.cid
#  JOIN Customer dst ON t.to_id = dst.cid

#statement ok
#CREATE TABLE src_dest(id int, v_size bigint, src bigint, dst bigint);
#
#statement ok
#INSERT INTO src_dest VALUES(0, 4, 0, 3), (0, 4, 1, 2), (0, 4, 1, 0), (0, 4, 0, 2);
#
##csr will be deleted after calling reachability.
#query T
#SELECT reachability(id, false, v_size, src, dst) FROM src_dest;
#----
#1
#1
#0
#1

# ----
# 1

# SELECT sum(CREATE_CSR_VERTEX(0, 5, CAST(sub.dense_id AS INT), CAST(sub.cnt AS INT))) AS numEdges
# FROM (
#     SELECT c.rowid as dense_id, count(t.from_id) as cnt
#     FROM Customer c  
#     LEFT JOIN  Transfers t ON t.from_id = c.cid
#     GROUP BY c.rowid
# ) sub
# (SELECT count(c.cid) FROM Customer c) AS INT)
# (SELECT count(c.cid) FROM Customer c)

# statement ok
# SELECT CREATE_CSR_VERTEX(1, 10, 0 ,1 , 3)

#statement ok
#SELECT CREATE_CSR_VERTEX_TEST(10)

#statement error
#SELECT CREATE_CSR_VERTEX()


#, LIST_VALUE(0, 1, 3))
#SELECT LIST_VALUE(1,2,3)
#

# SELECT c.rowid as dense_id, count(t.from_id) as cnt FROM Customer c  LEFT JOIN  Transfers t ON t.from_id = c.cid GROUP BY c.rowid